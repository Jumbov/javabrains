{ "results": [
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Idempotence. Yes, that's a word. And it's an important property of HTTP methods according to the specifications.",
            "nextLessonPermalinkName": "Rest-Response",
            "permalinkName": "Idempotence-In-HTTP-Methods",
            "prevLessonPermalinkName": "HTTP-Methods",
            "sections": [
                {
                    "content": "\u003cp\u003eIdempotence. Yes, that\u0026#39;s a word. And it\u0026#39;s an important property of HTTP methods according to the specifications.\u003c/p\u003e\n\u003ch2 id=\"put-vs-post\"\u003ePUT vs POST\u003c/h2\u003e\n\u003cp\u003eWhen I was learning about RESTful web services, one thing that confused me was the difference between PUT and POST. Like we\u0026#39;ve already seen, you use PUT when you want to update an existing resource, and POST when you want to create a new resource. But if you search online, you will very likely find a lot of resources that contradict each other. Some are plain wrong, while others tell you the right thing to do, but do not explain why. I\u0026#39;ll try to explain this difference and hopefully, it\u0026#39;ll be clear to you by the time you are done with this tutorial.\u003c/p\u003e\n\u003ch2 id=\"method-classification\"\u003eMethod classification\u003c/h2\u003e\n\u003cp\u003eThere are two ways in which we can classify these 4 popular HTTP methods: GET, PUT, POST and DELETE. The GET method is a \u003cem\u003eread-only\u003c/em\u003e method; it lets you read information. But the methods PUT, POST and DELETE are \u003cem\u003ewrite\u003c/em\u003e methods; they change something on the server. They either create, update or delete, but they all cause something to change on the server. \u003c/p\u003e\n\u003cp\u003eSo, it is safe to assume that you can make a GET request as many times as you want without having any \u003cem\u003eimpact\u003c/em\u003e on the server. You should never have a GET method do things like updates or deletes.\u003c/p\u003e\n\u003cp\u003eFor example: GET on \u003ccode\u003e/messages/20/delete\u003c/code\u003e. \u003cstrong\u003eNever do this!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNothing changes when you do a GET, so it\u0026#39;s safe to make multiple requests and not worry about the side effect. But how about PUT, POST and DELETE? Since they are methods that \u003cem\u003ewrite\u003c/em\u003e to the server, you obviously cannot make those calls multiple times!  Or can you?\u003c/p\u003e\n\u003cp\u003eJust because an operation is not read-only, it doesn\u0026#39;t automatically mean that it cannot be duplicated.\u003c/p\u003e\n\u003cp\u003eTake an example of a Java assignment statement. Assume \u003ccode\u003ecount\u003c/code\u003e is an \u003ccode\u003einteger\u003c/code\u003e variable\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-java\"\u003ecount = 100;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is definitely not a read-only operation. This statement writes a value 100 to the variable \u003ccode\u003ecount\u003c/code\u003e. However, if you were to repeat this operation three times, lines 2 and 3 do not really do anything. Well, maybe they do write the value to the variable, but for all practical purposes, they do not have any effect.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-java\"\u003ecount = 100;\ncount = 100;\ncount = 100;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis nature of some operations that let them be \u003cem\u003erepeatable\u003c/em\u003e is important in HTTP methods. Like we saw, GET is clearly a repeatable operation, because it is read-only. \u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s take DELETE. Say you make a DELETE request to \u003ccode\u003e/messages/10\u003c/code\u003e. This deletes message ID 10. Say you make the same call again. Well, message 10 is already deleted. So nothing happens. While it isn\u0026#39;t really required or desirable to make multiple DELETE calls to the same resource, you can see that it is at least not a problem. There are no unwanted side effects if you were to make a duplicate call by mistake.\u003c/p\u003e\n\u003cp\u003eOk, how about PUT. Say you make a PUT request to \u003ccode\u003e/messages/20\u003c/code\u003e with some message text in the request body. This is going to replace whatever message ID 20 was with this new message text that\u0026#39;s being sent in the request body. Say you make the exact same call again. Message ID 20 is again replaced with the exact same message text again. Make the same request the third time, and the result is the same. Guess what? Even a PUT is \u003cem\u003esafe\u003c/em\u003e when it comes to making multiple calls. If you were to accidentally repeat a PUT request, well, don\u0026#39;t worry about it. The final saved message remains the same after every request.\u003c/p\u003e\n\u003cp\u003eThe problem, however, is with the POST request. If you were to make a POST request to \u003ccode\u003e/messages\u003c/code\u003e, you create a new message. Say you forgot you made a POST request, and you issued the request again, and now you\u0026#39;ve actually created a duplicate message. Repeat that call, and you get another message! So every time a POST request is made, something new happens. This is clearly not a \u003cem\u003esafe\u003c/em\u003e method to make multiple calls with. Every duplicate call changes things by creating a new resource. It\u0026#39;s definitely not a good idea to make multiple POST calls, unless you actually need multiple resources.\u003c/p\u003e\n\u003cp\u003eSo, we have another way to classify HTTP methods into two types. One set of methods, including GET, PUT and DELETE,  are \u003cem\u003esafe\u003c/em\u003e for make repeated calls without worrying about the impact. They may not all be read-only. But they do not cause side-effects if called multiple times. And the other category, consisting of POST which you have to be very careful with, and make only as many calls as you need. The methods in the first set are called \u003cstrong\u003eidempotent\u003c/strong\u003e methods. GET, PUT and DELETE are idempotent. POST is \u003cstrong\u003enon-idempotent\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e Here\u0026#39;s the Wikipedia definition of \u003cem\u003eidempotence\u003c/em\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIdempotence is the property of certain operations in mathematics and computer science, that can be applied multiple times without changing the result beyond the initial application.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe HTTP specification requires GET, PUT and DELETE methods to always be idempotent. If a client makes a request with one of these methods, they do not have to worry about making duplicate requests. But if they are making a POST request, they \u003cem\u003ecannot\u003c/em\u003e safely make duplicate requests without any side effects.\u003c/p\u003e\n\u003cp\u003eWhich is why resource creation should be a POST method. Because resource creation requests are not idempotent. Which is because multiple requests to create resources results in multiple resources. But updating a resource, like we saw, can be called multiple times safely. Which is why update requests ideally use the HTTP PUT method, which is supposed to be idempotent as per the specification.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eonly\u003c/em\u003e way you can safely use PUT for creating a new resource is in scenarios where the client specifies the new ID of the resource being created. In which case, the client sends the request for creating a resource to the actual instance resource URL that includes the ID. If you were to implement this, then resource creation request is idempotent. Think about it. If you repeat the request, since it has the ID in it, it doesn\u0026#39;t create a new resource. Perhaps, the resource with the ID is re-created or updated. This is the only scenario where you can use PUT for creating resources. But in most cases, when you have the server creating IDs and you issue a create resource request to the collection URI, you\u0026#39;d want to use POST.\u003c/p\u003e\n\u003cp\u003eLike I\u0026#39;ve mentioned before, these methods have standard meanings. The fact that this is a standard means that if you ignore it when implementing your APIs, you\u0026#39;ll confuse your clients or cause their code to function improperly. Also, a common thing that many APIs do is cache some of their GET responses. When a client makes a GET request, it also updates the cache, and another GET request to that same resource URI within a certain period of time will be served directly from the cache, thereby increasing performance. This works only because GET doesn\u0026#39;t change anything on the server, so it is \u003cem\u003ecacheable\u003c/em\u003e. You can definitely build an API that creates new resources when your clients call GET, but if you do that, you\u0026#39;ll not have many clients using your API for long! \u003c/p\u003e\n\u003cp\u003eOn the other hand, if you choose proper methods, your clients can build safeguards to make sure duplicate requests do not happen. Take the example of a browser refresh button. Every browser has a refresh or reload button that does a very simple function: resend the last HTTP request that was made by the browser. If the last request happens to be an idempotent request like a GET, the browser just goes ahead and resends the request when you hit refresh. But if it was a POST, like after you\u0026#39;ve submitted a form, if you hit refresh, the browser warns you with a message that says something like \u0026quot;You\u0026#39;ve already submitted this data before. Are you sure you wish to resubmit?\u0026quot;. This is simply the browser protecting you from making a duplicate non-idempotent request. So, it pays to generally use the right HTTP method for the right operation.\u003c/p\u003e\n\u003cp\u003eIn this tutorial, you learned about what idempotent and non-idempotent requests are. Make sure you keep these concepts in mind when you choose HTTP methods for your APIs.\u003c/p\u003e\n",
                    "id": "9vNg298whM",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "Idempotence In HTTP Methods",
            "unitSlNo": "1.6",
            "youtube": "rhTkRK53XdQ"
        },
        "Permalink": "Idempotence-In-HTTP-Methods",
        "createdAt": "2015-08-22T02:38:58.830Z",
        "objectId": "0Mg12zc777",
        "updatedAt": "2015-08-22T02:38:58.830Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll now create a Model class and configure it as an Entity using Annotations.",
            "nextLessonPermalinkName": "Saving-Objects-using-Hibernate-APIs",
            "permalinkName": "Writing-the-Model-Class-with-Annotations",
            "prevLessonPermalinkName": "Writing-a-Hibernate-Application",
            "title": "Writing the Model Class with Annotations",
            "unitSlNo": "1.4",
            "youtube": "3eXjpve0QaI"
        },
        "Permalink": "Writing-the-Model-Class-with-Annotations",
        "createdAt": "2015-08-22T02:38:58.719Z",
        "objectId": "0ebmGYie4o",
        "updatedAt": "2015-08-22T02:38:58.719Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll now add the Spring framework to our JDBC project. We'll add dependency injection to our Main and DAO class. We'll also learn how to configure DataSource as a Spring bean and supply connection parameters to it in the XML file.",
            "nextLessonPermalinkName": "Using-JdbcTemplate",
            "permalinkName": "Adding-Spring-and-DataSource-Configuration",
            "prevLessonPermalinkName": "Using-JDBC-without-Spring",
            "title": "Adding Spring and DataSource Configuration",
            "unitSlNo": "2.1",
            "youtube": "f-k823MZ02Q"
        },
        "Permalink": "Adding-Spring-and-DataSource-Configuration",
        "createdAt": "2015-08-22T02:38:58.570Z",
        "objectId": "18Q9hd0AaS",
        "updatedAt": "2015-08-22T02:38:58.570Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "In this tutorial, we implement a custom RowMapper class to map our domain objects. We then use this class to write fetch methods that return custom model objects.",
            "nextLessonPermalinkName": "Performing-Write-Operations-with-JdbcTemplate",
            "permalinkName": "Implementing-RowMapper",
            "prevLessonPermalinkName": "Returning-Other-Datatypes-from-JdbcTemplate",
            "title": "Implementing RowMapper",
            "unitSlNo": "2.4",
            "youtube": "i-_CUlER3z8"
        },
        "Permalink": "Implementing-RowMapper",
        "createdAt": "2015-08-22T02:38:58.642Z",
        "objectId": "1HrTsYUBmj",
        "updatedAt": "2015-08-22T02:38:58.642Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "In this tutorial, we'll add the Maven compiler plugin configuration to the pom.xml.",
            "nextLessonPermalinkName": "Using-the-Jetty-Plugin",
            "permalinkName": "Introduction-to-Plugins-with-the-Maven-Compiler-Plugin",
            "prevLessonPermalinkName": "A-Web-Application-Using-Maven",
            "title": "Introduction to Plugins with the Maven Compiler Plugin",
            "unitSlNo": "3.1",
            "youtube": "OQLBcd8QrWk"
        },
        "Permalink": "Introduction-to-Plugins-with-the-Maven-Compiler-Plugin",
        "createdAt": "2015-08-22T02:38:58.566Z",
        "objectId": "1IGqIMnSZR",
        "updatedAt": "2015-08-22T02:38:58.566Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this tutorial, we'll look at the schema generation options in Hibernate. We'll also learn some annotations to change the default name generated by Hibernate for entities.",
            "nextLessonPermalinkName": "More-Annotations",
            "permalinkName": "hbm2ddl-Configuration-and-Name-Annotations",
            "prevLessonPermalinkName": "Saving-Objects-using-Hibernate-APIs",
            "title": "hbm2ddl Configuration and Name Annotations",
            "unitSlNo": "2.1",
            "youtube": "iaSd_yK9xaw"
        },
        "Permalink": "hbm2ddl-Configuration-and-Name-Annotations",
        "createdAt": "2015-08-22T02:38:58.713Z",
        "objectId": "2nuvM2nhG3",
        "updatedAt": "2015-08-22T02:38:58.713Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Now, we'll implement another resource, the ProfileResource class.",
            "nextLessonPermalinkName": "Pagination-And-Filtering",
            "permalinkName": "Implementing-ProfileResource",
            "prevLessonPermalinkName": "Implementing-Update-And-Delete",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/16deac4112683089806da75eabc74ae6218b6882.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "WZmVnkeJDM",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Implementing ProfileResource",
            "unitSlNo": "2.12",
            "youtube": "Ik7jv3d-1qY"
        },
        "Permalink": "Implementing-ProfileResource",
        "createdAt": "2015-08-22T02:38:59.113Z",
        "objectId": "2pfFsL01Cp",
        "updatedAt": "2015-08-22T02:38:59.113Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "In this tutorial, we'll have our first look at pom.xml and we'll compile our project.",
            "nextLessonPermalinkName": "Understanding-Archetypes-and-pom.xml",
            "permalinkName": "Introduction-and-Setting-up-Part-2",
            "prevLessonPermalinkName": "Introduction-and-Setting-up-Part-1",
            "title": "Introduction and Setting up Part 2",
            "unitSlNo": "1.2",
            "youtube": "KlIM897RGwc"
        },
        "Permalink": "Introduction-and-Setting-up-Part-2",
        "createdAt": "2015-08-22T02:38:58.531Z",
        "objectId": "3PruwjBUtz",
        "updatedAt": "2015-08-22T02:38:58.531Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "This is a quick introduction to a web service testing tool called SoapUI. We use this tool to test our web service without having to use the Glassfish tester page. In this video, you'll learn how to install the SoapUI plugin in eclipse, create a new project and make a SOAP web service call from it.",
            "nextLessonPermalinkName": "Using-Web-Service-Explorer",
            "permalinkName": "Using-SoapUI",
            "prevLessonPermalinkName": "Handling-Faults",
            "title": "Using SoapUI",
            "unitSlNo": "3.1",
            "youtube": "CAHMJFerXps"
        },
        "Permalink": "Using-SoapUI",
        "createdAt": "2015-08-22T02:38:58.719Z",
        "objectId": "4MnH9DVof1",
        "updatedAt": "2015-08-22T02:38:58.719Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "Now that we have a basic Spring application, we'll implement the Logging aspect. We'll learn how to create a new Aspect using annotations and configure an advice to run before a getter method.",
            "nextLessonPermalinkName": "Pointcuts-and-Wildcard-Expressions",
            "permalinkName": "Writing-Our-First-Aspect-Part-2",
            "prevLessonPermalinkName": "Writing-Our-First-Aspect-Part-1",
            "title": "Writing Our First Aspect Part 2",
            "unitSlNo": "2.2",
            "youtube": "4-z-YsRfSF0"
        },
        "Permalink": "Writing-Our-First-Aspect-Part-2",
        "createdAt": "2015-08-22T02:38:58.702Z",
        "objectId": "4OUyLHKh6X",
        "updatedAt": "2015-08-22T02:38:58.702Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We returned an integer datatype result from our query in the previous tutorial. In this tutorial, we'll learn how to return other datatypes. We'll implement a method that returns a String query output.",
            "nextLessonPermalinkName": "Implementing-RowMapper",
            "permalinkName": "Returning-Other-Datatypes-from-JdbcTemplate",
            "prevLessonPermalinkName": "Using-JdbcTemplate",
            "title": "Returning Other Datatypes from JdbcTemplate",
            "unitSlNo": "2.3",
            "youtube": "QrU6UI_bSbU"
        },
        "Permalink": "Returning-Other-Datatypes-from-JdbcTemplate",
        "createdAt": "2015-08-22T02:38:58.591Z",
        "objectId": "5GOznLQT35",
        "updatedAt": "2015-08-22T02:38:58.591Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "We will now setup a new project in our development environment to start writing a REST API application.",
            "nextLessonPermalinkName": "Understanding-The-Application-Structure",
            "permalinkName": "Setting-Up",
            "prevLessonPermalinkName": "What-Is-JAXRS",
            "sections": [
                {
                    "content": "\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLatest Java EE version of Eclipse installed (Make sure you install the Java EE version, not the Java version)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"steps\"\u003eSteps\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eOpen Eclipse and Choose New \u0026gt; Project \u0026gt; Maven Project\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eChoose \u0026quot;Add Archetype\u0026quot; and enter the following details:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eArchetype Group ID\u003c/strong\u003e: \u003ccode\u003eorg.glassfish.jersey.archetypes\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eArchetype Artifact ID\u003c/strong\u003e: \u003ccode\u003ejersey-quickstart-webapp\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eArchetype Version\u003c/strong\u003e: \u003ccode\u003e2.16\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eChoose the newly entered archetype from the Archetype selection screen\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eEnter your project details - Group ID, Artifact ID and version.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSetup Tomcat in your Eclipse workspace\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRight click on the project and choose Run As \u0026gt; Run on server. \u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"maven\"\u003eMaven\u003c/h2\u003e\n\n\u003cp\u003eTake the \u003ca href=\"http://javabrains.koushik.org/courses/maven_intro\"\u003eIntroduction to Maven\u003c/a\u003e course here: http://javabrains.koushik.org/courses/maven_intro \u003c/p\u003e",
                    "id": "SBGvfsInKV",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "Setting Up",
            "unitSlNo": "2.2",
            "youtube": "skltzZH7i4w"
        },
        "Permalink": "Setting-Up",
        "createdAt": "2015-08-22T02:38:58.908Z",
        "objectId": "5V3rOswarq",
        "updatedAt": "2015-08-22T02:38:58.908Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this video, we'll learn how to use the wsimport utility to create stubs that can be used to make web service calls.",
            "nextLessonPermalinkName": "Writing-a-Web-service-Client---Calling-the-Service",
            "permalinkName": "Writing-a-Web-service-Client---Stub-generation",
            "prevLessonPermalinkName": "Web-Service-Jargon",
            "title": "Writing a Web service Client - Stub generation",
            "unitSlNo": "1.3",
            "youtube": "6hqDMS-oJ9k"
        },
        "Permalink": "Writing-a-Web-service-Client---Stub-generation",
        "createdAt": "2015-08-22T02:38:58.638Z",
        "objectId": "5V6L6TvcEB",
        "updatedAt": "2015-08-22T02:38:58.638Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Now it's time to understand what's going on in the WSDL. We'll simplify our web service code to just one method, generate the WSDL for it and  understand the different elements that are generated.",
            "nextLessonPermalinkName": "Customizing-the-WSDL",
            "permalinkName": "Understanding-the-WSDL",
            "prevLessonPermalinkName": "Service-First-and-Contract-First-Web-Services",
            "title": "Understanding the WSDL",
            "unitSlNo": "2.6",
            "youtube": "E76xW1JTVXY"
        },
        "Permalink": "Understanding-the-WSDL",
        "createdAt": "2015-08-22T02:38:58.666Z",
        "objectId": "5aGlnyMuq5",
        "updatedAt": "2015-08-22T02:38:58.666Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this video, we'll learn about the MVC architectural pattern. We'll learn what the Model, View and Controller roles are with a real world example.",
            "nextLessonPermalinkName": "Introduction-to-Struts-2",
            "permalinkName": "Introduction-To-MVC",
            "title": "Introduction To MVC",
            "unitSlNo": "1.1",
            "youtube": "f46WEeM8HTA"
        },
        "Permalink": "Introduction-To-MVC",
        "createdAt": "2015-08-22T02:38:58.819Z",
        "objectId": "5epGM8vhSs",
        "updatedAt": "2015-08-22T02:38:58.819Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll now implement some database write operations. We'll write a DAO method to update a value in the database, as well as use the execute() method to run a DDL SQL query.",
            "nextLessonPermalinkName": "Named-Parameter-JDBC-Template",
            "permalinkName": "Performing-Write-Operations-with-JdbcTemplate",
            "prevLessonPermalinkName": "Implementing-RowMapper",
            "title": "Performing Write Operations with JdbcTemplate",
            "unitSlNo": "2.5",
            "youtube": "BiSIAzSZHpY"
        },
        "Permalink": "Performing-Write-Operations-with-JdbcTemplate",
        "createdAt": "2015-08-22T02:38:58.590Z",
        "objectId": "5r9tVciH0N",
        "updatedAt": "2015-08-22T02:38:58.590Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Learn how to send status codes and location headers from REST APIs. We'll update the create API to send the 201 status code and the Location header.",
            "nextLessonPermalinkName": "Handling-Exceptions",
            "permalinkName": "Sending-Status-Codes-and-Location-Headers",
            "prevLessonPermalinkName": "Implementing-Subresources",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/4d90001ed0ac38e676685eec699f82263bea1b97.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "1unNb15q4B",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Sending Status Codes and Location Headers",
            "unitSlNo": "2.17",
            "youtube": "HEabElNrfbo"
        },
        "Permalink": "Sending-Status-Codes-and-Location-Headers",
        "createdAt": "2015-08-22T02:38:59.010Z",
        "objectId": "6Olq3wn18h",
        "updatedAt": "2015-08-22T02:38:59.010Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll use dependency injection to inject an object dependency to a Spring bean.",
            "nextLessonPermalinkName": "Inner-Beans,-Aliases-and-idref",
            "permalinkName": "Injecting-Objects",
            "prevLessonPermalinkName": "Using-Constructor-Injection",
            "title": "Injecting Objects",
            "unitSlNo": "1.7",
            "youtube": "g15RcFyEcrk"
        },
        "Permalink": "Injecting-Objects",
        "createdAt": "2015-08-22T02:38:58.605Z",
        "objectId": "6cbI2RAc4P",
        "updatedAt": "2015-08-22T02:38:58.605Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll now look at how data from the action class is made available to Struts 2 tags. We'll understand a few core concepts of the framework. This will also be our first look at the ValueStack object.",
            "nextLessonPermalinkName": "Accessing-Input-Parameters",
            "permalinkName": "The-ValueStack",
            "prevLessonPermalinkName": "A-Tag-And-A-Business-Service",
            "title": "The ValueStack",
            "unitSlNo": "3.3",
            "youtube": "EZpwBJ6EfDw"
        },
        "Permalink": "The-ValueStack",
        "createdAt": "2015-08-22T02:38:58.814Z",
        "objectId": "7NWnzQiK6L",
        "updatedAt": "2015-08-22T02:38:58.814Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "We'll now learn about join points, and how we can use arguments in the advice methods to get information about join points.",
            "nextLessonPermalinkName": "After-Advice-Types",
            "permalinkName": "JoinPoints-and-Advice-Arguments",
            "prevLessonPermalinkName": "A-Few-More-Pointcut-Expressions",
            "title": "JoinPoints and Advice Arguments",
            "unitSlNo": "2.5",
            "youtube": "nrAN0E_A7fc"
        },
        "Permalink": "JoinPoints-and-Advice-Arguments",
        "createdAt": "2015-08-22T02:38:58.696Z",
        "objectId": "7NZfntVAgZ",
        "updatedAt": "2015-08-22T02:38:58.696Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "This video provides a brief introduction to Aspect Oriented Programming concepts.",
            "nextLessonPermalinkName": "Setting-Up-AOP-Dependencies",
            "permalinkName": "Introduction-to-AOP",
            "title": "Introduction to AOP",
            "unitSlNo": "1.1",
            "youtube": "QdyLsX0nG30"
        },
        "Permalink": "Introduction-to-AOP",
        "createdAt": "2015-08-22T02:38:58.695Z",
        "objectId": "7se2DsHFpS",
        "updatedAt": "2015-08-22T02:38:58.695Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll look at one of the several ways we can fetch data from the database using Hibernate: the `session.get` method.",
            "nextLessonPermalinkName": "Primary-Keys",
            "permalinkName": "Retrieving-Objects-using-session.get",
            "prevLessonPermalinkName": "More-Annotations",
            "title": "Retrieving Objects using session.get",
            "unitSlNo": "2.3",
            "youtube": "3FV1yv7fvDQ"
        },
        "Permalink": "Retrieving-Objects-using-session.get",
        "createdAt": "2015-08-22T02:38:58.710Z",
        "objectId": "7vnp3bswqQ",
        "updatedAt": "2015-08-22T02:38:58.710Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "In this first part of the tutorial, we'll create a Spring project that forms the basis for our Aspect. This is a good refresher of some of the core Spring concepts, and it also give us an opportunity to introduce a service layer in our code that we'll build on in the subsequent tutorials.",
            "nextLessonPermalinkName": "Writing-Our-First-Aspect-Part-2",
            "permalinkName": "Writing-Our-First-Aspect-Part-1",
            "prevLessonPermalinkName": "Setting-Up-AOP-Dependencies",
            "title": "Writing Our First Aspect Part 1",
            "unitSlNo": "2.1",
            "youtube": "D0ekfQNGgpY"
        },
        "Permalink": "Writing-Our-First-Aspect-Part-1",
        "createdAt": "2015-08-22T02:38:58.691Z",
        "objectId": "8935ilOToG",
        "updatedAt": "2015-08-22T02:38:58.691Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "In this tutorial, we'll learn about Hibernate's cache support: both first level (Session) and second level cache.",
            "nextLessonPermalinkName": "Configuring-Second-Level-Cache",
            "permalinkName": "Cacheing-in-Hibernate",
            "prevLessonPermalinkName": "Projections-and-Query-By-Example",
            "title": "Cacheing in Hibernate",
            "unitSlNo": "3.1",
            "youtube": "ISi_OkmuQbs"
        },
        "Permalink": "Cacheing-in-Hibernate",
        "createdAt": "2015-08-22T02:38:58.730Z",
        "objectId": "8IGzJkkgMO",
        "updatedAt": "2015-08-22T02:38:58.730Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "We'll make a couple of changes to the sample web service we've been developing all along. First, we will see what happens when a custom Java data type needs to be exchanged as a part of a web service operation. Then, we'll create a web service endpoint interface that our class implements.",
            "nextLessonPermalinkName": "Using-JAXB-Annotations-Part-1",
            "permalinkName": "Service-Interface-and-Custom-Types",
            "prevLessonPermalinkName": "Schema-Types-and-Binding-Styles",
            "title": "Service Interface and Custom Types",
            "unitSlNo": "2.9",
            "youtube": "QFq4Ue_jExY"
        },
        "Permalink": "Service-Interface-and-Custom-Types",
        "createdAt": "2015-08-22T02:38:58.669Z",
        "objectId": "8IUTbr0a1F",
        "updatedAt": "2015-08-22T02:38:58.669Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll write code to implement the BeanFactory concept that we learnt in our previous tutorial. We'll write a Spring XML to configure a Spring bean. Then we'll use the BeanFactory to instantiate our bean in the Spring container.",
            "nextLessonPermalinkName": "ApplicationContext-and-Property-Initialization",
            "permalinkName": "Writing-Code-Using-the-Bean-Factory",
            "prevLessonPermalinkName": "Understanding-Spring-Bean-Factory",
            "title": "Writing Code Using the Bean Factory",
            "unitSlNo": "1.4",
            "youtube": "7c6ZTF6cF88"
        },
        "Permalink": "Writing-Code-Using-the-Bean-Factory",
        "createdAt": "2015-08-22T02:38:58.611Z",
        "objectId": "8dnONDSp3M",
        "updatedAt": "2015-08-22T02:38:58.611Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this first of a three part video on writing a simple Hibernate application from the scratch, we'll learn how to write the Hibernate configuration XML file, hibernate.cfg.xml.",
            "nextLessonPermalinkName": "Writing-the-Model-Class-with-Annotations",
            "permalinkName": "Writing-a-Hibernate-Application",
            "prevLessonPermalinkName": "Setting-Up-Hibernate",
            "title": "Writing a Hibernate Application",
            "unitSlNo": "1.3",
            "youtube": "N2F1zCAf_NU"
        },
        "Permalink": "Writing-a-Hibernate-Application",
        "createdAt": "2015-08-22T02:38:58.720Z",
        "objectId": "95JJGkLNZ3",
        "updatedAt": "2015-08-22T02:38:58.720Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll set up our development environment to use Struts 2. We'll download the Struts 2 distribution, configure a user library and create a blank web application.",
            "nextLessonPermalinkName": "Writing-a-Struts-2-Application-Part-1",
            "permalinkName": "Setting-Up",
            "prevLessonPermalinkName": "Introduction-to-Struts-2",
            "title": "Setting Up",
            "unitSlNo": "2.1",
            "youtube": "LhjEgxJ080g"
        },
        "Permalink": "Setting-Up",
        "createdAt": "2015-08-22T02:38:58.817Z",
        "objectId": "9BHj2SWNK3",
        "updatedAt": "2015-08-22T02:38:58.817Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll now look at a configuration feature provided by Spring to wire dependencies automatically: Bean Autowiring. We'll learn about different types of autowiring, and we'll write some code to implement bean autowiring by name.",
            "nextLessonPermalinkName": "Understanding-Bean-Scopes",
            "permalinkName": "Bean-Autowiring",
            "prevLessonPermalinkName": "Initializing-Collections",
            "title": "Bean Autowiring",
            "unitSlNo": "1.10",
            "youtube": "suiEGbKf21g"
        },
        "Permalink": "Bean-Autowiring",
        "createdAt": "2015-08-22T02:38:58.674Z",
        "objectId": "9Me0eexmVA",
        "updatedAt": "2015-08-22T02:38:58.674Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Let's now add some JAXB annotations to our Model class to customize the resulting XML.",
            "nextLessonPermalinkName": "Handling-Faults",
            "permalinkName": "Using-JAXB-Annotations-Part-2",
            "prevLessonPermalinkName": "Using-JAXB-Annotations-Part-1",
            "title": "Using JAXB Annotations Part 2",
            "unitSlNo": "2.11",
            "youtube": "k5GbEwDFIl8"
        },
        "Permalink": "Using-JAXB-Annotations-Part-2",
        "createdAt": "2015-08-22T02:38:58.707Z",
        "objectId": "9SWMwGufxh",
        "updatedAt": "2015-08-22T02:38:58.707Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, we'll setup the new Eclipse Kepler, configure Glassfish and start writing the web application with which we intend to create a web service.",
            "nextLessonPermalinkName": "Writing-a-Web-Service---Code-and-Deploy",
            "permalinkName": "Writing-a-Web-Service---Eclipse-setup",
            "prevLessonPermalinkName": "Setting-up-Java-EE-7-SDK",
            "title": "Writing a Web Service - Eclipse setup",
            "unitSlNo": "2.2",
            "youtube": "9kb0iLpqKY4"
        },
        "Permalink": "Writing-a-Web-Service---Eclipse-setup",
        "createdAt": "2015-08-22T02:38:58.663Z",
        "objectId": "ATgkwADiZt",
        "updatedAt": "2015-08-22T02:38:58.663Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "In this tutorial we'll learn Hibernate's support for pagination. We'll also learn how to write select queries to retrieve only certain columns.",
            "nextLessonPermalinkName": "Understanding-Parameter-Binding-and-SQL-Injection",
            "permalinkName": "Select-and-Pagination-in-HQL",
            "prevLessonPermalinkName": "Introducing-HQL-and-the-Query-Object",
            "title": "Select and Pagination in HQL",
            "unitSlNo": "2.2",
            "youtube": "WVHFpp8X5z0"
        },
        "Permalink": "Select-and-Pagination-in-HQL",
        "createdAt": "2015-08-22T02:38:58.701Z",
        "objectId": "BQcDYJY2k8",
        "updatedAt": "2015-08-22T02:38:58.701Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial we'll understand how an XML binding framework like JAXB works to help convert our object instances to XML.",
            "nextLessonPermalinkName": "Using-JAXB-Annotations-Part-2",
            "permalinkName": "Using-JAXB-Annotations-Part-1",
            "prevLessonPermalinkName": "Service-Interface-and-Custom-Types",
            "title": "Using JAXB Annotations Part 1",
            "unitSlNo": "2.10",
            "youtube": "wireYD00xkw"
        },
        "Permalink": "Using-JAXB-Annotations-Part-1",
        "createdAt": "2015-08-22T02:38:58.674Z",
        "objectId": "C15B4psHYk",
        "updatedAt": "2015-08-22T02:38:58.674Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Welcome to this tutorial course on SOAP web services in Java. We'll start with an introduction to web services. We'll understand what they are and how they are useful.",
            "nextLessonPermalinkName": "Web-Service-Jargon",
            "permalinkName": "Introduction-to-Web-Services",
            "title": "Introduction to Web Services",
            "unitSlNo": "1.1",
            "youtube": "mKjvKPlb1rA"
        },
        "Permalink": "Introduction-to-Web-Services",
        "createdAt": "2015-08-22T02:38:58.611Z",
        "objectId": "CiEKUNuZcZ",
        "updatedAt": "2015-08-22T02:38:58.611Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll learn a few techniques for using model objects in Struts 2 actions. We'll also learn about the ModelDriven interface.",
            "nextLessonPermalinkName": "Introducing-Interceptors",
            "permalinkName": "Using-Model-Objects",
            "prevLessonPermalinkName": "Configuring-methods-in-Action-mappings",
            "title": "Using Model Objects",
            "unitSlNo": "3.11",
            "youtube": "ATLP7ZimjVU"
        },
        "Permalink": "Using-Model-Objects",
        "createdAt": "2015-08-22T02:38:58.919Z",
        "objectId": "ColkxF5kCo",
        "updatedAt": "2015-08-22T02:38:58.919Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll initialize a member variable that's a collection and each of the elements are references to other beans.",
            "nextLessonPermalinkName": "Bean-Autowiring",
            "permalinkName": "Initializing-Collections",
            "prevLessonPermalinkName": "Inner-Beans,-Aliases-and-idref",
            "title": "Initializing Collections",
            "unitSlNo": "1.9",
            "youtube": "MgYURkcYeDQ"
        },
        "Permalink": "Initializing-Collections",
        "createdAt": "2015-08-22T02:38:58.599Z",
        "objectId": "D9xT8QrJQL",
        "updatedAt": "2015-08-22T02:38:58.599Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this video, we'll learn how to implement a very common use case: basic login functionality using Struts 2 framework. In the next tutorial, we'll enhance this code with some best practices.",
            "nextLessonPermalinkName": "Login-Action-and-Best-Practices-Part-2",
            "permalinkName": "Login-Action-and-Best-Practices",
            "prevLessonPermalinkName": "Post-requests-to-actions",
            "title": "Login Action and Best Practices",
            "unitSlNo": "3.6",
            "youtube": "Oo9lMGfis1c"
        },
        "Permalink": "Login-Action-and-Best-Practices",
        "createdAt": "2015-08-22T02:38:58.914Z",
        "objectId": "DFnnnnDZbQ",
        "updatedAt": "2015-08-22T02:38:58.914Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll learn about the Richardson Maturity Model, a way for REST APIs to be classified, and the \"RESTfulness\" of an API determined.",
            "nextLessonPermalinkName": "What-Is-JAXRS",
            "permalinkName": "The-Richardson-Maturity-Model",
            "prevLessonPermalinkName": "HATEOAS",
            "sections": [
                {
                    "content": "\u003cp\u003eThis is the final tutorial in section 1 API design. We've looked at different factors when building the RESTful API for the Messenger application. In this tutorial, we'll wrap up and take an overall look at how far we've come and what that means.\u003c/p\u003e\n\n\u003cp\u003eBelow is tthe API documentation summary of what we have so far. I hope the choices and the design approach for this API is clear to you now. If you are unsure of why any part of the API is a particular way, I encourage you to revisit the relevant tutorial. \u003c/p\u003e\n\n\u003ch2 id=\"messages\"\u003eMessages\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003ccolgroup\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:center;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003c/colgroup\u003e\n\n\u003cthead\u003e\n\u003ctr\u003e\n\t\u003cth style=\"text-align:left;\"\u003eOperation\u003c/th\u003e\n\t\u003cth style=\"text-align:center;\"\u003eURI\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eMethod\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eSuccess / Failure\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eStatus code\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGet message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGET\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDelete message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDELETE\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200 or 204\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eEdit message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePUT\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eCreate message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePOST\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e201\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"profiles\"\u003eProfiles\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003ccolgroup\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:center;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003c/colgroup\u003e\n\n\u003cthead\u003e\n\u003ctr\u003e\n\t\u003cth style=\"text-align:left;\"\u003eOperation\u003c/th\u003e\n\t\u003cth style=\"text-align:center;\"\u003eURI\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eMethod\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eSuccess / Failure\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eStatus code\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGet profile\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/profiles/{profileName}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGET\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDelete profile\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/profiles/{profileName}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDELETE\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200 or 204\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eEdit profile\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/profiles/{profileName}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePUT\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eCreate profile\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/profiles\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePOST\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e201\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"commentsandsimilarlylikesandshares\"\u003eComments (and similarly Likes and Shares)\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003ccolgroup\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:center;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003c/colgroup\u003e\n\n\u003cthead\u003e\n\u003ctr\u003e\n\t\u003cth style=\"text-align:left;\"\u003eOperation\u003c/th\u003e\n\t\u003cth style=\"text-align:center;\"\u003eURI\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eMethod\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eSuccess / Failure\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eStatus code\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGet comment\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}/comments/{commentId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGET\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDelete comment\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}/comments/{commentId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDELETE\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200 or 204\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eEdit comment\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}/comments/{commentId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePUT\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eCreate comment\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}/comments\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePOST\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e201\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eNow that we have designed the API this way, let's look at what this means. Are we in a position to say this API is \u0026quot;\u003cem\u003efully RESTful\u003c/em\u003e\u0026quot;? Remember, in the first tutorial, I mentioned that this isn't a yes or no question, and that there is a spectrum of anywhere from \u0026quot;\u003cem\u003enot fully RESTful\u003c/em\u003e\u0026quot; to \u0026quot;\u003cem\u003ealmost RESTful\u003c/em\u003e\u0026quot; to \u0026quot;\u003cem\u003enot RESTful at all\u003c/em\u003e\u0026quot;. These terms are hard to work with. How do you \u003cem\u003eknow\u003c/em\u003e how RESTful an API is? Well, there is one way to know, and that's using a model developed by Leonard Richardson. It's called the Richardson Maturity Model, and it breaks down all the concepts we've discussed into 3 levels. Every REST API belongs to one of these 3 levels. The model also defines a Level 0 which is \u003cem\u003enot a RESTful API\u003c/em\u003e. It is not necessary that every API score highly as per this model. But it helps to understand this model when designing any RESTful API so that you at least know where you stand. And try to make it better if possible.\u003c/p\u003e\n\n\u003cp\u003eLet's start with Level 0. I hope you are familiar with some of the basics of a SOAP web service. The way a SOAP web service generally works is that there is a URL called the endpoint where the service is exposed. One URL. That URL receives all requests from the client. If you were to write the Messenger API as a SOAP web service, you'd probably have one URI at \u003cservername\u003e/messenger. This URL receives \u003cem\u003eall\u003c/em\u003e requests. How does it know what to do? How does the client tell it to do different stuff, like look up messages or delete a comment? Well, that happens in the message that's sent to this common URL. The message contains both the operation that needs to be performed, and the data that's needed for that operation. For example, the XML below could create a new message:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;create-message\u0026gt;\n    \u0026lt;message-content\u0026gt;Hello World!\u0026lt;/message-content\u0026gt;\n    \u0026lt;message-author\u0026gt;koushik\u0026lt;/message-author\u0026gt;\n\u0026lt;/create-message\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd a delete comment request (sent to the same URL) could look like this. \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;delete-comment\u0026gt;\n    \u0026lt;message-id\u0026gt;30\u0026lt;/message-id\u0026gt;\n    \u0026lt;comment-id\u0026gt;2\u0026lt;/comment-id\u0026gt;\n\u0026lt;/delete-comment\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNotice that the operation that needs to be performed is a part of the request that's sent. This is how the same URL can be used for different operations. In fact, the same HTTP method can be used for each operation, because, all the details are in the request body. In fact, that's what SOAP does. The requests are always POST, with the POST body containing all the information.\u003c/p\u003e\n\n\u003cp\u003eThis is Level 0 in the Richardson Maturity Model. This is often called the \u003cstrong\u003eThe swamp of POX\u003c/strong\u003e. This refers to the common use of \u003cem\u003ePlain Old XML\u003c/em\u003e (or POX) to define everything that an operation needs. No HTTP concepts are leveraged for communicating information between the server and client.\u003c/p\u003e\n\n\u003cp\u003eThis design approach is obviously not something we want to do in this course. If you were to refine this model to introduce the concept of resource URIs, you will reach level 1 in the RMM. This is the starting level for RESTful APIs. The earlier level isn't even considered REST. We designed resource URIs for messages (\u003ccode\u003e/messages\u003c/code\u003e), profiles (\u003ccode\u003e/profiles\u003c/code\u003e) and so on. If you did just this, and nothing else, you stand at level 1. Now you have message requests going to one URI and all comments requests going to another URI. There would still be information about the operation in the requests, because the message URI needs to handle adding deleting or updating messages. \u003c/p\u003e\n\n\u003cp\u003eIf you take the next step and use different HTTP methods for these different operations, then you've reached Level 2 in RMM. An API on Level 2 uses standard HTTP methods like GET, POST, PUT and DELETE to do different operations, on the resource URI. The URI specifies what resource is operated upon, and the HTTP method specifies what the operation is. There also needs to be better use of HTTP status codes, and the right use of idempotent and non-idempotent methods for an API to be at Level 2. \u003c/p\u003e\n\n\u003cp\u003eFinally, Level 3 is when you implement HATEOAS. That is, the responses have links that control the application state for the client. The client doesn't need to be aware of the different API URIs. All the URIs that the client would need is a part of the response that the server sends. If an API implements this, it is said to be at Level 3 of RMM, and is considered fully RESTful.\u003c/p\u003e\n\n\u003cp\u003eAnd there you go. Now you can look at any REST API design and easily identify which level in RMM it belongs to. Again, this is not supposed to be a strict rule. I encourage you to use this model as a guideline when designing your REST APIs, as a tool for learning and understanding, rather than a scorecard to measure with. You may not choose to make every API achieve Level 3 of RMM, but it helps to understand what the theoretical \u003cem\u003eideal\u003c/em\u003e is.\u003c/p\u003e\n\n\u003cp\u003eOnce again, look at the API documentation for the Messenger application on the tutorial page. In the next section, we'll start looking at JAX-RS and start implementing this API. There's a lot to REST API design, and these tutorials have only scratched the surface. So, I do encourage you to explore more about REST APIs, and treat these tutorials as a starting point, rather than as complete learning.\u003c/p\u003e",
                    "id": "0XIzyMVKl3",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "The Richardson Maturity Model",
            "unitSlNo": "1.9",
            "youtube": "qHbTE3qvUsQ"
        },
        "Permalink": "The-Richardson-Maturity-Model",
        "createdAt": "2015-08-22T02:38:58.847Z",
        "objectId": "E3QA7YtHIY",
        "updatedAt": "2015-08-22T02:38:58.847Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "We'll now switch the response format of the APIs from XML to JSON.",
            "nextLessonPermalinkName": "Implementing-POST-Method",
            "permalinkName": "Returning-JSON-Response",
            "prevLessonPermalinkName": "Accessing-Path-Params",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/c9d73a2a063ecf5bf2d59008b99c723e1dcb09c9.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "lqaVo8zzgL",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Returning JSON Response",
            "unitSlNo": "2.9",
            "youtube": "5KLFUwcIKkw"
        },
        "Permalink": "Returning-JSON-Response",
        "createdAt": "2015-08-22T02:38:58.911Z",
        "objectId": "ECYZXSjoHI",
        "updatedAt": "2015-08-22T02:38:58.911Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll learn and implement three JSR-250 annotations that Spring supports:Resource, PostConstruct and PreDestroy.",
            "nextLessonPermalinkName": "Component-and-Stereotype-Annotations",
            "permalinkName": "Some-JSR-250-Annotations",
            "prevLessonPermalinkName": "The-Autowired-Annotation",
            "title": "Some JSR-250 Annotations",
            "unitSlNo": "3.3",
            "youtube": "apTEbKPW3ow"
        },
        "Permalink": "Some-JSR-250-Annotations",
        "createdAt": "2015-08-22T02:38:58.730Z",
        "objectId": "EQR0D46OaL",
        "updatedAt": "2015-08-22T02:38:58.730Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "More plugins! We'll use the Maven's Eclipse plugin to get our Maven project into the Eclipse IDE. We'll also download and install the m2eclipse plugin of Eclipse to bring Maven functionality into the Eclipse GUI.",
            "permalinkName": "Eclipse-Plugin-for-Maven-and-Maven-Plugin-for-Eclipse",
            "prevLessonPermalinkName": "Using-the-Jetty-Plugin",
            "title": "Eclipse Plugin for Maven and Maven Plugin for Eclipse",
            "unitSlNo": "3.3",
            "youtube": "xE2F4Z_wKCU"
        },
        "Permalink": "Eclipse-Plugin-for-Maven-and-Maven-Plugin-for-Eclipse",
        "createdAt": "2015-08-22T02:38:58.524Z",
        "objectId": "EmZuSsq25s",
        "updatedAt": "2015-08-22T02:38:58.524Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll use the JdbcTemplate class provided by Spring to implement a DAO method. We'll see how using the template class makes the DAO methods simple, and how it takes care of much of the boilerplate code we'd have to write otherwise.",
            "nextLessonPermalinkName": "Returning-Other-Datatypes-from-JdbcTemplate",
            "permalinkName": "Using-JdbcTemplate",
            "prevLessonPermalinkName": "Adding-Spring-and-DataSource-Configuration",
            "title": "Using JdbcTemplate",
            "unitSlNo": "2.2",
            "youtube": "0LYqy0wvS20"
        },
        "Permalink": "Using-JdbcTemplate",
        "createdAt": "2015-08-22T02:38:58.579Z",
        "objectId": "F1TdRUZp1b",
        "updatedAt": "2015-08-22T02:38:58.579Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Web services return 'Fault' messages to denote error scenarios. In this tutorial, we'll throw an exception, generate and examine a fault message.",
            "nextLessonPermalinkName": "Using-SoapUI",
            "permalinkName": "Handling-Faults",
            "prevLessonPermalinkName": "Using-JAXB-Annotations-Part-2",
            "title": "Handling Faults",
            "unitSlNo": "2.12",
            "youtube": "t9GzOCN2UBk"
        },
        "Permalink": "Handling-Faults",
        "createdAt": "2015-08-22T02:38:58.716Z",
        "objectId": "FSMt8pJeNj",
        "updatedAt": "2015-08-22T02:38:58.716Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We now set out to write our own MVC application from the scratch.",
            "nextLessonPermalinkName": "Writing-an-MVC-Application-Part-2",
            "permalinkName": "Writing-an-MVC-Application-Part-1",
            "prevLessonPermalinkName": "Understanding-the-MVC-Pattern",
            "title": "Writing an MVC Application Part 1",
            "unitSlNo": "2.5",
            "youtube": "QOUIVsBN82Q"
        },
        "Permalink": "Writing-an-MVC-Application-Part-1",
        "createdAt": "2015-08-22T02:38:59.148Z",
        "objectId": "GDJEjvDsK4",
        "updatedAt": "2015-08-22T02:38:59.148Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "In this three part tutorial, we understand how a servlet is initialized, the methods that get called and the objects used on initialization and execution.",
            "permalinkName": "Understanding-init,-service-and-ServletConfig",
            "prevLessonPermalinkName": "Request,-Session-and-Context",
            "title": "Understanding init, service and ServletConfig",
            "unitSlNo": "2.7",
            "youtube": ""
        },
        "Permalink": "Understanding-init,-service-and-ServletConfig",
        "createdAt": "2015-08-22T02:38:59.117Z",
        "objectId": "GJfisRrG9x",
        "updatedAt": "2015-08-22T02:38:59.117Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll learn what the Struts 2 interceptor class contains. We'll understand how the flow of control is achieved, and how the framework makes the flexible 'plug-anywhere' configuration of interceptors possible.",
            "permalinkName": "Anatomy-of-an-Interceptor",
            "prevLessonPermalinkName": "Configuring-Interceptors",
            "title": "Anatomy of an Interceptor",
            "unitSlNo": "4.3",
            "youtube": "qefvF2Y0A8Y"
        },
        "Permalink": "Anatomy-of-an-Interceptor",
        "createdAt": "2015-08-22T02:38:58.983Z",
        "objectId": "H0spE13HIU",
        "updatedAt": "2015-08-22T02:38:58.983Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll begin to write a simple Struts 2 project. We'll create the Struts XML and an action class, and also configure a mapping.",
            "nextLessonPermalinkName": "Writing-a-Struts-2-Application-Part-2",
            "permalinkName": "Writing-a-Struts-2-Application-Part-1",
            "prevLessonPermalinkName": "Setting-Up",
            "title": "Writing a Struts 2 Application Part 1",
            "unitSlNo": "2.2",
            "youtube": "u4Pn1rdv5Is"
        },
        "Permalink": "Writing-a-Struts-2-Application-Part-1",
        "createdAt": "2015-08-22T02:38:58.823Z",
        "objectId": "HnHVhJ04Zk",
        "updatedAt": "2015-08-22T02:38:58.823Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this video, we'll learn how to override configuration inside embedded objects, and we'll also explore object keys.",
            "nextLessonPermalinkName": "Saving-Collections",
            "permalinkName": "AttributeOverrides-and-Embedded-Object-Keys",
            "prevLessonPermalinkName": "Value-Types-and-Embedding-Objects",
            "title": "AttributeOverrides and Embedded Object Keys",
            "unitSlNo": "2.6",
            "youtube": "X8t6oYp0Uk8"
        },
        "Permalink": "AttributeOverrides-and-Embedded-Object-Keys",
        "createdAt": "2015-08-22T02:38:58.769Z",
        "objectId": "IGDkoONUo8",
        "updatedAt": "2015-08-22T02:38:58.769Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this tutorial, we'll understand the mismatch between object and relational models and what ORM is.",
            "nextLessonPermalinkName": "Setting-Up-Hibernate",
            "permalinkName": "Introduction-To-Hibernate",
            "title": "Introduction To Hibernate",
            "unitSlNo": "1.1",
            "youtube": "Yv2xctJxE-w"
        },
        "Permalink": "Introduction-To-Hibernate",
        "createdAt": "2015-08-22T02:38:58.718Z",
        "objectId": "IMjuyCntv9",
        "updatedAt": "2015-08-22T02:38:58.718Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "How does the default interceptor configuration work? What is the necessary configuration to setup an interceptor in Struts 2? We answer these questions in this tutorial.",
            "nextLessonPermalinkName": "Anatomy-of-an-Interceptor",
            "permalinkName": "Configuring-Interceptors",
            "prevLessonPermalinkName": "Introducing-Interceptors",
            "title": "Configuring Interceptors",
            "unitSlNo": "4.2",
            "youtube": "Kkn_8BcmopA"
        },
        "Permalink": "Configuring-Interceptors",
        "createdAt": "2015-08-22T02:38:58.919Z",
        "objectId": "IiqZm1l4PS",
        "updatedAt": "2015-08-22T02:38:58.919Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "There is an alternative way of publishing and running web services without having to use any app servers. In this tutorial, we'll use the Endpoint class to publish our web service.",
            "nextLessonPermalinkName": "wsimport-Revisited",
            "permalinkName": "Using-Endpoint",
            "prevLessonPermalinkName": "Using-Web-Service-Explorer",
            "title": "Using Endpoint",
            "unitSlNo": "3.3",
            "youtube": "ExGgevg3i94"
        },
        "Permalink": "Using-Endpoint",
        "createdAt": "2015-08-22T02:38:58.718Z",
        "objectId": "IqhhuNKapx",
        "updatedAt": "2015-08-22T02:38:58.718Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In the second part of this two part video, we'll continue with our Struts 2 application by adding result mapping to JSPs, Struts 2 filters| and complete the request response flow.",
            "nextLessonPermalinkName": "Understanding-Namespaces",
            "permalinkName": "Writing-a-Struts-2-Application-Part-2",
            "prevLessonPermalinkName": "Writing-a-Struts-2-Application-Part-1",
            "title": "Writing a Struts 2 Application Part 2",
            "unitSlNo": "2.3",
            "youtube": "1rDnWURZOWI"
        },
        "Permalink": "Writing-a-Struts-2-Application-Part-2",
        "createdAt": "2015-08-22T02:38:58.852Z",
        "objectId": "JJHWViWXN1",
        "updatedAt": "2015-08-22T02:38:58.852Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "The RequestDispatcher object helps us transfer the request from the controller to the view.",
            "nextLessonPermalinkName": "Introduction-to-JSTL-and-the-useBean-tag",
            "permalinkName": "Using-RequestDispatcher-in-the-MVC-Application",
            "prevLessonPermalinkName": "Using-Model-object-in-the-MVC-Application",
            "title": "Using RequestDispatcher in the MVC Application",
            "unitSlNo": "2.8",
            "youtube": "3ZTxMDDmBqg"
        },
        "Permalink": "Using-RequestDispatcher-in-the-MVC-Application",
        "createdAt": "2015-08-22T02:38:59.199Z",
        "objectId": "JZloUvCyl2",
        "updatedAt": "2015-08-22T02:38:59.199Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "In this video, we go where no Spring AOP tutorial has gone before! We'll understand how Spring AOP works and how it uses proxy classes to apply advice. And we'll do this by implementing our own simple factory service. The way Spring AOP works is much more complicated, but this simple implementation should give us a solid understanding of proxy objects and clarify the core concepts.",
            "permalinkName": "Understanding-AOP-Proxies",
            "prevLessonPermalinkName": "AOP-XML-configuration",
            "title": "Understanding AOP Proxies",
            "unitSlNo": "3.2",
            "youtube": "yiinKulgm4U"
        },
        "Permalink": "Understanding-AOP-Proxies",
        "createdAt": "2015-08-22T02:38:58.752Z",
        "objectId": "KCot1IsPkQ",
        "updatedAt": "2015-08-22T02:38:58.752Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Here we'll learn how to configure the primary key in our entity class using the `@Id` annotation.",
            "nextLessonPermalinkName": "Value-Types-and-Embedding-Objects",
            "permalinkName": "Primary-Keys",
            "prevLessonPermalinkName": "Retrieving-Objects-using-session.get",
            "title": "Primary Keys",
            "unitSlNo": "2.4",
            "youtube": "Xuofihmkl_k"
        },
        "Permalink": "Primary-Keys",
        "createdAt": "2015-08-22T02:38:58.710Z",
        "objectId": "KaeA7fTooA",
        "updatedAt": "2015-08-22T02:38:58.710Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "We'll look at the GET and POST methods in more detail, and we'll learn when to do what. We'll also have a sneak peek at Apache Tomcat's implementation of the `doGet` and `doPost` methods.",
            "nextLessonPermalinkName": "Request,-Session-and-Context",
            "permalinkName": "Understanding-GET-and-POST",
            "prevLessonPermalinkName": "Passing-More-Parameters",
            "title": "Understanding GET and POST",
            "unitSlNo": "2.5",
            "youtube": "yzC4oDXfkl0"
        },
        "Permalink": "Understanding-GET-and-POST",
        "createdAt": "2015-08-22T02:38:59.046Z",
        "objectId": "KddZjmceQx",
        "updatedAt": "2015-08-22T02:38:59.046Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "I'll now introduce you to an interesting concept called Content Negotiation, and how different content types can be handled in JAX-RS.",
            "permalinkName": "Content-Negotiation",
            "prevLessonPermalinkName": "HATEOAS-Part-2",
            "title": "Content Negotiation",
            "unitSlNo": "2.22",
            "youtube": "vP9HU1o3zsE"
        },
        "Permalink": "Content-Negotiation",
        "createdAt": "2015-08-22T02:38:59.103Z",
        "objectId": "L01BPpS8NI",
        "updatedAt": "2015-08-22T02:38:59.103Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll implement the POST method API to create new instances of Message resource.",
            "nextLessonPermalinkName": "Implementing-Update-And-Delete",
            "permalinkName": "Implementing-POST-Method",
            "prevLessonPermalinkName": "Returning-JSON-Response",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/d946c045190741c85ceaf3714e97d3ed84e1bb89.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "lMIrKkxMuZ",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Implementing POST Method",
            "unitSlNo": "2.10",
            "youtube": "6HWUrp6buqQ"
        },
        "Permalink": "Implementing-POST-Method",
        "createdAt": "2015-08-22T02:38:59.009Z",
        "objectId": "LnZEISJNav",
        "updatedAt": "2015-08-22T02:38:59.009Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "Using Eclipse wizards to create a Dynamic Web Project.",
            "nextLessonPermalinkName": "First-Servlet-Part-2",
            "permalinkName": "First-Servlet-Part-1",
            "prevLessonPermalinkName": "Setting-up",
            "title": "First Servlet Part 1",
            "unitSlNo": "1.2",
            "youtube": "oX2rw5pAdxw"
        },
        "Permalink": "First-Servlet-Part-1",
        "createdAt": "2015-08-22T02:38:59.047Z",
        "objectId": "LpeybN3GxQ",
        "updatedAt": "2015-08-22T02:38:59.047Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "We'll learn how to configure aspects, advice and pointcuts using the traditional XML way.",
            "nextLessonPermalinkName": "Understanding-AOP-Proxies",
            "permalinkName": "AOP-XML-configuration",
            "prevLessonPermalinkName": "Naming-Conventions-and-Custom-Advice-Annotations",
            "title": "AOP XML configuration",
            "unitSlNo": "3.1",
            "youtube": "ewWzxcNnI7k"
        },
        "Permalink": "AOP-XML-configuration",
        "createdAt": "2015-08-22T02:38:58.748Z",
        "objectId": "M3NdF7zt98",
        "updatedAt": "2015-08-22T02:38:58.748Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll try to understand what an MVC framework should typically do, and what components any such framework should have. We'll then have a high level look at some of the core Struts 2 modules.",
            "nextLessonPermalinkName": "Setting-Up",
            "permalinkName": "Introduction-to-Struts-2",
            "prevLessonPermalinkName": "Introduction-To-MVC",
            "title": "Introduction to Struts 2",
            "unitSlNo": "1.2",
            "youtube": "9BvQpf7JcOI"
        },
        "Permalink": "Introduction-to-Struts-2",
        "createdAt": "2015-08-22T02:38:58.829Z",
        "objectId": "MVyfuUpmT6",
        "updatedAt": "2015-08-22T02:38:58.829Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll quickly recap the concepts we've learnt so far by creating a new Struts 2 application. We'll then add an sample business service, and take our first look at Struts 2 tags, starting with s:property tag.",
            "nextLessonPermalinkName": "The-ValueStack",
            "permalinkName": "A-Tag-And-A-Business-Service",
            "prevLessonPermalinkName": "Understanding-Namespaces",
            "title": "A Tag And A Business Service",
            "unitSlNo": "3.2",
            "youtube": "nrYLnbGZ_4E"
        },
        "Permalink": "A-Tag-And-A-Business-Service",
        "createdAt": "2015-08-22T02:38:58.817Z",
        "objectId": "MnbEaGz9vW",
        "updatedAt": "2015-08-22T02:38:58.817Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this tutorial, we'll download Hibernate and set it up in our development environment by configuring it in Eclipse.",
            "nextLessonPermalinkName": "Writing-a-Hibernate-Application",
            "permalinkName": "Setting-Up-Hibernate",
            "prevLessonPermalinkName": "Introduction-To-Hibernate",
            "title": "Setting Up Hibernate",
            "unitSlNo": "1.2",
            "youtube": "bzPkebUXxn0"
        },
        "Permalink": "Setting-Up-Hibernate",
        "createdAt": "2015-08-22T02:38:58.709Z",
        "objectId": "N3Lb1VAS2B",
        "updatedAt": "2015-08-22T02:38:58.709Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "This tutorial serves as an introduction to Spring Data support. We'll also install a lightweight database Apache Derby that we'll use in subsequent tutorials. We'll learn how to start Derby in Network server mode, and how to connect and run SQL queries using the ij client tool.",
            "nextLessonPermalinkName": "Using-JDBC-without-Spring",
            "permalinkName": "Introduction-to-Spring-Data-and-Setting-Up",
            "title": "Introduction to Spring Data and Setting Up",
            "unitSlNo": "1.1",
            "youtube": "eR_JFtqyNL4"
        },
        "Permalink": "Introduction-to-Spring-Data-and-Setting-Up",
        "createdAt": "2015-08-22T02:38:58.574Z",
        "objectId": "NF0CcJUxce",
        "updatedAt": "2015-08-22T02:38:58.574Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll use the NamedParameterJdbcTemplate class to run queries with named placeholders.",
            "nextLessonPermalinkName": "DAO-Support-Classes",
            "permalinkName": "Named-Parameter-JDBC-Template",
            "prevLessonPermalinkName": "Performing-Write-Operations-with-JdbcTemplate",
            "title": "Named Parameter JDBC Template",
            "unitSlNo": "2.6",
            "youtube": "W_9DJYXuhwk"
        },
        "Permalink": "Named-Parameter-JDBC-Template",
        "createdAt": "2015-08-22T02:38:58.623Z",
        "objectId": "NmX2zTDHcz",
        "updatedAt": "2015-08-22T02:38:58.623Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "In this video, we'll learn how to integrate the Hibernate framework in our Spring application. We'll create a SessionFactory as a Spring singleton and use that in our DAO class to work with the database.",
            "permalinkName": "Using-Hibernate-with-Spring",
            "prevLessonPermalinkName": "DAO-Support-Classes",
            "title": "Using Hibernate with Spring",
            "unitSlNo": "2.8",
            "youtube": "0lqlg5tnDag"
        },
        "Permalink": "Using-Hibernate-with-Spring",
        "createdAt": "2015-08-22T02:38:58.593Z",
        "objectId": "O0QwXbYpFu",
        "updatedAt": "2015-08-22T02:38:58.593Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "We'll now implement update and delete APIs with the PUT and DELETE methods respectively.",
            "nextLessonPermalinkName": "Implementing-ProfileResource",
            "permalinkName": "Implementing-Update-And-Delete",
            "prevLessonPermalinkName": "Implementing-POST-Method",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/d9397f15b60d8dcf0b79635ff3a69b1dcb7a2a2f.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "voBUxKCcYc",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Implementing Update and Delete",
            "unitSlNo": "2.11",
            "youtube": "HePAArH5BrU"
        },
        "Permalink": "Implementing-Update-And-Delete",
        "createdAt": "2015-08-22T02:38:59.079Z",
        "objectId": "OFxj5OMeOC",
        "updatedAt": "2015-08-22T02:38:59.079Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we will learn some HTTP concepts that have influenced REST.",
            "nextLessonPermalinkName": "Designing-Resource-URIs",
            "permalinkName": "REST-and-HTTP",
            "prevLessonPermalinkName": "introduction",
            "sections": [
                {
                    "content": "\u003cp\u003eThe concepts of REST are very closely linked with HTTP. HTTP, as you probably know, is everywhere on the internet. Every time you load a web page, you make an HTTP request and you get HTML content in the response.\u003c/p\u003e\n\u003cp\u003eREST is inspired by a lot of the concepts of HTTP. Roy Fielding, the one who coined the term, is one of the principal authors of the HTTP specification. So, it’s no surprise that the ideas behind REST make good use of the ideas and concepts behind HTTP. So, to understand REST, you really need to have some basic understanding of HTTP itself. Notice that I said HTTP specification. Yes, specification means \u003cem\u003erules\u003c/em\u003e. What defines HTTP is clearly laid out in the specification, so unlike REST, there is no vagueness about it.\u003c/p\u003e\n\u003ch2 id=\"understanding-http\"\u003eUnderstanding HTTP\u003c/h2\u003e\n\u003cp\u003eHTTP stands for Hyper Text Transfer Protocol. Like we’ve already seen, you can think of a \u003cem\u003eprotocol\u003c/em\u003e as a language or mechanism for communication. So, HTTP is a way to exchange and communicate information online.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003estuff\u003c/em\u003e you exchange and transfer in HTTP is called \u003cstrong\u003ehypertext\u003c/strong\u003e. (Hence the name). Hypertext is a structured form of text that has one interesting property: it contains logical links to other text. These links are called \u003cstrong\u003ehyperlinks\u003c/strong\u003e. I’m sure you know what they are. A common and popular way to write hypertext is using a language called HyperText Markup Language, or HTML. Which is again something you already know.\u003c/p\u003e\n\u003cp\u003eI will not go into the details of HTTP itself, because that’s beyond the scope of this course. Let’s switch to REST. We’ll look at some of the HTTP concepts that have inspired REST, and how those concepts are applied to RESTful APIs and services.\u003c/p\u003e\n\u003ch2 id=\"resource-locations\"\u003eResource locations\u003c/h2\u003e\n\u003cp\u003eJust like web pages, REST APIs have URLs and addresses too. That way they are similar to web sites. One major difference is, since they are not meant to be read directly by humans, the response usually contains just the core data. For example, if you need to look up a weather for a place on a weather website, you’ll get a response with HTML showing the weather in a readable format. The HTML returned might also have other HTML elements, some CSS for styling, the site banner, some ads on the side and so on. This is because this response is meant to be read by a human. But a REST API response for a weather service probably has just the weather data in XML or JSON.\u003c/p\u003e\n\u003cp\u003eSince APIs have addresses, an API designer or web service developer needs to decide what the addresses should be. The practice in RESTful APIs is to have \u003cstrong\u003eresource based addresses\u003c/strong\u003e. In the case of a weather website, the URI to look up the weather at a zip code 12345 could be something like \u003ccode\u003e/weatherapp.com/weatherLookup.do?zipcode=12345\u003c/code\u003e. This is a perfectly valid URI, and it is common to see addresses like this too. But this address is not resource based. I would say this is more \u003cem\u003eaction based\u003c/em\u003e. This tells you that there is something called \u003ccode\u003eweatherLookup.do\u003c/code\u003e that takes the zip code as parameter. \u003c/p\u003e\n\u003cp\u003eResource based addresses, on the other hand, indicate just the resource and they are independent of the server side implementation. For instance, a RESTful API for weather could have the address \u003ccode\u003e/weatherapp/zipcode/12345\u003c/code\u003e. It’s almost as if you are not making the server \u003cem\u003edo\u003c/em\u003e any action, but rather just \u003cem\u003elook up and get\u003c/em\u003e something that already exists. So, weather for zip code 56789 is at \u003ccode\u003e/weatherapp/zipcode/56789\u003c/code\u003e. And weather forecast for a country could be designed to be at a location like \u003ccode\u003e/weatherapp/countries/countryname\u003c/code\u003e. In a later tutorial, we will discuss about how to go about designing these addresses when writing REST APIs. This is a very important part of being RESTful.\u003c/p\u003e\n\u003ch2 id=\"http-methods\"\u003eHTTP methods\u003c/h2\u003e\n\u003cp\u003eNow that you have decided what the address is, how do you interact with it? HTTP has what are called \u003cem\u003emethods\u003c/em\u003e or \u003cem\u003everbs\u003c/em\u003e that you can use to interact with URLs. You must be familiar with GET and POST methods. A GET method lets you get information from the server. And POST is used when you want to submit information to the server. They work well with resource based URIs that we just saw. So a GET request to URI \u003ccode\u003e/weatherapp/zip/12345\u003c/code\u003e will get you the weather at that location. There is another method called PUT that you wouldn’t normally use in HTML forms. PUT also lets you submit data to the server, but it is a bit different from POST, and we’ll learn about this later. There’s also a DELETE method that lets you specify that you want something removed.\u003c/p\u003e\n\u003cp\u003eA good RESTful web service API makes good use of these HTTP methods. Not all requests are done through POST like a SOAP web service would do. The method that a developer chooses for each API action depends on the action that is performed and the intended use. \u003c/p\u003e\n\u003ch2 id=\"metadata\"\u003eMetadata\u003c/h2\u003e\n\u003cp\u003eOk, so let’s say we tell the client what the address is and what HTTP method to use to call it. When they make the call, what is the response that we’ll send back? Well, obviously we need to send the response they want. A GET request for the weather URL would have the weather information in the response body. But HTTP also defines status codes and response headers which lets the server send back extra information or metadata that might be useful to the client. One useful piece of information that every response has is the status code. It’s a number that shows up in the very first line of the response. It indicates if the response was successful or if there was an error. If a HTTP response is successful, a \u003ccode\u003e200\u003c/code\u003e status code is returned. If there is an error on the server while processing the request, the server sends back status code \u003ccode\u003e500\u003c/code\u003e. If you are trying to access something that does not exist or the server is unable to find, the popular error code \u003ccode\u003e404\u003c/code\u003e is returned. \u003c/p\u003e\n\u003cp\u003eIf you are accessing a website, you’ll probably get some HTML that explains the problem. For example, for a \u003ccode\u003e404\u003c/code\u003e error, you get a page that shows the “page not found” message, probably along with links to the home page to help the user. But in the case of RESTful web services, you cannot send readable messages because the client is a piece of code! This is why sending the right status code is very important. \u003c/p\u003e\n\u003ch2 id=\"content-types\"\u003eContent types\u003c/h2\u003e\n\u003cp\u003eFinally, let’s look at the format of the messages. Let’s say you submit some data to the server as a POST request. There is no specification that strictly enforces what the format of the data should be. It could be XML, JSON or some other format. How can the server even identify what kind of data is sent? Similarly, how does the client know what data format is returned by the server? The answer is again a header value called \u003ccode\u003eContent-Type\u003c/code\u003e. Like I mentioned, the headers contain a lot of metadata, and one of the metadata values it can contain is the format of the message. There are standard predefined content type values, like \u003ccode\u003etext/xml\u003c/code\u003e for XML content or \u003ccode\u003eapplication/json\u003c/code\u003e for JSON content. A message that’s send with the right content type is easily readable by the server and the client. What’s really interesting is that the same API can send back data in multiple different formats, and the actual format it chooses depends on what the client wants. This happens by a process called content negotiation, which is another powerful feature that you can use when developing RESTful web services.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThis was a broad overview of some of the important points about RESTful web services and how they’ve been influenced by HTTP. When you design a RESTful API:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eYou need to have resource-based URIs. Every resource or entity should be identifiable by a single URI.\u003c/li\u003e\n\u003cli\u003eYou need to choose the right HTTP methods for different actions and operations for the API.\u003c/li\u003e\n\u003cli\u003eThe response needs to return the right HTTP status codes\u003c/li\u003e\n\u003cli\u003eAll requests and responses need to have the right \u003ccode\u003eContent-Type\u003c/code\u003e header set so that the format of the messages are well understood by everyone.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the next tutorial, we’ll put these concepts into practice by implementing a RESTful API of our own. These are going to be tutorials on API design. We\u0026#39;ll understand the principles behind good RESTful API design and start designing a RESTful API for the Messenger application\u003c/p\u003e\n",
                    "id": "YUE4WfegxH",
                    "name": "Text",
                    "permalinkName": "text"
                },
                {
                    "content": [
                        {
                            "answers": [
                                {
                                    "content": "Representational State Transfer"
                                },
                                {
                                    "content": "Real-time Embedded Systems Testbed"
                                },
                                {
                                    "content": "ReStructuredText"
                                },
                                {
                                    "content": "None of the above"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "REST is short for REpresentational State Transfer",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "What does REST stand for?",
                            "id": "REST-And-HTTP-1",
                            "incorrectAnswerDescription": "Rewatch the video if you are not sure!",
                            "incorrectAnswerMainTitle": "Not quite."
                        },
                        {
                            "answers": [
                                {
                                    "content": "GET"
                                },
                                {
                                    "content": "PUT"
                                },
                                {
                                    "content": "POST"
                                },
                                {
                                    "content": "DELETE"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "GET is the method used to request data from the server",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Which one of these HTTP methods would you use to make the client request data from the server?",
                            "id": "REST-And-HTTP-2",
                            "incorrectAnswerDescription": "The key is in the method name!",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "GET"
                                },
                                {
                                    "content": "HEAD"
                                },
                                {
                                    "content": "POST"
                                },
                                {
                                    "content": "OPTIONS"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "POST is the only option among the above choices that you can use to submit data.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Which one of these HTTP methods would you use to make the client submit data to the server?",
                            "id": "REST-And-HTTP-3",
                            "incorrectAnswerDescription": "The key is in the method name!",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "200"
                                },
                                {
                                    "content": "300"
                                },
                                {
                                    "content": "400"
                                },
                                {
                                    "content": "500"
                                }
                            ],
                            "correctAnswer": 3,
                            "correctAnswerDescription": "Server errors usually return status 500.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Let's say you handle a request in your web service and there is an error while you process it on the server. Which status code would you return?",
                            "id": "REST-And-HTTP-4",
                            "incorrectAnswerDescription": "What is the common error code for an internal server error. ",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "202"
                                },
                                {
                                    "content": "303"
                                },
                                {
                                    "content": "404"
                                },
                                {
                                    "content": "500"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "When something requested to the API isn't available, APIs usually return status 404.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Let's say you get a request for an item that's not available in the database. Which status code would you return?",
                            "id": "REST-And-HTTP-5",
                            "incorrectAnswerDescription": "What's the status code for 'Not found'?",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "text/xml"
                                },
                                {
                                    "content": "xml/html"
                                },
                                {
                                    "content": "xml/xhtml"
                                },
                                {
                                    "content": "None of the above"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "The content type header for XML content is usually text/xml.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "When returning response in XML format, what would be the content type header value you'd need to set in the response?",
                            "id": "REST-And-HTTP-6",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Try again."
                        },
                        {
                            "answers": [
                                {
                                    "content": "text/json"
                                },
                                {
                                    "content": "xml/json"
                                },
                                {
                                    "content": "application/json"
                                },
                                {
                                    "content": "None of the above"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "The content type header for JSON content is usually application/json.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "When returning response in JSON format, what would be the content type header value you'd need to set in the response?",
                            "id": "REST-And-HTTP-7",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Try again."
                        }
                    ],
                    "id": "I82Dyehlo3",
                    "name": "Exercise",
                    "permalinkName": "exercise"
                }
            ],
            "title": "REST and HTTP",
            "unitSlNo": "1.2",
            "youtube": "RuICubxGvj4"
        },
        "Permalink": "REST-and-HTTP",
        "createdAt": "2015-08-22T02:38:58.824Z",
        "objectId": "OHNJOjMBVM",
        "updatedAt": "2015-08-22T02:38:58.824Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll learn how to instantiate Entity objects and save them to the database using Hibernate APIs.",
            "nextLessonPermalinkName": "hbm2ddl-Configuration-and-Name-Annotations",
            "permalinkName": "Saving-Objects-using-Hibernate-APIs",
            "prevLessonPermalinkName": "Writing-the-Model-Class-with-Annotations",
            "title": "Saving Objects using Hibernate APIs",
            "unitSlNo": "1.5",
            "youtube": "FFMOZY4z6bE"
        },
        "Permalink": "Saving-Objects-using-Hibernate-APIs",
        "createdAt": "2015-08-22T02:38:58.720Z",
        "objectId": "OOlHyqikv9",
        "updatedAt": "2015-08-22T02:38:58.720Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll use two different ways to run methods on initialization and destruction of beans.",
            "nextLessonPermalinkName": "Writing-a-BeanPostProcessor",
            "permalinkName": "Lifecycle-Callbacks",
            "prevLessonPermalinkName": "Bean-Definition-Inheritance",
            "title": "Lifecycle Callbacks",
            "unitSlNo": "2.4",
            "youtube": "8LCpo4sfdQU"
        },
        "Permalink": "Lifecycle-Callbacks",
        "createdAt": "2015-08-22T02:38:58.672Z",
        "objectId": "PHgsS0bZfg",
        "updatedAt": "2015-08-22T02:38:58.672Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.",
            "nextLessonPermalinkName": "Writing-Code-Using-the-Bean-Factory",
            "permalinkName": "Understanding-Spring-Bean-Factory",
            "prevLessonPermalinkName": "Setting-Up",
            "sections": [
                {
                    "content": "\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\u003cp\u003eThe concept of dependency injection that Spring is so popular for is possible because Spring behaves as a container of beans.\u003c/p\u003e\n\u003cp\u003eYou can have instances of your objects in the Spring container, which means that Spring handles the instantiation and the life cycle of the beans.\u003c/p\u003e\n\u003cp\u003eSpring creates all instances of the objects you need. It also has references to all the objects. This is different from creating an instance yourself by using \u003ccode\u003enew()\u003c/code\u003e. This is what\u0026#39;s called a \u003cem\u003eFactory pattern\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIn the factory pattern, there exists an object that behaves as the \u003cem\u003eobject factory\u003c/em\u003e. Basically, whenever you need an instance of any object, you don\u0026#39;t create the instance yourself. Instead, you call a method of this \u003cem\u003efactory\u003c/em\u003e instance, and that method returns the instance you need. This \u003cem\u003efactory\u003c/em\u003e might read from a configuration file, which acts as a blueprint, containing guidelines on how to create the object.\u003c/p\u003e\n\u003cp\u003eSpring has objects of type \u003ccode\u003eBeanFactory\u003c/code\u003e which behave like an object factory. You specify object blueprints in a configuration file, an XML file, and supply it to the \u003ccode\u003eBeanFactory\u003c/code\u003e. Then when you need an instance of any object, you ask the \u003ccode\u003eBeanFactory\u003c/code\u003e for it. It then refers the XML file and constructs the bean as specified. This bean, which is now a \u003cem\u003eSpring bean\u003c/em\u003e since it has been created by the Spring container, is then returned to whoever asked for it.\u003c/p\u003e\n\u003cp\u003eIn the next tutorial, we\u0026#39;ll write code that implements this flow.\u003c/p\u003e\n",
                    "id": "XvMvO8p0ve",
                    "name": "Summary",
                    "permalinkName": "summary"
                }
            ],
            "title": "Understanding Spring Bean Factory",
            "unitSlNo": "1.3",
            "youtube": "xlWwMSu5I70"
        },
        "Permalink": "Understanding-Spring-Bean-Factory",
        "createdAt": "2015-08-22T02:38:58.591Z",
        "objectId": "Pq4m3GfNVP",
        "updatedAt": "2015-08-22T02:38:58.591Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "This tutorial covers the Around advice type. We'll learn how to use it, and we'll also look at some of the unique and powerful features that are specific to this advice type.",
            "nextLessonPermalinkName": "Naming-Conventions-and-Custom-Advice-Annotations",
            "permalinkName": "Around-Advice-Type",
            "prevLessonPermalinkName": "After-Advice-Types",
            "title": "Around Advice Type",
            "unitSlNo": "2.7",
            "youtube": "jwRwHOIwwdQ"
        },
        "Permalink": "Around-Advice-Type",
        "createdAt": "2015-08-22T02:38:58.698Z",
        "objectId": "Pu4eTNgIIx",
        "updatedAt": "2015-08-22T02:38:58.698Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "In this tutorial we'll learn about dependencies by adding one. We'll write code to use the slf4j logging framework, and we'll modify our pom.xml to specify the dependency to Maven.",
            "nextLessonPermalinkName": "A-Web-Application-Using-Maven",
            "permalinkName": "Adding-a-Dependency",
            "prevLessonPermalinkName": "Maven-Build-Phases",
            "title": "Adding a Dependency",
            "unitSlNo": "2.3",
            "youtube": "IRKu8_l5YiQ"
        },
        "Permalink": "Adding-a-Dependency",
        "createdAt": "2015-08-22T02:38:58.530Z",
        "objectId": "Q0nICQV5Tx",
        "updatedAt": "2015-08-22T02:38:58.530Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Single table inheritance strategy.",
            "nextLessonPermalinkName": "Implementing-Inheritance-With-Table-Per-Class-Strategy",
            "permalinkName": "Single-Table-Strategy",
            "prevLessonPermalinkName": "Implementing-Inheritance",
            "title": "Single Table Strategy",
            "unitSlNo": "3.9",
            "youtube": "M5YrLtAHtOo"
        },
        "Permalink": "Single-Table-Strategy",
        "createdAt": "2015-08-22T02:38:58.837Z",
        "objectId": "Qf5bxFnsJv",
        "updatedAt": "2015-08-22T02:38:58.837Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll understand what a BeanPostProcessor is. We'll also write a BeanPostProcessor that prints a message upon initializing each and every bean in the Spring XML.",
            "nextLessonPermalinkName": "Writing-a-BeanFactoryPostProcessor",
            "permalinkName": "Writing-a-BeanPostProcessor",
            "prevLessonPermalinkName": "Lifecycle-Callbacks",
            "title": "Writing a BeanPostProcessor",
            "unitSlNo": "2.5",
            "youtube": "ycOZTpMkow"
        },
        "Permalink": "Writing-a-BeanPostProcessor",
        "createdAt": "2015-08-22T02:38:58.678Z",
        "objectId": "R2Fc27PyX0",
        "updatedAt": "2015-08-22T02:38:58.678Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "In this video, I share some thoughts on naming conventions, and how it helps in the case of writing aspects in Spring. We will also understand how to write our own custom annotations to apply advice to methods.",
            "nextLessonPermalinkName": "AOP-XML-configuration",
            "permalinkName": "Naming-Conventions-and-Custom-Advice-Annotations",
            "prevLessonPermalinkName": "Around-Advice-Type",
            "title": "Naming Conventions and Custom Advice Annotations",
            "unitSlNo": "2.8",
            "youtube": "Clz78J7SBKQ"
        },
        "Permalink": "Naming-Conventions-and-Custom-Advice-Annotations",
        "createdAt": "2015-08-22T02:38:58.746Z",
        "objectId": "R5pzOjaiSX",
        "updatedAt": "2015-08-22T02:38:58.746Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll use the MessageSource interface to retrieve messages out of property files.",
            "nextLessonPermalinkName": "Event-Handling-in-Spring",
            "permalinkName": "Using-MessageSource-To-Get-Text-From-Property-Files",
            "prevLessonPermalinkName": "Component-and-Stereotype-Annotations",
            "title": "Using MessageSource To Get Text From Property Files",
            "unitSlNo": "3.5",
            "youtube": "cUqquQDZR-c"
        },
        "Permalink": "Using-MessageSource-To-Get-Text-From-Property-Files",
        "createdAt": "2015-08-22T02:38:58.733Z",
        "objectId": "R5rZj4UBVz",
        "updatedAt": "2015-08-22T02:38:58.733Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "We'll understand some of the different ways in which entity objects change from one state to another.",
            "nextLessonPermalinkName": "Persisting-Detached-Objects",
            "permalinkName": "Understanding-State-Changes",
            "prevLessonPermalinkName": "Transient,-Persistent-and-Detached-Objects",
            "title": "Understanding State Changes",
            "unitSlNo": "1.3",
            "youtube": "sjZGFHEdD4M"
        },
        "Permalink": "Understanding-State-Changes",
        "createdAt": "2015-08-22T02:38:58.714Z",
        "objectId": "RL9UVFBcmS",
        "updatedAt": "2015-08-22T02:38:58.714Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll learn how to use some page directives and how they affect our JSP.",
            "nextLessonPermalinkName": "Scopes-in-JSP-and-the-PageContext-object",
            "permalinkName": "JSP-Page-Directives",
            "prevLessonPermalinkName": "Understanding-the-JSP",
            "title": "JSP Page Directives",
            "unitSlNo": "2.1",
            "youtube": "qLpm1Zxytsg"
        },
        "Permalink": "JSP-Page-Directives",
        "createdAt": "2015-08-22T02:38:59.148Z",
        "objectId": "RhrD7GuJP4",
        "updatedAt": "2015-08-22T02:38:59.148Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll look at the implicit objects in JSP that provide scoped objects. We'll also look at the PageContext object and how to use it.",
            "nextLessonPermalinkName": "Using-jspInit-and-InitParams",
            "permalinkName": "Scopes-in-JSP-and-the-PageContext-object",
            "prevLessonPermalinkName": "JSP-Page-Directives",
            "title": "Scopes in JSP and the PageContext object",
            "unitSlNo": "2.2",
            "youtube": "W0JQ0TaeXAY"
        },
        "Permalink": "Scopes-in-JSP-and-the-PageContext-object",
        "createdAt": "2015-08-22T02:38:59.141Z",
        "objectId": "S03Nr2f3dJ",
        "updatedAt": "2015-08-22T02:38:59.141Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Many to Many mapping of entities.",
            "nextLessonPermalinkName": "CascadeTypes-and-Other-Things",
            "permalinkName": "mappedBy-and-Many-To-Many-Mapping",
            "prevLessonPermalinkName": "One-To-Many-Mapping",
            "title": "mappedBy and Many To Many Mapping",
            "unitSlNo": "3.6",
            "youtube": "jAi8bY-H_ek"
        },
        "Permalink": "mappedBy-and-Many-To-Many-Mapping",
        "createdAt": "2015-08-22T02:38:58.767Z",
        "objectId": "TDdf4xRdne",
        "updatedAt": "2015-08-22T02:38:58.767Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll now learn how to use wildcards when mapping Struts 2 Actions. Wildcards let us map multiple Action names with a single Action mapping. This simplifies the XML mapping configuration, especially if your application uses some sort of standard naming conventions for the Action and JSP names.",
            "nextLessonPermalinkName": "The-ActionSupport-Class",
            "permalinkName": "Action-Wildcards",
            "prevLessonPermalinkName": "Login-Action-and-Best-Practices-Part-2",
            "title": "Action Wildcards",
            "unitSlNo": "3.8",
            "youtube": "gBhGREQyeFk"
        },
        "Permalink": "Action-Wildcards",
        "createdAt": "2015-08-22T02:38:58.916Z",
        "objectId": "TapcgtM7fi",
        "updatedAt": "2015-08-22T02:38:58.916Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "In this tutorial, we'll learn about a few other Pointcut expressions that can be used to advice different methods.",
            "nextLessonPermalinkName": "JoinPoints-and-Advice-Arguments",
            "permalinkName": "A-Few-More-Pointcut-Expressions",
            "prevLessonPermalinkName": "Pointcuts-and-Wildcard-Expressions",
            "title": "A Few More Pointcut Expressions",
            "unitSlNo": "2.4",
            "youtube": "UxzTk57CJD8"
        },
        "Permalink": "A-Few-More-Pointcut-Expressions",
        "createdAt": "2015-08-22T02:38:58.693Z",
        "objectId": "TgciZNCwBv",
        "updatedAt": "2015-08-22T02:38:58.693Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll learn the difference between Entity type objects and Value type objects. We'll use the `@Embeddable` annotation to embed a value type object into our Entity class.",
            "nextLessonPermalinkName": "AttributeOverrides-and-Embedded-Object-Keys",
            "permalinkName": "Value-Types-and-Embedding-Objects",
            "prevLessonPermalinkName": "Primary-Keys",
            "title": "Value Types and Embedding Objects",
            "unitSlNo": "2.5",
            "youtube": "c2abcy0Q1a0"
        },
        "Permalink": "Value-Types-and-Embedding-Objects",
        "createdAt": "2015-08-22T02:38:58.769Z",
        "objectId": "Ttuhnb7kzu",
        "updatedAt": "2015-08-22T02:38:58.769Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, we'll understand the two common methodologies for designing and writing web services - the service first (or code first) and the contract first (or WSDL first) approaches.",
            "nextLessonPermalinkName": "Understanding-the-WSDL",
            "permalinkName": "Service-First-and-Contract-First-Web-Services",
            "prevLessonPermalinkName": "Adding-Input-Arguments",
            "title": "Service First and Contract First Web Services",
            "unitSlNo": "2.5",
            "youtube": "S0zdMGNrxr0"
        },
        "Permalink": "Service-First-and-Contract-First-Web-Services",
        "createdAt": "2015-08-22T02:38:58.655Z",
        "objectId": "U0fTuiIBBC",
        "updatedAt": "2015-08-22T02:38:58.655Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "In this tutorial, we'll discuss one of the most important concepts in Struts 2: Interceptors. We will understand what interceptors are and how they've been working all along in our Struts 2 application.",
            "nextLessonPermalinkName": "Configuring-Interceptors",
            "permalinkName": "Introducing-Interceptors",
            "prevLessonPermalinkName": "Using-Model-Objects",
            "title": "Introducing Interceptors",
            "unitSlNo": "4.1",
            "youtube": "DjeAqwW_J2U"
        },
        "Permalink": "Introducing-Interceptors",
        "createdAt": "2015-08-22T02:38:58.916Z",
        "objectId": "U2qSFMOj4l",
        "updatedAt": "2015-08-22T02:38:58.916Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "In this tutorial, we'll understand how our servlet intercepts HTTP requests, and the methods it runs.",
            "nextLessonPermalinkName": "Servlet-XML-Configuration",
            "permalinkName": "Understanding-the-Servlet",
            "prevLessonPermalinkName": "First-Servlet-Part-2",
            "title": "Understanding the Servlet",
            "unitSlNo": "2.1",
            "youtube": "YxuCG0f14hM"
        },
        "Permalink": "Understanding-the-Servlet",
        "createdAt": "2015-08-22T02:38:59.046Z",
        "objectId": "UJIKERFa60",
        "updatedAt": "2015-08-22T02:38:59.046Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll learn how to set up our Eclipse development environment to write Spring code.",
            "nextLessonPermalinkName": "Understanding-Spring-Bean-Factory",
            "permalinkName": "Setting-Up",
            "prevLessonPermalinkName": "Understanding-Dependency-Injection",
            "sections": [
                {
                    "content": "\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\u003cp\u003eIn this tutorial, you will download the required software and binaries to set up your development environment.\u003c/p\u003e\n\u003ch4 id=\"step-1-downloading-the-software\"\u003eStep 1: Downloading the software\u003c/h4\u003e\n\u003cp\u003eHere are the links to download the required software and binaries.  \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEclipse\u003c/strong\u003e: \u003ca href=\"http://www.eclipse.org/downloads\"\u003ehttp://www.eclipse.org/downloads\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSpring Binaries\u003c/strong\u003e: \u003ca href=\"http://repo.springsource.org/release/org/springframework/spring/\"\u003ehttp://repo.springsource.org/release/org/springframework/spring/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApache Commons Logging\u003c/strong\u003e: \u003ca href=\"http://commons.apache.org/logging\"\u003ehttp://commons.apache.org/logging\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"step-2-installing-eclipse\"\u003eStep 2: Installing Eclipse\u003c/h4\u003e\n\u003cp\u003eGo through the standard installation procedure for the Eclipse download based on your operating system.\u003c/p\u003e\n\u003ch4 id=\"step-3-configuring-spring-libraries\"\u003eStep 3: Configuring Spring libraries\u003c/h4\u003e\n\u003cp\u003eCreate a User library in Eclipse that contains all the required Spring jars. This library will come in  handy when you need to start a Spring project. Just add this library to every project that you need to use Spring.\u003c/p\u003e\n",
                    "id": "xEu8C5XMhZ",
                    "name": "Text",
                    "permalinkName": "summary"
                }
            ],
            "title": "Setting Up",
            "unitSlNo": "1.2",
            "youtube": "Z5gubdHLJIc"
        },
        "Permalink": "Setting-Up",
        "createdAt": "2015-08-22T02:38:58.595Z",
        "objectId": "UJjgoxt805",
        "updatedAt": "2015-08-22T02:38:58.595Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In Part 2 of this 2-part tutorial, we'll implement HATEOAS links in the Message response for the \"profile\" and \"comment\" rel attributes.",
            "nextLessonPermalinkName": "Content-Negotiation",
            "permalinkName": "HATEOAS-Part-2",
            "prevLessonPermalinkName": "HATEOAS-Part-1",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/a016c1af1b9a195c6518c5fce60282be215efc73.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "yKV1fhCoLW",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "HATEOAS (Part 2)",
            "unitSlNo": "2.21",
            "youtube": "dtO5NQ8K5Wo"
        },
        "Permalink": "HATEOAS-Part-2",
        "createdAt": "2015-08-22T02:38:59.087Z",
        "objectId": "UUjKuYSuMI",
        "updatedAt": "2015-08-22T02:38:59.087Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll now use constructors to set the member variable values for our Spring beans. We'll also look at some techniques to resolve conflicts in the case of overloaded constructors.",
            "nextLessonPermalinkName": "Injecting-Objects",
            "permalinkName": "Using-Constructor-Injection",
            "prevLessonPermalinkName": "ApplicationContext-and-Property-Initialization",
            "title": "Using Constructor Injection",
            "unitSlNo": "1.6",
            "youtube": "IOZzxmJVus0"
        },
        "Permalink": "Using-Constructor-Injection",
        "createdAt": "2015-08-22T02:38:58.604Z",
        "objectId": "UW9byOK3TZ",
        "updatedAt": "2015-08-22T02:38:58.604Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "One to one mapping of entities.",
            "nextLessonPermalinkName": "One-To-Many-Mapping",
            "permalinkName": "One-To-One-Mapping",
            "prevLessonPermalinkName": "Proxy-Objects-and-Eager-and-Lazy-Fetch-Types",
            "title": "One To One Mapping",
            "unitSlNo": "3.4",
            "youtube": "Of7qR-WagYk"
        },
        "Permalink": "One-To-One-Mapping",
        "createdAt": "2015-08-22T02:38:58.776Z",
        "objectId": "WMjDpqx6iE",
        "updatedAt": "2015-08-22T02:38:58.776Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "More configuration options for collections, including configuring primary keys.",
            "nextLessonPermalinkName": "Proxy-Objects-and-Eager-and-Lazy-Fetch-Types",
            "permalinkName": "Configuring-Collections-and-Adding-Keys",
            "prevLessonPermalinkName": "Saving-Collections",
            "title": "Configuring Collections and Adding Keys",
            "unitSlNo": "3.2",
            "youtube": "kk207HAym_I"
        },
        "Permalink": "Configuring-Collections-and-Adding-Keys",
        "createdAt": "2015-08-22T02:38:58.766Z",
        "objectId": "WYvsJAOwvE",
        "updatedAt": "2015-08-22T02:38:58.766Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll provide our beans with access to the ApplicationContext object by implementing the ApplicationContextAware interface. We'll also use BeanNameAware interface to get the name of the bean configured in the Spring XML.",
            "nextLessonPermalinkName": "Bean-Definition-Inheritance",
            "permalinkName": "Using-ApplicationContextAware",
            "prevLessonPermalinkName": "Understanding-Bean-Scopes",
            "title": "Using ApplicationContextAware",
            "unitSlNo": "2.2",
            "youtube": "WUqyoH_G4Ko"
        },
        "Permalink": "Using-ApplicationContextAware",
        "createdAt": "2015-08-22T02:38:58.684Z",
        "objectId": "WrCmyt6YWI",
        "updatedAt": "2015-08-22T02:38:58.684Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "There are some Maven plugins that are full Servlet containers. We'll look at an example: the Jetty plugin, and we'll see how it makes developing web applications easier.",
            "nextLessonPermalinkName": "Eclipse-Plugin-for-Maven-and-Maven-Plugin-for-Eclipse",
            "permalinkName": "Using-the-Jetty-Plugin",
            "prevLessonPermalinkName": "Introduction-to-Plugins-with-the-Maven-Compiler-Plugin",
            "title": "Using the Jetty Plugin",
            "unitSlNo": "3.2",
            "youtube": "6sIhJuaZhF0"
        },
        "Permalink": "Using-the-Jetty-Plugin",
        "createdAt": "2015-08-22T02:38:58.534Z",
        "objectId": "XtGgD6vQJC",
        "updatedAt": "2015-08-22T02:38:58.534Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "Calling a Business Service method from the controller.",
            "nextLessonPermalinkName": "Using-Model-object-in-the-MVC-Application",
            "permalinkName": "Writing-an-MVC-Application-Part-2",
            "prevLessonPermalinkName": "Writing-an-MVC-Application-Part-1",
            "title": "Writing an MVC Application Part 2",
            "unitSlNo": "2.6",
            "youtube": "EOdvmGVdndA"
        },
        "Permalink": "Writing-an-MVC-Application-Part-2",
        "createdAt": "2015-08-22T02:38:59.148Z",
        "objectId": "XuDQFPQ3mG",
        "updatedAt": "2015-08-22T02:38:59.148Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, we'll understand how types are handled in the WSDL. We'll also explore the two styles we can choose from for our WSDL - Document style and RPC style.",
            "nextLessonPermalinkName": "Service-Interface-and-Custom-Types",
            "permalinkName": "Schema-Types-and-Binding-Styles",
            "prevLessonPermalinkName": "Customizing-the-WSDL",
            "title": "Schema Types and Binding Styles",
            "unitSlNo": "2.8",
            "youtube": "rHJ1v1jsAao"
        },
        "Permalink": "Schema-Types-and-Binding-Styles",
        "createdAt": "2015-08-22T02:38:58.664Z",
        "objectId": "YTPmzD2P6C",
        "updatedAt": "2015-08-22T02:38:58.664Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "Introduction and explanation of the Model-View-Controller pattern.",
            "nextLessonPermalinkName": "Writing-an-MVC-Application-Part-1",
            "permalinkName": "Understanding-the-MVC-Pattern",
            "prevLessonPermalinkName": "Using-jspInit-and-InitParams",
            "title": "Understanding the MVC Pattern",
            "unitSlNo": "2.4",
            "youtube": "zk_zEp-mtvQ"
        },
        "Permalink": "Understanding-the-MVC-Pattern",
        "createdAt": "2015-08-22T02:38:59.162Z",
        "objectId": "Yiqy0GUhtQ",
        "updatedAt": "2015-08-22T02:38:59.162Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "This tutorial explores the method attribute in action mappings and how we can have multiple methods in a single Action class run for different URL mappings.",
            "nextLessonPermalinkName": "Using-Model-Objects",
            "permalinkName": "Configuring-methods-in-Action-mappings",
            "prevLessonPermalinkName": "The-ActionSupport-Class",
            "title": "Configuring methods in Action mappings",
            "unitSlNo": "3.10",
            "youtube": "toCQ_CSXpgw"
        },
        "Permalink": "Configuring-methods-in-Action-mappings",
        "createdAt": "2015-08-22T02:38:58.919Z",
        "objectId": "Yki6i160lq",
        "updatedAt": "2015-08-22T02:38:58.919Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "You can think of RESTful URIs as belonging to two types: instance resource URIs and collection resource URIs. Let's understand what they mean.",
            "nextLessonPermalinkName": "HTTP-Methods",
            "permalinkName": "RESTful-URI-types",
            "prevLessonPermalinkName": "Designing-Resource-URIs",
            "sections": [
                {
                    "content": "\u003ch2 id=\"uri-types\"\u003eURI Types\u003c/h2\u003e\n\u003cp\u003eWe\u0026#39;ve designed URIs for messages and comments in the previous tutorial. To recap, a message is accessible at:\n\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAnd comments are accessible at:\n\u003ccode\u003e/messages/{messageId}/comments/{commentId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThese URIs are great when you want to look up a particular message or a particular comment. These are called instance resource URIs. A single instance of a message or a comment is accessible by the instance resource. Instance resource URIs typically have a unique ID of that resource to identify which instance you are interested in.\u003c/p\u003e\n\u003cp\u003eWhat about if you want all messages?\u003c/p\u003e\n\u003cp\u003eThe answer is simple. Just access \n\u003ccode\u003e/messages\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThat\u0026#39;s it! Again, this is analogous to a simple static site with HTML pages. Accessing a directory gives you all the contents in that directory. So, think of \u003ccode\u003e/messages\u003c/code\u003e as the top level directory for all messages and accessing that URI gives a list of all messages.\u003c/p\u003e\n\u003cp\u003eSimilarly, if you need all comments made for message 2, the URI is: \u003ccode\u003e/messages/2/comments\u003c/code\u003e. That\u0026#39;s the directory for all comments for message 2.\u003c/p\u003e\n\u003cp\u003eThese URIs are different from the URIs we saw in the previous tutorial. They do not represent a particular resource, but rather, a collection or a list of resources. So, they are called \u003cem\u003ecollection URIs\u003c/em\u003e. These URIs pull up a collection of instance resources. \u003c/p\u003e\n\u003cp\u003eThis also explains why the resource names are in plural. They help the client understand that they are working with a collection of resources with these URIs.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages\u003c/code\u003e returns all messages\n\u003ccode\u003e/profiles\u003c/code\u003e returns all profiles\n\u003ccode\u003e/messages/{messageId}/comments\u003c/code\u003e returns all comments for \u003ccode\u003emessageId\u003c/code\u003e\n\u003ccode\u003e/messages/{messageId}/likes\u003c/code\u003e returns all likes for \u003ccode\u003emessageId\u003c/code\u003e\n\u003ccode\u003e/messages/{messageId}/shares\u003c/code\u003e returns all shares for \u003ccode\u003emessageId\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis shows you the advantage of \u003cem\u003enesting\u003c/em\u003e related resources like messages and comments, or messages and likes in this way. But this also brings up a problem. What if you need a list of \u003cem\u003eall\u003c/em\u003e comments irrespective of which message they are associated with. This URI is not good enough for that. The way we have designed our URI, you have to give a message ID here. This is where a decision has to be made about how you want resources to be accessed. In this example, I choose to not provide an option for getting all comments. A comment makes sense only in the context of a message, and I don\u0026#39;t want my clients to make requests for all comments. If I needed to provide that functionality, I would design the comments URI like \u003ccode\u003e/comments\u003c/code\u003e rather than \u003ccode\u003e/messages/{messageId}/comments\u003c/code\u003e. Again, no right or wrong. This is something you decide.\u003c/p\u003e\n\u003ch2 id=\"filtering-collections\"\u003eFiltering collections\u003c/h2\u003e\n\u003cp\u003eWhen you have collection URIs like this, you\u0026#39;d want a way to filter the result. It\u0026#39;s not so much a problem for the comments URI. Getting all comments for a message is mostly not going to be a big list, but imagine getting all messages. That\u0026#39;s going to result in a lot of data, and the client who\u0026#39;s making the request probably doesn\u0026#39;t want all that data. We should design our API to provide a way for the client to paginate or filter the results. \u003c/p\u003e\n\u003cp\u003eOne way to do that is using query params. We have so far avoided query params in our URIs, but filtering and pagination is a good scenario to use them. One standard practice to provide pagination is to have two query params: starting point and page size. \u003c/p\u003e\n\u003cp\u003eFor example, consider this URI:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages?offset=30\u0026amp;limit=10\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis URI fetches messages starting from message number 30 and returns the next 10 messages. The offset and limit params correspond to the start and page size values. The offset param tells you where client wants to start, and the limit tells you how many records the client wants. This, of course, assumes a specific order in which messages are returned, whether it is chronological or ID based. You as an API developer needs to make sure that the order that\u0026#39;s returned is the same: The order in which you responded to the request for the first page should be retained in the requests for the second page.\u003c/p\u003e\n\u003cp\u003eThe client who uses your API might have their own logic for displaying pagination controls on their UI. But they would use these two params to make calls to the RESTful service to get chunks of data in pages.\u003c/p\u003e\n\u003cp\u003eYou can also choose to implement other kinds of filters using query params. Take an example of retrieving messages based on date. Let\u0026#39;s say you want to provide an ability for clients to retrieve messages posted in a given year. You could have them send request like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages?year=2014\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis returns all messages made in the year 2014. This is of course, something you can use together with pagination like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages?year=2014\u0026amp;offset=50\u0026amp;limit=25\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThere are two types of REST URIs. One is instance resource URIs that identify a specific resource, and the other is collection URI which represent a collection of resources. Collection URIs usually end in plurals, like \u003cem\u003emessages\u003c/em\u003e, \u003cem\u003ecomments\u003c/em\u003e, \u003cem\u003eproducts\u003c/em\u003e and so on, and are typically a portion of the resource URI. An instance resource URI identify a specific resource below a collection resource URI.\u003c/p\u003e\n\u003cp\u003eAnd finally, you can implement query params as a way of achieving pagination and filtering when accessing collection URIs.\u003c/p\u003e\n\u003cp\u003eI encourage you to do the exercises where you\u0026#39;ll practice writing RESTful URIs for collection resources. I\u0026#39;ll see you in the next video.\u003c/p\u003e\n",
                    "id": "OrvTBsCnXb",
                    "name": "Text",
                    "permalinkName": "text"
                },
                {
                    "content": [
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/getCategories\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/fetchCategories?categoryId={categoryId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/{categoryId}\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "Collection resources are \"plurals\".",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Let's say you have \u003ccode\u003eCategory\u003c/code\u003e as an entity that represents all the product categories on the site. What would be a RESTful URI to look up all categories?",
                            "id": "CollectionURIs-1",
                            "incorrectAnswerDescription": "Collection resources are \"plurals\".",
                            "incorrectAnswerMainTitle": "Not quite."
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products?action=GET\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/getAllProducts\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products/all\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "At the root resource level, getting a \"collection\" is just the plural resource name!",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "The site also has a \u003ccode\u003eProduct\u003c/code\u003e entity. This has been designed to be a first level entity like \u003ccode\u003eCategory\u003c/code\u003e. What would be a good RESTful URI for all products?",
                            "id": "CollectionURIs-2",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Try again!"
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/categories/products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/products/{productId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/products/{categoryId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/{categoryid}/products\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 3,
                            "correctAnswerDescription": "Nested resource URIs follow the ID of the parent resource.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "If the \u003ccode\u003eProduct\u003c/code\u003e entity were to have been designed as a sub-resource under the \u003ccode\u003eCategory\u003c/code\u003e entity, what would the URI for \u003ccode\u003eProduct\u003c/code\u003e be?",
                            "id": "CollectionURIs-3",
                            "incorrectAnswerDescription": "Think of a sub resource URI as something that follows the unique parent resource.",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        }
                    ],
                    "id": "9NKHIfGCNZ",
                    "name": "Exercise",
                    "permalinkName": "exercise"
                }
            ],
            "title": "RESTful URI types",
            "unitSlNo": "1.4",
            "youtube": "gYKJqUZXuBw"
        },
        "Permalink": "RESTful-URI-types",
        "createdAt": "2015-08-22T02:38:58.824Z",
        "objectId": "YvekRJ7BKM",
        "updatedAt": "2015-08-22T02:38:58.824Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "In this tutorial, we'll learn how to cache results that are fetched from the Query object.",
            "permalinkName": "Using-Query-Cache",
            "prevLessonPermalinkName": "Configuring-Second-Level-Cache",
            "title": "Using Query Cache",
            "unitSlNo": "3.3",
            "youtube": "iwCdyr0bdkw"
        },
        "Permalink": "Using-Query-Cache",
        "createdAt": "2015-08-22T02:38:58.726Z",
        "objectId": "ZUNYpstBvw",
        "updatedAt": "2015-08-22T02:38:58.726Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "We'll look at few other options in the types of parameters that can be passed to the servlet.",
            "nextLessonPermalinkName": "Understanding-GET-and-POST",
            "permalinkName": "Passing-More-Parameters",
            "prevLessonPermalinkName": "The-POST-Method-and-Passing-Parameters",
            "title": "Passing More Parameters",
            "unitSlNo": "2.4",
            "youtube": "0WPfqrSCb6c"
        },
        "Permalink": "Passing-More-Parameters",
        "createdAt": "2015-08-22T02:38:59.046Z",
        "objectId": "Zr0DLBumoD",
        "updatedAt": "2015-08-22T02:38:59.046Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "In this tutorial, we'll download and install Maven in our development environment.",
            "nextLessonPermalinkName": "Introduction-and-Setting-up-Part-2",
            "permalinkName": "Introduction-and-Setting-up-Part-1",
            "title": "Introduction and Setting up Part 1",
            "unitSlNo": "1.1",
            "youtube": "al7bRZzz4oU"
        },
        "Permalink": "Introduction-and-Setting-up-Part-1",
        "createdAt": "2015-08-22T02:38:58.522Z",
        "objectId": "Zw7zYbFBq5",
        "updatedAt": "2015-08-22T02:38:58.522Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Now that we've identified some important resource URIs, let's work on the operations that can be performed and the data that's exchanged.",
            "nextLessonPermalinkName": "Idempotence-In-HTTP-Methods",
            "permalinkName": "HTTP-Methods",
            "prevLessonPermalinkName": "RESTful-URI-types",
            "sections": [
                {
                    "content": "\u003cp\u003eWe saw that a URI like \u003ccode\u003egetMessages.do?id=10\u003c/code\u003e is \u003cem\u003eaction-based\u003c/em\u003e and not RESTful. We chose the URI \u003ccode\u003e/messages/10\u003c/code\u003e to replace it. This is resource based and RESTful and all that good stuff. But here\u0026#39;s a problem.\u003c/p\u003e\n\u003cp\u003eLook at the URI \u003ccode\u003egetMessages.do?id=10\u003c/code\u003e. It has 3 pieces of information. \u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt refers to messages\u003c/li\u003e\n\u003cli\u003eIt refers to ID 10\u003c/li\u003e\n\u003cli\u003eIt \u003cem\u003egets\u003c/em\u003e that information\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNow look at the URI \u003ccode\u003e/messages/10\u003c/code\u003e. There\u0026#39;s definitely #1 and #2. But the URI does not have the information in point 3.\u003c/p\u003e\n\u003cp\u003eYou could argue that accessing that URI \u003cem\u003egets\u003c/em\u003e the data for message id 10. But what about other operations? We have looked at just getting data so far. You could have URIs that submit data.\u003c/p\u003e\n\u003cp\u003eFor example:\n\u003ccode\u003e/submitMessage.do?id=10\u003c/code\u003e lets you submit something to the message ID 10. What would be the REST URI equivalent for that?\u003c/p\u003e\n\u003cp\u003eWell, equivalent resource based REST URI is:\n\u003ccode\u003e/messages/10\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eYes, that\u0026#39;s right! It\u0026#39;s the same URI.\u003c/p\u003e\n\u003cp\u003eHow about a delete operation? What would be the equivalent of a URI like \u003ccode\u003e/deleteMessage.do?id=10\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eThe equivalent is still \u003ccode\u003e/messages/10\u003c/code\u003e!\u003c/p\u003e\n\u003cp\u003eHow is that possible? How can the same URI do all these different operations? \u003cem\u003eAnd how does it know when to do what?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe answer is \u003cstrong\u003eHTTP methods\u003c/strong\u003e. If you want your API client to perform different operations for message 10, just have them use different HTTP methods to the same URI \u003ccode\u003e/messages/10\u003c/code\u003e! \u003c/p\u003e\n\u003cp\u003eThe most common HTTP methods are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGET\u003c/li\u003e\n\u003cli\u003ePOST\u003c/li\u003e\n\u003cli\u003ePUT\u003c/li\u003e\n\u003cli\u003eDELETE\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere are some other methods that are rarely used like HEAD and OPTIONS. But for the most part, we\u0026#39;ll focus on the 4 common HTTP methods in this course.\u003c/p\u003e\n\u003cp\u003eThese HTTP methods have specific meanings, and you typically use the right method for the right operation. Also, when using HTTP, like when you are browsing a web page, you are actually using these methods automatically. When you type in a URL in the address bar of your browser, the browser automatically issues a GET request for that URL. When you submit a form, the browser probably uses a POST request to do so. The idea is to use the right methods depending on the operation. Choosing methods for a RESTful API also follows the same idea.\u003c/p\u003e\n\u003cp\u003eSo, for example, in the REST world, you do not make a call to \u003ccode\u003egetProducts\u003c/code\u003e. You make a GET request to the products resource URI. You do not call \u003ccode\u003edeleteOrder\u003c/code\u003e. You make a DELETE request to the order resource URI. The URI tells you what \u003cem\u003eentity\u003c/em\u003e or resource is being operated upon and the method tells you what the operation is.\u003c/p\u003e\n\u003ch2 id=\"scenarios\"\u003eScenarios\u003c/h2\u003e\n\u003cp\u003eLet us look at some of the common operations in our sample social media application and identify the HTTP methods for each of them.\u003c/p\u003e\n\u003ch4 id=\"getting-a-message\"\u003eGetting a message\u003c/h4\u003e\n\u003cp\u003eThis should be obvious now. The URI is the resource URI that you need to get. the HTTP method is GET, since you are literally \u003cem\u003egetting\u003c/em\u003e the information\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003eGET /messages/20\u003c/code\u003e returns the message ID 20.\u003c/p\u003e\n\u003ch4 id=\"updating-a-message\"\u003eUpdating a message\u003c/h4\u003e\n\u003cp\u003eLet\u0026#39;s say our social media application lets you make changes to messages you\u0026#39;ve already submitted. We anticipate this feature of our Messenger application will be very popular  among some  celebrities and politicians who\u0026#39;d sometimes like to retract what they\u0026#39;ve already posted. \u003c/p\u003e\n\u003cp\u003eWhat\u0026#39;s the right method for submitting an updated message. Is it the POST method? This one is not all that obvious. You \u003cem\u003ecan\u003c/em\u003e use POST, and I know some people do, but the standard practice is to use the PUT method. Why PUT and not POST? There is a very important difference between two, and I\u0026#39;ll talk about that a bit later. But for now, remember that we\u0026#39;ll be using PUT to \u003cem\u003eupdate\u003c/em\u003e  or \u003cem\u003echange\u003c/em\u003e any resource. \u003c/p\u003e\n\u003cp\u003eOf course, you\u0026#39;ll want the resource to be updated with something. The new content. That content needs to be sent in the body of the PUT request. \u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003ePUT /messages/20\u003c/code\u003e (with the request body containing the new message content) replaces the message ID 20 with the content in the request body.\u003c/p\u003e\n\u003ch4 id=\"deleting-a-message\"\u003eDeleting a message\u003c/h4\u003e\n\u003cp\u003eThis one should be easy. Yes, there is a DELETE method, and that\u0026#39;s what you should use here. When you want your clients to delete a resource, just have them issue a DELETE request to the resource URI.  No request body required.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003eDELETE /messages/20\u003c/code\u003e deletes message ID 20.\u003c/p\u003e\n\u003ch4 id=\"creating-a-new-message\"\u003eCreating a new message\u003c/h4\u003e\n\u003cp\u003e This one is interesting. Before we talk about the method to use, think about what URI to call to create a new message. To get, change or delete a message, you used the message resource URI \u003ccode\u003e/messages/{messageId}\u003c/code\u003e. How about creating a new message? The message hasn\u0026#39;t been created yet, so there is no message ID! And the ID is typically managed by the application, by finding the next unused ID, so the client usually has no idea what the ID will be.\u003c/p\u003e\n\u003cp\u003eThis is why, requests for creating a new resource is always issued to the collection URI for that resource. To create a new message, the request is made to \u003ccode\u003e/messages\u003c/code\u003e. To create a new profile, a request is made to \u003ccode\u003e/profiles\u003c/code\u003e. The application receives this request and creates a new resource and assigns an ID to it.\u003c/p\u003e\n\u003cp\u003eWith that settled, what will be the HTTP method? For creating resources, the practice is to use a POST method. The POST body will should contain the content for creating the resource.\u003c/p\u003e\n\u003cp\u003eOnce the resource is created, the service will need to let the client know what the ID is. Because, unless the client knows the ID, there is no way for it to do anything with the newly created resource. So, in the response for the POST request, the web service sends back the ID of the newly created resource.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003ePOST /messages\u003c/code\u003e (with the request body containing the new message) creates a new message with the content in the request body. Response to this request contains the message ID that was created.\u003c/p\u003e\n\u003ch2 id=\"collection-uri-scenarios\"\u003eCollection URI scenarios\u003c/h2\u003e\n\u003cp\u003eYou\u0026#39;ll appreciate the elegance and overall awesomeness of REST API practices when you realize how seamlessly these concepts translate to collection URIs.\u003c/p\u003e\n\u003cp\u003eImagine what happens when you make a GET request to a collection URI like \u003ccode\u003e/messages\u003c/code\u003e. Yes, you get all messages! Other HTTP methods work the same way too. Here are some examples:\u003c/p\u003e\n\u003cp\u003eDELETE on \u003ccode\u003e/messages/10/comments\u003c/code\u003e deletes all comments associated with message 10.\u003c/p\u003e\n\u003cp\u003ePOST on \u003ccode\u003e/messages/10/comments\u003c/code\u003e creates a new comment for message ID 10 with the request body containing the new comment information.\u003c/p\u003e\n\u003cp\u003ePUT on \u003ccode\u003e/messages/20/comments\u003c/code\u003e replaces the list of comments for message ID 20 with a new list of comments in the PUT body. (This kind of API is not commonly used though)\u003c/p\u003e\n\u003cp\u003eDELETE on \u003ccode\u003e/messages\u003c/code\u003e deletes all messages (Again, not commonly used, and not something you\u0026#39;d want to implement, I think!)\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThere you go. We have identified standard HTTP methods for all the CRUD operations. Whenever you need to provide APIs for creating, deleting, fetching or updating a resource, you know what methods to choose for them.\u003c/p\u003e\n\u003cp\u003eThis, of course, doesn\u0026#39;t address all the operations. Very rarely do web applications perform just CRUD operations. What if you need to provide an API for archiving a message? Or run a server-side job? How can we map GET, PUT, POST and DELETE methods to those miscellaneous operations?\u003c/p\u003e\n\u003cp\u003eThe fact is, these methods do not really map to CRUD operations. It does look like that based on what we\u0026#39;ve seen in this tutorial, but there is more to it. We will talk about this in a later tutorial, so hold on to that thought for a bit!\u003c/p\u003e\n",
                    "id": "NP7LEnbrFH",
                    "name": "Text",
                    "permalinkName": "text"
                },
                {
                    "content": [
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products?action=GET\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/getAllProducts\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products/all\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "At the root resource level, getting a \"collection\" is just the plural resource name!",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "The site also has a \u003ccode\u003eProduct\u003c/code\u003e entity. This has been designed to be a first level entity like \u003ccode\u003eCategory\u003c/code\u003e. What would be a good RESTful URI for all products?",
                            "id": "HTTPMethods-1",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Try again!"
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003eDELETE -\u003e /products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003eDELETE -\u003e /products/id\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products/id/delete\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003eNone of the above\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 1,
                            "correctAnswerDescription": "",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Which of these is a good choice for deleting a Product instance?",
                            "id": "HTTPMethods-2",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003ePOST -\u003e /products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003ePOST -\u003e /products/id\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003ePUT -\u003e /products/id\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003eNone of the above\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Which of these is a good choice for updating a Product instance?",
                            "id": "HTTPMethods-3",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003ePOST -\u003e /products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003ePOST -\u003e /products/id\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003ePUT -\u003e /products/id\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003eNone of the above\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 0,
                            "correctAnswerDescription": "",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Which of these is a good choice for creating a new Product?",
                            "id": "HTTPMethods-4",
                            "incorrectAnswerDescription": "",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        }
                    ],
                    "id": "XKgxrUVlLW",
                    "name": "Exercise",
                    "permalinkName": "exercise"
                }
            ],
            "title": "HTTP Methods",
            "unitSlNo": "1.5",
            "youtube": "AK6TulIASgQ"
        },
        "Permalink": "HTTP-Methods",
        "createdAt": "2015-08-22T02:38:58.831Z",
        "objectId": "a47MYbo6LI",
        "updatedAt": "2015-08-22T02:38:58.831Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "In this tutorial, we'll learn how to configure our servlets using XML instead of annotations.",
            "nextLessonPermalinkName": "The-POST-Method-and-Passing-Parameters",
            "permalinkName": "Servlet-XML-Configuration",
            "prevLessonPermalinkName": "Understanding-the-Servlet",
            "title": "Servlet XML Configuration",
            "unitSlNo": "2.2",
            "youtube": "w6YPK9xunCk"
        },
        "Permalink": "Servlet-XML-Configuration",
        "createdAt": "2015-08-22T02:38:59.051Z",
        "objectId": "a9W1CuZfDd",
        "updatedAt": "2015-08-22T02:38:59.051Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll build and stub business and data services that we can call from the Message resource class.",
            "nextLessonPermalinkName": "Accessing-Path-Params",
            "permalinkName": "Building-Service-Stubs",
            "prevLessonPermalinkName": "Installing-A-Rest-Api-Client",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/3130c8a71502e6601d644317a7dca2caa5e44786.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "HwjHn1WMKL",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Building Service Stubs",
            "unitSlNo": "2.7",
            "youtube": "UXdoBGLDnRg"
        },
        "Permalink": "Building-Service-Stubs",
        "createdAt": "2015-08-22T02:38:58.910Z",
        "objectId": "aDmcwaDwq4",
        "updatedAt": "2015-08-22T02:38:58.910Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In Part 1 of this 2-part tutorial, we'll implement HATEOAS links in the Message response for the \"self\" rel attribute.",
            "nextLessonPermalinkName": "HATEOAS-Part-2",
            "permalinkName": "HATEOAS-Part-1",
            "prevLessonPermalinkName": "Using-WebApplicationException",
            "title": "HATEOAS (Part 1)",
            "unitSlNo": "2.20",
            "youtube": "Mp6LpIg7h84"
        },
        "Permalink": "HATEOAS-Part-1",
        "createdAt": "2015-08-22T02:38:59.020Z",
        "objectId": "aL11TbiUv8",
        "updatedAt": "2015-08-22T02:38:59.020Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Let's return some data in XML format from the resource. We'll update the MessageResource to return a list of Messages in XML.",
            "nextLessonPermalinkName": "Installing-A-Rest-Api-Client",
            "permalinkName": "Returning-Xml-Response",
            "prevLessonPermalinkName": "Creating-A-Resource",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/22403d7b65282e3f970201118470baa2afa10eaf.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "21MKkKE3Jw",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Returning XML Response",
            "unitSlNo": "2.5",
            "youtube": "BaZdlJSts5A"
        },
        "Permalink": "Returning-Xml-Response",
        "createdAt": "2015-08-22T02:38:58.914Z",
        "objectId": "aQaNC9xcMO",
        "updatedAt": "2015-08-22T02:38:58.914Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll learn what bean definition inheritance is, and how to configure a parent bean definition and have children beans inherit the bean definitions.",
            "nextLessonPermalinkName": "Lifecycle-Callbacks",
            "permalinkName": "Bean-Definition-Inheritance",
            "prevLessonPermalinkName": "Using-ApplicationContextAware",
            "title": "Bean Definition Inheritance",
            "unitSlNo": "2.3",
            "youtube": "LxRiFFEXs5I"
        },
        "Permalink": "Bean-Definition-Inheritance",
        "createdAt": "2015-08-22T02:38:58.677Z",
        "objectId": "as7fYFAv42",
        "updatedAt": "2015-08-22T02:38:58.677Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "We'll now implement nested resources using the \"sub-resources\" feature in JAX-RS. ",
            "nextLessonPermalinkName": "Sending-Status-Codes-and-Location-Headers",
            "permalinkName": "Implementing-Subresources",
            "prevLessonPermalinkName": "Using-Context-And-BeanParam-Annotations",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/cdd7486aef1382bfd1f7bf1c7e644431b337ce08.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "hHA1C1rxhF",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Implementing Subresources",
            "unitSlNo": "2.16",
            "youtube": "O4dAxOCYAUg"
        },
        "Permalink": "Implementing-Subresources",
        "createdAt": "2015-08-22T02:38:59.006Z",
        "objectId": "atvOS6Wds6",
        "updatedAt": "2015-08-22T02:38:59.006Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Now I'll introduce you to a REST API client that will be useful for the rest of the course, for making REST API calls. The example client I demonstrate, called Postman, is a Chrome add-on.",
            "nextLessonPermalinkName": "Building-Service-Stubs",
            "permalinkName": "Installing-A-Rest-Api-Client",
            "prevLessonPermalinkName": "Returning-Xml-Response",
            "title": "Installing A REST API Client",
            "unitSlNo": "2.6",
            "youtube": "vbP1ZCDfIfw"
        },
        "Permalink": "Installing-A-Rest-Api-Client",
        "createdAt": "2015-08-22T02:38:58.930Z",
        "objectId": "axKWaY4P9x",
        "updatedAt": "2015-08-22T02:38:58.930Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll learn how to implement pagination and filtering features in REST APIs.",
            "nextLessonPermalinkName": "The-Param-Annotations",
            "permalinkName": "Pagination-And-Filtering",
            "prevLessonPermalinkName": "Implementing-ProfileResource",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/4ecca03a0ea1c5ebe96fdb8cdd1875b59ea12970.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "3tRh09c1y7",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Pagination And Filtering",
            "unitSlNo": "2.13",
            "youtube": "WC6wy3Kg5pk"
        },
        "Permalink": "Pagination-And-Filtering",
        "createdAt": "2015-08-22T02:38:59.015Z",
        "objectId": "b3NCVjGpBI",
        "updatedAt": "2015-08-22T02:38:59.015Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "We'll now convert the simple Java class in the previous tutorial into a web service, deploy it to Glassfish, and test it by submitting a SOAP request to get a SOAP response.",
            "nextLessonPermalinkName": "Adding-Input-Arguments",
            "permalinkName": "Writing-a-Web-Service---Code-and-Deploy",
            "prevLessonPermalinkName": "Writing-a-Web-Service---Eclipse-setup",
            "title": "Writing a Web Service - Code and Deploy",
            "unitSlNo": "2.3",
            "youtube": "u5cQkVgq6jE"
        },
        "Permalink": "Writing-a-Web-Service---Code-and-Deploy",
        "createdAt": "2015-08-22T02:38:58.662Z",
        "objectId": "bYdYBk5M25",
        "updatedAt": "2015-08-22T02:38:58.662Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Hibernate manages data fetching and optimizations using proxy objects. In this tutorial, we'll learn what they are and how lazy initialization works.",
            "nextLessonPermalinkName": "One-To-One-Mapping",
            "permalinkName": "Proxy-Objects-and-Eager-and-Lazy-Fetch-Types",
            "prevLessonPermalinkName": "Configuring-Collections-and-Adding-Keys",
            "title": "Proxy Objects and Eager and Lazy Fetch Types",
            "unitSlNo": "3.3",
            "youtube": "RmnrgocuivQ"
        },
        "Permalink": "Proxy-Objects-and-Eager-and-Lazy-Fetch-Types",
        "createdAt": "2015-08-22T02:38:58.770Z",
        "objectId": "bZNNV68Ryb",
        "updatedAt": "2015-08-22T02:38:58.770Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "This two part tutorial introduces scopes and the Request, Session and Context objects.",
            "nextLessonPermalinkName": "Understanding-init,-service-and-ServletConfig",
            "permalinkName": "Request,-Session-and-Context",
            "prevLessonPermalinkName": "Understanding-GET-and-POST",
            "title": "Request, Session and Context",
            "unitSlNo": "2.6",
            "youtube": "GbvuAIhLUZU"
        },
        "Permalink": "Request,-Session-and-Context",
        "createdAt": "2015-08-22T02:38:59.051Z",
        "objectId": "btSmafcYwN",
        "updatedAt": "2015-08-22T02:38:59.051Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, you'll learn about a few more Param annotations that inject request values into resource methods.",
            "nextLessonPermalinkName": "Using-Context-And-BeanParam-Annotations",
            "permalinkName": "The-Param-Annotations",
            "prevLessonPermalinkName": "Pagination-And-Filtering",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/61673b6807baf891d9b414641cce7378259ee88c.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "XzIarUd71o",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "The Param Annotations",
            "unitSlNo": "2.14",
            "youtube": "Mqpgca6654Q"
        },
        "Permalink": "The-Param-Annotations",
        "createdAt": "2015-08-22T02:38:59.015Z",
        "objectId": "cQ6o94pCPy",
        "updatedAt": "2015-08-22T02:38:59.015Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll now learn how to make POST requests to actions, using both HTML forms and Struts 2 tags.",
            "nextLessonPermalinkName": "Login-Action-and-Best-Practices",
            "permalinkName": "Post-requests-to-actions",
            "prevLessonPermalinkName": "Accessing-Input-Parameters",
            "title": "Post requests to actions",
            "unitSlNo": "3.5",
            "youtube": "cG7FNgD11iE"
        },
        "Permalink": "Post-requests-to-actions",
        "createdAt": "2015-08-22T02:38:58.916Z",
        "objectId": "clkMeMcPzE",
        "updatedAt": "2015-08-22T02:38:58.916Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll now look at Spring's support for Event Handling. We'll write an event listener in this tutorial. I'll also show you how to write custom events and publish them anywhere in the code.",
            "permalinkName": "Event-Handling-in-Spring",
            "prevLessonPermalinkName": "Using-MessageSource-To-Get-Text-From-Property-Files",
            "title": "Event Handling in Spring",
            "unitSlNo": "3.6",
            "youtube": "ZUe1Xz7DAcY"
        },
        "Permalink": "Event-Handling-in-Spring",
        "createdAt": "2015-08-22T02:38:58.734Z",
        "objectId": "ctWgX1pjws",
        "updatedAt": "2015-08-22T02:38:58.734Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "Creating and running our first Servlet.",
            "nextLessonPermalinkName": "Understanding-the-Servlet",
            "permalinkName": "First-Servlet-Part-2",
            "prevLessonPermalinkName": "First-Servlet-Part-1",
            "title": "First Servlet Part 2",
            "unitSlNo": "1.3",
            "youtube": "gU0RebsaFzQ"
        },
        "Permalink": "First-Servlet-Part-2",
        "createdAt": "2015-08-22T02:38:59.139Z",
        "objectId": "cuC4LnBqj7",
        "updatedAt": "2015-08-22T02:38:59.139Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this video, we will switch back to the client side and learn more about wsimport, the tool we used to generate client stubs.",
            "permalinkName": "wsimport-Revisited",
            "prevLessonPermalinkName": "Using-Endpoint",
            "title": "wsimport Revisited",
            "unitSlNo": "3.4",
            "youtube": "lwXsrcJyjiI"
        },
        "Permalink": "wsimport-Revisited",
        "createdAt": "2015-08-22T02:38:58.720Z",
        "objectId": "f0mx23Omgw",
        "updatedAt": "2015-08-22T02:38:58.720Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll look at some concepts related to bean naming and usage like alias and idref. We'll also understand how to write inner beans.",
            "nextLessonPermalinkName": "Initializing-Collections",
            "permalinkName": "Inner-Beans,-Aliases-and-idref",
            "prevLessonPermalinkName": "Injecting-Objects",
            "title": "Inner Beans, Aliases and idref",
            "unitSlNo": "1.8",
            "youtube": "TW51XsixMqA"
        },
        "Permalink": "Inner-Beans,-Aliases-and-idref",
        "createdAt": "2015-08-22T02:38:58.622Z",
        "objectId": "fRvMjnez82",
        "updatedAt": "2015-08-22T02:38:58.622Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll continue looking at the login action and learn about some best practices that we can implement in our Struts 2 application.",
            "nextLessonPermalinkName": "Action-Wildcards",
            "permalinkName": "Login-Action-and-Best-Practices-Part-2",
            "prevLessonPermalinkName": "Login-Action-and-Best-Practices",
            "title": "Login Action and Best Practices Part 2",
            "unitSlNo": "3.7",
            "youtube": "7yYs39-ZDOE"
        },
        "Permalink": "Login-Action-and-Best-Practices-Part-2",
        "createdAt": "2015-08-22T02:38:58.919Z",
        "objectId": "fSXjKojtVk",
        "updatedAt": "2015-08-22T02:38:58.919Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "In this tutorial, we'll set up and configure Eclipse and Tomcat in our development environment.",
            "nextLessonPermalinkName": "First-Servlet-Part-1",
            "permalinkName": "Setting-up",
            "title": "Setting up",
            "unitSlNo": "1.1",
            "youtube": "b42CJ0r-1to"
        },
        "Permalink": "Setting-up",
        "createdAt": "2015-08-22T02:38:59.060Z",
        "objectId": "fXHOBDJYnb",
        "updatedAt": "2015-08-22T02:38:59.060Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Learn how to handle exceptions in a REST API application using Jersey's ExceptionMapper.",
            "nextLessonPermalinkName": "Using-WebApplicationException",
            "permalinkName": "Handling-Exceptions",
            "prevLessonPermalinkName": "Sending-Status-Codes-and-Location-Headers",
            "title": "Handling Exceptions",
            "unitSlNo": "2.18",
            "youtube": "9oeJc_VkZxo"
        },
        "Permalink": "Handling-Exceptions",
        "createdAt": "2015-08-22T02:38:59.008Z",
        "objectId": "fbbDX0SvCE",
        "updatedAt": "2015-08-22T02:38:59.008Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "In this tutorial, we'll learn how to use Projections to fine tune the results of the Criteria API. We'll also use Query By Example (QBE) to easily specify multiple where clauses in a single example object.",
            "nextLessonPermalinkName": "Cacheing-in-Hibernate",
            "permalinkName": "Projections-and-Query-By-Example",
            "prevLessonPermalinkName": "Understanding-Restrictions",
            "title": "Projections and Query By Example",
            "unitSlNo": "2.7",
            "youtube": "2DXjdl8gzOo"
        },
        "Permalink": "Projections-and-Query-By-Example",
        "createdAt": "2015-08-22T02:38:58.736Z",
        "objectId": "geAn6z2woe",
        "updatedAt": "2015-08-22T02:38:58.736Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "This tutorial is an introduction to the Criteria API. Yet another way to work with data in Hibernate.",
            "nextLessonPermalinkName": "Understanding-Restrictions",
            "permalinkName": "Introduction-to-Criteria-API",
            "prevLessonPermalinkName": "Named-Queries",
            "title": "Introduction to Criteria API",
            "unitSlNo": "2.5",
            "youtube": "4fVlAobgQGI"
        },
        "Permalink": "Introduction-to-Criteria-API",
        "createdAt": "2015-08-22T02:38:58.709Z",
        "objectId": "h2DEmCGGkB",
        "updatedAt": "2015-08-22T02:38:58.709Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "In this tutorial, we'll look at some concepts like CascadeType which can be configured for entity relationships.",
            "nextLessonPermalinkName": "Implementing-Inheritance",
            "permalinkName": "CascadeTypes-and-Other-Things",
            "prevLessonPermalinkName": "mappedBy-and-Many-To-Many-Mapping",
            "title": "CascadeTypes and Other Things",
            "unitSlNo": "3.7",
            "youtube": "K2Id3WLZWJI"
        },
        "Permalink": "CascadeTypes-and-Other-Things",
        "createdAt": "2015-08-22T02:38:58.839Z",
        "objectId": "hHsnb5QlIt",
        "updatedAt": "2015-08-22T02:38:58.839Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "Here we'll see how our understanding of the init concepts of servlets translates to JSPs.",
            "nextLessonPermalinkName": "Understanding-the-MVC-Pattern",
            "permalinkName": "Using-jspInit-and-InitParams",
            "prevLessonPermalinkName": "Scopes-in-JSP-and-the-PageContext-object",
            "title": "Using jspInit and InitParams",
            "unitSlNo": "2.3",
            "youtube": "g15_vDp0HIg"
        },
        "Permalink": "Using-jspInit-and-InitParams",
        "createdAt": "2015-08-22T02:38:59.147Z",
        "objectId": "hMWIu0VzKt",
        "updatedAt": "2015-08-22T02:38:59.147Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll use the Autowired annotation to wire up dependencies. We'll learn how to add dependencies by type and name. We'll also use Qualifiers to narrow down dependency contenders.",
            "nextLessonPermalinkName": "Some-JSR-250-Annotations",
            "permalinkName": "The-Autowired-Annotation",
            "prevLessonPermalinkName": "Introduction-to-Annotations-and-the-Required-Annotation",
            "title": "The Autowired Annotation",
            "unitSlNo": "3.2",
            "youtube": "IVIhVJJGo68"
        },
        "Permalink": "The-Autowired-Annotation",
        "createdAt": "2015-08-22T02:38:58.727Z",
        "objectId": "hSIkQPJwL3",
        "updatedAt": "2015-08-22T02:38:58.727Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "One To Many mapping of entities.",
            "nextLessonPermalinkName": "mappedBy-and-Many-To-Many-Mapping",
            "permalinkName": "One-To-Many-Mapping",
            "prevLessonPermalinkName": "One-To-One-Mapping",
            "title": "One To Many Mapping",
            "unitSlNo": "3.5",
            "youtube": "4mANZ4MMbD4"
        },
        "Permalink": "One-To-Many-Mapping",
        "createdAt": "2015-08-22T02:38:58.765Z",
        "objectId": "hq1HzJHcV0",
        "updatedAt": "2015-08-22T02:38:58.765Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll now try passing input parameters to our Struts 2 application and learn how we can capture that in our Action class.",
            "nextLessonPermalinkName": "Post-requests-to-actions",
            "permalinkName": "Accessing-Input-Parameters",
            "prevLessonPermalinkName": "The-ValueStack",
            "title": "Accessing Input Parameters",
            "unitSlNo": "3.4",
            "youtube": "hBljGA8wyv0"
        },
        "Permalink": "Accessing-Input-Parameters",
        "createdAt": "2015-08-22T02:38:58.816Z",
        "objectId": "iYTWDscmtI",
        "updatedAt": "2015-08-22T02:38:58.816Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Table per class inheritance strategy.",
            "nextLessonPermalinkName": "Implementing-Inheritance-With-Joined-Strategy",
            "permalinkName": "Implementing-Inheritance-With-Table-Per-Class-Strategy",
            "prevLessonPermalinkName": "Single-Table-Strategy",
            "title": "Implementing Inheritance With Table Per Class Strategy",
            "unitSlNo": "3.10",
            "youtube": "qIdM4KQOtH8"
        },
        "Permalink": "Implementing-Inheritance-With-Table-Per-Class-Strategy",
        "createdAt": "2015-08-22T02:38:58.838Z",
        "objectId": "ibfV0vctTf",
        "updatedAt": "2015-08-22T02:38:58.838Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.",
            "nextLessonPermalinkName": "Using-Constructor-Injection",
            "permalinkName": "ApplicationContext-and-Property-Initialization",
            "prevLessonPermalinkName": "Writing-Code-Using-the-Bean-Factory",
            "title": "ApplicationContext and Property Initialization",
            "unitSlNo": "1.5",
            "youtube": "ZxLaEovze3M"
        },
        "Permalink": "ApplicationContext-and-Property-Initialization",
        "createdAt": "2015-08-22T02:38:58.596Z",
        "objectId": "ip2UFYovbG",
        "updatedAt": "2015-08-22T02:38:58.596Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll learn what is JSTL and why it is used. We'll also use the useBean tag.",
            "nextLessonPermalinkName": "Request-Parameters-with-the-setProperty-tag",
            "permalinkName": "Introduction-to-JSTL-and-the-useBean-tag",
            "prevLessonPermalinkName": "Using-RequestDispatcher-in-the-MVC-Application",
            "title": "Introduction to JSTL and the useBean tag",
            "unitSlNo": "2.9",
            "youtube": "-mjYAf0ILZs"
        },
        "Permalink": "Introduction-to-JSTL-and-the-useBean-tag",
        "createdAt": "2015-08-22T02:38:59.201Z",
        "objectId": "iqYrwqDSKE",
        "updatedAt": "2015-08-22T02:38:59.201Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll now learn how to save value types that are collection objects.",
            "nextLessonPermalinkName": "Configuring-Collections-and-Adding-Keys",
            "permalinkName": "Saving-Collections",
            "prevLessonPermalinkName": "AttributeOverrides-and-Embedded-Object-Keys",
            "title": "Saving Collections",
            "unitSlNo": "3.1",
            "youtube": "hofWx5_ZN9c"
        },
        "Permalink": "Saving-Collections",
        "createdAt": "2015-08-22T02:38:58.766Z",
        "objectId": "jAS4pUvpZS",
        "updatedAt": "2015-08-22T02:38:58.766Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll wrap up discussion on the Spring JDBC support by using the DAO support classes that Spring provides out of the box. We'll see how this makes our DAO classes cleaner than ever.",
            "nextLessonPermalinkName": "Using-Hibernate-with-Spring",
            "permalinkName": "DAO-Support-Classes",
            "prevLessonPermalinkName": "Named-Parameter-JDBC-Template",
            "title": "DAO Support Classes",
            "unitSlNo": "2.7",
            "youtube": "UOyjFjilPIo"
        },
        "Permalink": "DAO-Support-Classes",
        "createdAt": "2015-08-22T02:38:58.577Z",
        "objectId": "jCCSE9yzjz",
        "updatedAt": "2015-08-22T02:38:58.577Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "Writing code to Create, Read, Update and Delete entities in the database.",
            "nextLessonPermalinkName": "Transient,-Persistent-and-Detached-Objects",
            "permalinkName": "CRUD-Operations",
            "title": "CRUD Operations",
            "unitSlNo": "1.1",
            "youtube": "hDBQy-dWC0A"
        },
        "Permalink": "CRUD-Operations",
        "createdAt": "2015-08-22T02:38:58.704Z",
        "objectId": "k6Pm3p8hk9",
        "updatedAt": "2015-08-22T02:38:58.704Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "We'll now learn what a Pointcut is, the Pointcut annotation and how to apply advice to multiple pointcuts.",
            "nextLessonPermalinkName": "A-Few-More-Pointcut-Expressions",
            "permalinkName": "Pointcuts-and-Wildcard-Expressions",
            "prevLessonPermalinkName": "Writing-Our-First-Aspect-Part-2",
            "title": "Pointcuts and Wildcard Expressions",
            "unitSlNo": "2.3",
            "youtube": "h7IdaLybg9A"
        },
        "Permalink": "Pointcuts-and-Wildcard-Expressions",
        "createdAt": "2015-08-22T02:38:58.695Z",
        "objectId": "kII8IRbpzv",
        "updatedAt": "2015-08-22T02:38:58.695Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "When using Spring for dependency injection, it's a good practice to use interfaces for referencing dependencies. In this tutorial, we'll learn how to 'code to interfaces'.",
            "nextLessonPermalinkName": "Introduction-to-Annotations-and-the-Required-Annotation",
            "permalinkName": "Coding-To-Interfaces",
            "prevLessonPermalinkName": "Writing-a-BeanFactoryPostProcessor",
            "title": "Coding To Interfaces",
            "unitSlNo": "2.7",
            "youtube": "5IDIEMxdkC8"
        },
        "Permalink": "Coding-To-Interfaces",
        "createdAt": "2015-08-22T02:38:58.694Z",
        "objectId": "kSPNxYYdv9",
        "updatedAt": "2015-08-22T02:38:58.694Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_data",
        "Lesson": {
            "courseCode": "spring_data",
            "courseName": "Data access in Spring",
            "description": "We'll now implement a simple DAO class that fetches data from the database using JDBC. We'll look at all the boilerplate code we need to write to establish connections, execute queries, close objects and handle exceptions.",
            "nextLessonPermalinkName": "Adding-Spring-and-DataSource-Configuration",
            "permalinkName": "Using-JDBC-without-Spring",
            "prevLessonPermalinkName": "Introduction-to-Spring-Data-and-Setting-Up",
            "title": "Using JDBC without Spring",
            "unitSlNo": "1.2",
            "youtube": "B3gEbC37DAM"
        },
        "Permalink": "Using-JDBC-without-Spring",
        "createdAt": "2015-08-22T02:38:58.598Z",
        "objectId": "kjEVSsjCDa",
        "updatedAt": "2015-08-22T02:38:58.598Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "We'll learn about named queries and how to write and access named queries. We'll also write and execute a NamedNativeQuery.",
            "nextLessonPermalinkName": "Introduction-to-Criteria-API",
            "permalinkName": "Named-Queries",
            "prevLessonPermalinkName": "Understanding-Parameter-Binding-and-SQL-Injection",
            "title": "Named Queries",
            "unitSlNo": "2.4",
            "youtube": "o_P-p2b_k6w"
        },
        "Permalink": "Named-Queries",
        "createdAt": "2015-08-22T02:38:58.705Z",
        "objectId": "lCvEtTFeug",
        "updatedAt": "2015-08-22T02:38:58.705Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Welcome to this course. This tutorial introduces you to REST APIs and explains some basic concepts.",
            "nextLessonPermalinkName": "REST-and-HTTP",
            "permalinkName": "introduction",
            "sections": [
                {
                    "content": "\u003ch2 id=\"welcome\"\u003eWelcome\u003c/h2\u003e\n\u003cp\u003eHello! Welcome to this course on Developing RESTful APIs with JAX-RS. I\u0026#39;m Koushik Kothagal, and in this course, I\u0026#39;ll teach you how to write RESTful web service applications using JAX-RS.\u003c/p\u003e\n\u003cp\u003eTo learn how to write RESTful APIs using JAX-RS, you\u0026#39;ll need to learn 2 things: First, you\u0026#39;ll need to learn about RESTful APIs or RESTful web services, and second, you\u0026#39;ll need to learn how to implement them using JAX-RS. \u003c/p\u003e\n\u003cp\u003eAccordingly, this course is split into two important sections. The first few tutorials in this course introduce you to RESTful web services, explain the concepts and best practices. There are a few standard things to keep in mind when building RESTful web services. You\u0026#39;ll learn about them first. I’ll also walk you through developing a REST API for a sample application. We’ll build a simple social media messaging application through out this course. The application will have some basic functionality of similar sites like Facebook or Google Plus. \u003c/p\u003e\n\u003cp\u003eAfter learning the concepts, we’ll implement some of the features of this social media messaging web service applications using Java and JAX-RS. We\u0026#39;ll add features as we learn more about JAX-RS itself, and we\u0026#39;ll write code as we go, to implement these features.\u003c/p\u003e\n\u003cp\u003eRestful web services have recently grown in popularity. I think now is a great time to learn about and work on Restful web services. I hope you are excited to get started!\u003c/p\u003e\n\u003ch2 id=\"web-services-in-a-nutshell\"\u003eWeb services in a nutshell\u003c/h2\u003e\n\u003cp\u003eWeb services are services that are exposed on the internet for programmatic access. They are online APIs that you can call from your code. To call an API when writing Java code, you add the jars or classes in your class path. Everything executes on a single machine. In the case of web services, you have different pieces of code deployed in different machines and calling methods of each other over the network. \u003c/p\u003e\n\u003cp\u003eYou must have seen different Facebook or Twitter apps. Or games that can post to your Facebook wall. Even though the games are not designed by Facebook. How can they do that? They do that by calling online APIs. Companies like Facebook  and Twitter publish web services that let other developers call them from their code. So, other application developers can write code to consume these services and do things on Facebook or Twitter itself. \u003c/p\u003e\n\u003cp\u003eIn a way, they are similar to web pages. For example, Twitter has a web site at twitter.com. When you access it, you get HTML response that lets you read and write tweets. They have some HTML elements for data as well as styling with CSS. That\u0026#39;s because they are meant for humans to read and consume. But, Twitter also has this different URL called api.twitter.com that does a lot of the same things as twitter.com, but it behaves a bit differently. For instance, it does not have HTML and CSS. Any data it returns is in XML or JSON format. And there are specific URLs for different operations. This is what the developers can use from their code, to read data and write data to Twitter. Since it deals with just barebones data, they can just parse the data and build up their objects and data structures. There\u0026#39;s no need for all the fancy HTML and CSS. \u003c/p\u003e\n\u003cp\u003eThis second part is what we\u0026#39;ll be learning to build in this course. The online APIs. Of course, there are many ways to build such online APIs or web services. One way is to build them as RESTful web services. RESTful web services are a type of web services that are modern, light-weight, and use a lot of the concepts behind HTTP, the technology that drives the web. There is another type of web services that you can choose to write your services in, and that\u0026#39;s called SOAP web services. There is a separate Java Brains course on SOAP web services \u003ca href=\"/courses/javaee_jaxws\"\u003ehere\u003c/a\u003e. This course is going to be about REST.\u003c/p\u003e\n\u003ch2 id=\"web-services-characteristics\"\u003eWeb services characteristics\u003c/h2\u003e\n\u003cp\u003eWhen we talk about web services, there are a few characteristics about them that we have to keep in mind. First, they are \u003cem\u003eweb\u003c/em\u003e services, so the exchange of data happens over the web. Over HTTP. A client sends an HTTP request, and the server returns back an HTTP response. Similar to web sites. But like we discussed, instead of the response being complete web pages, only the data is returned, because the client is just a program, and not a human. The client could then have it’s own logic to present the data to the users in a presentable format, but the exchange between the web service client and web service server is usually just bare-bones data.\u003c/p\u003e\n\u003cp\u003eThe next characteristic of web services is the protocol used. Now what’s a protocol? When a web service client makes a request to a web service endpoint, they are usually messages transmitted from one machine to another. These messages need to be in a format, a language, that both the client and the server can understand. This language, or protocol, is standardized in some web service types. For example, SOAP web services is a type of web services, where the protocol always has to follow the standard called SOAP. All SOAP web services uses this protocol to communicate with clients. It used to stand for Simple Object Access Protocol. But that name is now discontinued and we are stuck with just the acronym. There is a specific format, which is XML, and there are specific rules which detail how that XML should be. The client and the server needs to talk to each other using this SOAP protocol \u003cem\u003eonly\u003c/em\u003e!   \u003c/p\u003e\n\u003cp\u003eOk, so what’s the protocol for REST? Well, there is none! Yes, a REST client can send messages in XML. Or it can send messages in JSON format! Or text format! There are no rules. As long as the client and server understand each other, everybody is happy.\u003c/p\u003e\n\u003cp\u003eSecondly, let’s look at how the communication happens. We saw that since RESTful web services are \u003cem\u003eweb\u003c/em\u003e services, the request and response messages are almost always exchanged over HTTP. But in HTTP, there are different \u003cem\u003emethods\u003c/em\u003e available. You would have heard of GET, POST PUT and so on. Which methods to you need to use? What’s the standard for REST? \u003c/p\u003e\n\u003cp\u003eWell, the answer is, there is none. Messages can be exchanged in any (or all) HTTP methods. There are guidelines and best practices that tells you what methods need to be used when designing the service, depending on what the request is, but there is no \u003cem\u003erule\u003c/em\u003e as such.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s look at the next characteristic: service definition. When you are coding and you need to call a method of a library class, you need to know certain things. The name of the class, the method name, the input arguments and so on. When you call web services, a similar concept applies. You need to know what the method does, what the input arguments are and what the return type is. You need to know the \u003cstrong\u003eservice definition\u003c/strong\u003e. In the SOAP web services world, every web service provider publishes a formal document called WSDL that contains all the details that any client would ever need to know about the web service. This is again in XML, and it needs have a specific structure. It contains details about the methods available, the input and output types and so on. Every client has all the details they’d need.\u003c/p\u003e\n\u003cp\u003eWhat’s the formal document that specifies the service definition details for REST web services? I’m pretty sure you can guess the answer to this one. Yes, you are right. There is none! Most Restful web services come with an informal README document written not in XML but in readable English. Many of them don’t even have documentation. In fact, the best RESTful web services would not even need any documentation, formal or informal. We’ll talk about this topic later.\u003c/p\u003e\n\u003cp\u003eWe could go on with this comparison, but let’s stop here. You get the idea. You are probably wondering if this is really true. Is it really the case? Does the RESTful web services have any \u003cem\u003erules\u003c/em\u003e at all? Could my grandmother have written a RESTful web service? Based on what we have seen so far, anything goes! There are no rules. In contrast, SOAP web services have strict rules for each of these characteristics we\u0026#39;ve seen. So, what’s going on here?\u003c/p\u003e\n\u003cp\u003eThe reason for this kind of a difference is simple. All SOAP web services follow this thing called the SOAP specification. This specification is a set of rules that dictate what a SOAP web service should be. This was designed by a committee, and it is still maintained by the committee. The specification lays out all the rules, including the rules we just discussed. If a web service doesn’t follow even one of these rules, it is, by definition, \u003cstrong\u003enot\u003c/strong\u003e a SOAP web service. As simple as that.\u003c/p\u003e\n\u003cp\u003eRESTful web services, on the other hand, does not have any specification! It is a concept. An idea. There is no specification, and no committee to tell you what’s right and what’s wrong. The term REST was first introduced by a guy named Roy Fielding in his doctoral thesis back in the year 2000. REST stands for REpresentational State Transfer, and it is not really about web services at all!\u003c/p\u003e\n\u003ch2 id=\"representational-state-transfer\"\u003eRepresentational state transfer\u003c/h2\u003e\n\u003cp\u003eRepresentational state transfer is actually an architecture style. Say, you are working on the architecture of a new application. There are certain decisions you’ll need to make. Certain criteria you need to think about. REST consists of a coordinated set of these criteria and constraints that you can use to guide you in the application architecture. It is a set of guidelines. It is a style of architecture.\u003c/p\u003e\n\u003cp\u003eYou can use this style for any application. However, if you apply this style and these guidelines when architecting a web service, you have \u003cem\u003edrum roll\u003c/em\u003e Restful web services. There in lies the difference. Unlike SOAP web services, you don’t have any strict rulebooks to follow when it comes to Restful web services. You can have a spectrum. It is common to hear people say some web service is \u003cem\u003ecompletely Restful\u003c/em\u003e, and some other web service is \u003cem\u003enot fully RESTful\u003c/em\u003e. Really! And the goal when building RESTful web services is to make it as \u003cem\u003eRESTful\u003c/em\u003e as practically possible. \u003c/p\u003e\n\u003cp\u003eIn the next tutorials, we’ll start learning more about these constraints and understand what good RESTful web services look like and why.\u003c/p\u003e\n",
                    "id": "VCcJ6fV3C0",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "Introduction",
            "unitSlNo": "1.1",
            "youtube": "xkKcdK1u95s"
        },
        "Permalink": "introduction",
        "createdAt": "2015-08-22T02:38:58.823Z",
        "objectId": "lHWBBeK0lT",
        "updatedAt": "2015-08-22T02:38:58.823Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "This tutorial covers the concepts of Bean Scopes in Spring. We'll understand when beans are created and how to configure different scopes for the beans.",
            "nextLessonPermalinkName": "Using-ApplicationContextAware",
            "permalinkName": "Understanding-Bean-Scopes",
            "prevLessonPermalinkName": "Bean-Autowiring",
            "title": "Understanding Bean Scopes",
            "unitSlNo": "2.1",
            "youtube": "NnNvDknQJt0"
        },
        "Permalink": "Understanding-Bean-Scopes",
        "createdAt": "2015-08-22T02:38:58.700Z",
        "objectId": "lW41iSgNU8",
        "updatedAt": "2015-08-22T02:38:58.700Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "In this tutorial, we'll add the additional dependencies required for Spring AOP and we'll configure our project's class path with these dependencies.",
            "nextLessonPermalinkName": "Writing-Our-First-Aspect-Part-1",
            "permalinkName": "Setting-Up-AOP-Dependencies",
            "prevLessonPermalinkName": "Introduction-to-AOP",
            "title": "Setting Up AOP Dependencies",
            "unitSlNo": "1.2",
            "youtube": "4P0TME-AbSw"
        },
        "Permalink": "Setting-Up-AOP-Dependencies",
        "createdAt": "2015-08-22T02:38:58.689Z",
        "objectId": "mBqqN1RSwn",
        "updatedAt": "2015-08-22T02:38:58.689Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "Here we'll have our first look at Spring annotations. We'll understand and implement the Required annotation, and we'll also learn how it's actually a BeanPostProcessor that's working behind the scenes.",
            "nextLessonPermalinkName": "The-Autowired-Annotation",
            "permalinkName": "Introduction-to-Annotations-and-the-Required-Annotation",
            "prevLessonPermalinkName": "Coding-To-Interfaces",
            "title": "Introduction to Annotations and the Required Annotation",
            "unitSlNo": "3.1",
            "youtube": "Fs_IoEGSP-A"
        },
        "Permalink": "Introduction-to-Annotations-and-the-Required-Annotation",
        "createdAt": "2015-08-22T02:38:58.680Z",
        "objectId": "mEgUF8McVl",
        "updatedAt": "2015-08-22T02:38:58.680Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_aop",
        "Lesson": {
            "courseCode": "spring_aop",
            "courseName": "Understanding Spring AOP",
            "description": "We'll learn about the After Advice types: `After` (finally), `AfterReturning` and `AfterThrowing`.",
            "nextLessonPermalinkName": "Around-Advice-Type",
            "permalinkName": "After-Advice-Types",
            "prevLessonPermalinkName": "JoinPoints-and-Advice-Arguments",
            "title": "After Advice Types",
            "unitSlNo": "2.6",
            "youtube": "tU6eQh9Hmqk"
        },
        "Permalink": "After-Advice-Types",
        "createdAt": "2015-08-22T02:38:58.692Z",
        "objectId": "mJLDRh3bCg",
        "updatedAt": "2015-08-22T02:38:58.692Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "We'll use the web application archetype to create a barebones web application. We'll then package, deploy in Tomcat and access this application.",
            "nextLessonPermalinkName": "Introduction-to-Plugins-with-the-Maven-Compiler-Plugin",
            "permalinkName": "A-Web-Application-Using-Maven",
            "prevLessonPermalinkName": "Adding-a-Dependency",
            "title": "A Web Application Using Maven",
            "unitSlNo": "2.4",
            "youtube": "mpNnbBmh5J4"
        },
        "Permalink": "A-Web-Application-Using-Maven",
        "createdAt": "2015-08-22T02:38:58.521Z",
        "objectId": "mP0pLZ6waA",
        "updatedAt": "2015-08-22T02:38:58.521Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, you'll learn about the Web Service Explorer tool that come with Eclipse to test and examine web services.",
            "nextLessonPermalinkName": "Using-Endpoint",
            "permalinkName": "Using-Web-Service-Explorer",
            "prevLessonPermalinkName": "Using-SoapUI",
            "title": "Using Web Service Explorer",
            "unitSlNo": "3.2",
            "youtube": "73YeFMmzBts"
        },
        "Permalink": "Using-Web-Service-Explorer",
        "createdAt": "2015-08-22T02:38:58.717Z",
        "objectId": "mZb3s1UWrx",
        "updatedAt": "2015-08-22T02:38:58.717Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Having understood the important elements of the WSDL, we'll now learn some annotations that help us configure and override the various defaults that are used when the WSDL is generated.",
            "nextLessonPermalinkName": "Schema-Types-and-Binding-Styles",
            "permalinkName": "Customizing-the-WSDL",
            "prevLessonPermalinkName": "Understanding-the-WSDL",
            "title": "Customizing the WSDL",
            "unitSlNo": "2.7",
            "youtube": "xq2zi_UWzUE"
        },
        "Permalink": "Customizing-the-WSDL",
        "createdAt": "2015-08-22T02:38:58.678Z",
        "objectId": "n1fiYkM9cX",
        "updatedAt": "2015-08-22T02:38:58.678Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "Let us understand few of the most important concepts and terminologies used in web service technology.",
            "nextLessonPermalinkName": "Writing-a-Web-service-Client---Stub-generation",
            "permalinkName": "Web-Service-Jargon",
            "prevLessonPermalinkName": "Introduction-to-Web-Services",
            "title": "Web Service Jargon",
            "unitSlNo": "1.2",
            "youtube": "C53G6R5EVys"
        },
        "Permalink": "Web-Service-Jargon",
        "createdAt": "2015-08-22T02:38:58.610Z",
        "objectId": "nHo50l3ppy",
        "updatedAt": "2015-08-22T02:38:58.610Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "We've looked at requests so far, and understood resource URIs and HTTP methods. Let's switch to responses now.",
            "nextLessonPermalinkName": "HATEOAS",
            "permalinkName": "Rest-Response",
            "prevLessonPermalinkName": "Idempotence-In-HTTP-Methods",
            "sections": [
                {
                    "content": "\u003cp\u003eWe've looked at requests so far, and understood resource URIs and HTTP methods. Let's switch to responses now.\u003c/p\u003e\n\n\u003ch2 id=\"fromrequeststoresponses\"\u003eFrom requests to responses\u003c/h2\u003e\n\n\u003cp\u003eWe've learned where to make requests (resource URIs) and how to make requests (HTTP methods). Time to look at responses now. When a request comes in, what should the REST web service respond with? Knowing what the client will get back from the server is an important part of the API, because the client needs to write code to handle the response.\u003c/p\u003e\n\n\u003cp\u003eIf it were a web application, we know the response is usually an HTML page. With styling, formatting and also, of course, the actual data in a presentable format. But when it comes to RESTful web services, you don't need to do all the styling and formatting anymore. You just need to send the actual data. How do you send it?\u003c/p\u003e\n\n\u003cp\u003eWe discussed about various standard formats that responses can be sent in, like XML and JSON. JSON has been growing in popularity, because it is much more compact and less verbose when compared to XML, especially when large data is involved. Also, more often than not, a client to a RESTful API is client side Javascript code, and sending back data in JSON means it can easily convert it to a Javascript object. Considering these advantages, we'll choose JSON as response for our social media application in this course. However, note that you do not typically need to settle for just one format. You can write APIs to support multiple response formats, and we will implement one such API endpoint later in this course to illustrate that.\u003c/p\u003e\n\n\u003ch2 id=\"formats\"\u003eFormats\u003c/h2\u003e\n\n\u003cp\u003eLet's say our Message entity class has these four member variables: the id, the text of the message, when it was created and who created it.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"java\"\u003epublic class MessageEntity {\n    private long id;\n    private String message;\n    private Date created;\n    private String author;\n...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen a GET request is made for a specific message, say message ID 10, the JSON that you would return would look something like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e{\n    \u0026quot;id\u0026quot;:\u0026quot;10\u0026quot;,\n    \u0026quot;message\u0026quot;:\u0026quot;Hello world\u0026quot;,\n    \u0026quot;created\u0026quot;:\u0026quot;2014-06-01T18:06:36.902\u0026quot;,\n    \u0026quot;author\u0026quot;:\u0026quot;koushik\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBut the response doesn't \u003cem\u003ehave\u003c/em\u003e to be JSON. You could return XML as well, if the client asks for it in XML format. We haven't yet covered how a client can \u003cem\u003eask\u003c/em\u003e for a specific format. We'll be looking at that later. But yes, a client can say \u0026quot;I need a JSON response\u0026quot; or \u0026quot;Give me an XML response\u0026quot;. Here is a possible XML response for the same message ID 10.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;messageEntity\u0026gt;\n    \u0026lt;id\u0026gt;10\u0026lt;/id\u0026gt;\n    \u0026lt;message\u0026gt;Hello world\u0026lt;/message\u0026gt;\n    \u0026lt;created\u0026gt;2014-06-01T18:06:36.902\u0026lt;/created\u0026gt;\n    \u0026lt;author\u0026gt;koushik\u0026lt;/author\u0026gt;\n\u0026lt;/messageEntity\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eClearly the JSON response and the XML response are different. But they represent the same resource: message ID 10. So, in other words both these responses are different representations of the same resource. This is a very important thing to remember. When you make REST API calls you are sending or receiving \u003cem\u003erepresentations\u003c/em\u003e of the resource. Different representations could have different formats, even though the underlying resource is the same. This is actually how REST gets its name. Representational State Transfer. You are transferring the representational state.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen you make REST API calls you are sending or receiving \u003cem\u003erepresentations\u003c/em\u003e of the resource.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"messageheaders\"\u003eMessage Headers\u003c/h2\u003e\n\n\u003cp\u003eOk, so it's great that a REST web service can return data in XML or JSON. But that brings up a problem. How does the client know what format the response is in? The client can of course request data in a particular format, but there's no guarantee that the service responds in that format. Say, a client request asks for XML. But if the REST service knows only JSON, it does return JSON ignoring the client's preference for XML. How does the client know the format then?\u003c/p\u003e\n\n\u003cp\u003eThe answer is using HTTP headers. The HTTP protocol has a concept of request and response headers. Every HTTP request or response has a body, which is the message itself, and certain header values that contain metadata about the message. The header data could be stuff like the content length and date. One such possible header is \u003ccode\u003eContent-Type\u003c/code\u003e. The response could contain the Content-Type header with the value for JSON or XML. There are special values for JSON and XML, and we'll learn more about that when we implement this, but for now, know that the type of content is being sent back as a response header. The client can then examine this header value and then parse the response body content accordingly.\u003c/p\u003e\n\n\u003ch2 id=\"statuscodes\"\u003eStatus codes\u003c/h2\u003e\n\n\u003cp\u003eThink about error messages in a web application. Whens something goes wrong, the application typically returns a page with an error message, maybe in bold red text. Even if it isn't in red, the message itself would give the user an idea that it's an error. But in the case of REST APIs, since the consumer is not a human, we need to provide some set of codes to the consumer to help them identify error scenarios. \u003c/p\u003e\n\n\u003cp\u003eHTTP specification requires the very first line of any response to be a \u003cem\u003estatus line\u003c/em\u003e. This line will have a numerical code and a short phrase explaining what the code means. This is not just for errors. Every HTTP response needs to have this line. If the response is successful, the very first line of the response will be:\n\u003ccode\u003e200 OK\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take the familiar 404 error code. If a request is made on a URI, for example \u003ccode\u003e/messages/101\u003c/code\u003e and there is no message available with ID 101, the first line of the response should be:\n\u003ccode\u003e404 Not Found\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eAgain, the code \u003ccode\u003e404\u003c/code\u003e is for the client code to read and act. The phrase \u003ccode\u003eNot Found\u003c/code\u003e is an aid to the programmer, in case they forget what the code means. Not that any programmer would ever forget what \u003ccode\u003e404\u003c/code\u003e means. I mean, come on!\u003c/p\u003e\n\n\u003cp\u003eThere are a bunch of codes that are important for us to remember and use when developing a REST API. The error codes start from 100 and go up to 599. Not all of them are valid error codes though, so you don't have 500 different possible error codes. There are 5 classes of status codes and the first digit indicates what class the code belongs to: 1 to 5.\u003c/p\u003e\n\n\u003ch2 id=\"1xxcodes-informational\"\u003e1XX Codes - Informational\u003c/h2\u003e\n\n\u003cp\u003eThe codes starting with 1XX are informational, like acknowledgement responses. We'll not be using this set of codes in this course.\u003c/p\u003e\n\n\u003ch2 id=\"2xxcodes-success\"\u003e2XX Codes - Success\u003c/h2\u003e\n\n\u003cp\u003eThe codes starting with 2XX are success codes. This indicates that the server received the request from the client and processed it successfully. Some examples:\u003c/p\u003e\n\n\u003ch3 id=\"200ok\"\u003e200 OK\u003c/h3\u003e\n\n\u003cp\u003eIndicates successful response. You'd return this for any request that you can successfully respond to.\u003c/p\u003e\n\n\u003ch3 id=\"201created\"\u003e201 Created\u003c/h3\u003e\n\n\u003cp\u003eIndicates successful resource creation. Say you get a POST request for a collection URI like \u003ccode\u003e/messages\u003c/code\u003e and you successfully create a new message. You could return \u003ccode\u003e200 OK\u003c/code\u003e to indicate success, but a better response code would be \u003ccode\u003e201 Created\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"204nocontent\"\u003e204 No Content\u003c/h3\u003e\n\n\u003cp\u003eSometimes the server receives requests that need it to do something, but it doesn't need to return any content back. Like DELETE requests, for example. In this case, you could either return \u003ccode\u003e200 OK\u003c/code\u003e with no response content. Or return \u003ccode\u003e204 No Content\u003c/code\u003e, which makes it obvious that the server really intends to send nothing back.\u003c/p\u003e\n\n\u003ch2 id=\"3xxcodes-redirection\"\u003e3XX Codes - Redirection\u003c/h2\u003e\n\n\u003cp\u003eThe server sends these codes to ask the client to do further action to complete the request. For example, it could be a redirect, asking the client to send the request somewhere else. \u003c/p\u003e\n\n\u003ch3 id=\"302foundand307temporaryredirect\"\u003e302 Found and 307 Temporary Redirect\u003c/h3\u003e\n\n\u003cp\u003eOne of these two error codes are returned by the server if it wants the client to request elsewhere. It's a redirect.\u003c/p\u003e\n\n\u003ch3 id=\"304notmodified\"\u003e304 Not Modified\u003c/h3\u003e\n\n\u003cp\u003eWhen a client tries to get a resource that it has already got before, the server can send this status code to say \u0026quot;I've already given you this resource a little while back, and nothing has changed since then.\u0026quot;\u003c/p\u003e\n\n\u003ch2 id=\"4xxcodes-clienterror\"\u003e4XX Codes - Client error\u003c/h2\u003e\n\n\u003cp\u003eThese error codes are returned if the client makes an error in the request. The request syntax could have been incorrect, or the client is requesting something that it's not supposed to see.\u003c/p\u003e\n\n\u003ch3 id=\"400badrequest\"\u003e400 Bad Request\u003c/h3\u003e\n\n\u003cp\u003eThis is a client error. The server is not able to understand the request\u003c/p\u003e\n\n\u003ch3 id=\"401unauthorized\"\u003e401 Unauthorized\u003c/h3\u003e\n\n\u003cp\u003eThe request needs the client to \u003cem\u003esign in\u003c/em\u003e or authorize themselves.\u003c/p\u003e\n\n\u003ch3 id=\"403forbidden\"\u003e403 Forbidden\u003c/h3\u003e\n\n\u003cp\u003eThe client may have authorized, but they are still not allowed to make the request. (Maybe they don't have the right access rights).\u003c/p\u003e\n\n\u003ch3 id=\"404notfound\"\u003e404 Not Found\u003c/h3\u003e\n\n\u003cp\u003eNo description required. :)\u003c/p\u003e\n\n\u003ch3 id=\"415unsupportedmediatype\"\u003e415 Unsupported Media Type\u003c/h3\u003e\n\n\u003cp\u003eThe client is speaking in a language that the server cannot understand\u003c/p\u003e\n\n\u003ch2 id=\"5xxcodes-servererror\"\u003e5XX Codes - Server error\u003c/h2\u003e\n\n\u003cp\u003eThe 4XX codes are when the client screws up when sending the request. The 5XX codes are when the server screws up when sending the response. It's basically the server saying, Ok, I got your request, and it looked like a valid one, but something went wrong when I tried to process it.\u003c/p\u003e\n\n\u003ch3 id=\"500internalservererror\"\u003e500 Internal Server Error\u003c/h3\u003e\n\n\u003cp\u003eThis is a generic error code. The server gets a request. The resource exists (or you'd send a 404 instead) but something went wrong when processing the request. In such cases, the standard practice is to send the error code 500, along with error details in the body of the request.\u003c/p\u003e\n\n\u003cp\u003eThere are a bunch of other codes, but these are the important ones to remember. We'll look at more when we start implementing some of these APIs. But let me remind you again. These error codes are for you, as a web service developer to use. The clients know what it means when they see one of these error codes. So, it's up to you to send the right error codes when these events happen. For example, let's say you get a runtime exception when processing a request. You need to send back error code 500. Because it means server error. And the client will then know what's happened.\u003c/p\u003e\n\n\u003ch2 id=\"scenarios\"\u003eScenarios\u003c/h2\u003e\n\n\u003cp\u003eLet's look at the same CRUD use cases we saw in the previous tutorial, and identify what the status codes should be for the message resource\u003c/p\u003e\n\n\u003ctable\u003e\n\u003ccolgroup\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:center;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003ccol style=\"text-align:left;\"/\u003e\n\u003c/colgroup\u003e\n\n\u003cthead\u003e\n\u003ctr\u003e\n\t\u003cth style=\"text-align:left;\"\u003eOperation\u003c/th\u003e\n\t\u003cth style=\"text-align:center;\"\u003eURI\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eMethod\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eSuccess / Failure\u003c/th\u003e\n\t\u003cth style=\"text-align:left;\"\u003eStatus code\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGet message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eGET\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDelete message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eDELETE\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200 or 204\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eEdit message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePUT\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eNot found\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e404\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eCreate message\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003ccode\u003e/messages\u003c/code\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003ePOST\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eSuccess\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e201\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eWrong format / data\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e400 or 415\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:center;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003eFailure\u003c/td\u003e\n\t\u003ctd style=\"text-align:left;\"\u003e500\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHope this gives you a better idea of the status codes to be returned. Responses for other resources would mostly follow the same pattern. Again, this is just a small subset of the HTTP status codes, and we'll look at more when we start implementing APIs.\u003c/p\u003e\n\n\u003cp\u003eIn this tutorial, we learnt about:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eResource representations\u003c/li\u003e\n\u003cli\u003eMessage headers in HTTP and\u003c/li\u003e\n\u003cli\u003eHTTP status codes\u003c/li\u003e\n\u003c/ol\u003e",
                    "id": "Qtm91GkUBz",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "REST Response",
            "unitSlNo": "1.7",
            "youtube": "ZyuPCYB-n5o"
        },
        "Permalink": "Rest-Response",
        "createdAt": "2015-08-22T02:38:58.828Z",
        "objectId": "oIlWCSvLhU",
        "updatedAt": "2015-08-22T02:38:58.828Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "We'll add an operation to our web service that takes input arguments to achieve both sending and receiving data from the web service.",
            "nextLessonPermalinkName": "Service-First-and-Contract-First-Web-Services",
            "permalinkName": "Adding-Input-Arguments",
            "prevLessonPermalinkName": "Writing-a-Web-Service---Code-and-Deploy",
            "title": "Adding Input Arguments",
            "unitSlNo": "2.4",
            "youtube": "HLzM92ZnisY"
        },
        "Permalink": "Adding-Input-Arguments",
        "createdAt": "2015-08-22T02:38:58.603Z",
        "objectId": "oMBRDPgApI",
        "updatedAt": "2015-08-22T02:38:58.603Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll write and execute our first JSP file.",
            "nextLessonPermalinkName": "Understanding-the-JSP",
            "permalinkName": "Hello-JSP",
            "title": "Hello JSP",
            "unitSlNo": "1.1",
            "youtube": "WCbwBHXUx0k"
        },
        "Permalink": "Hello-JSP",
        "createdAt": "2015-08-22T02:38:59.142Z",
        "objectId": "ocxFF3ptnD",
        "updatedAt": "2015-08-22T02:38:59.142Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "We'll now use the Component annotation to define Spring beans. We'll also look at some Stereotype annotations.",
            "nextLessonPermalinkName": "Using-MessageSource-To-Get-Text-From-Property-Files",
            "permalinkName": "Component-and-Stereotype-Annotations",
            "prevLessonPermalinkName": "Some-JSR-250-Annotations",
            "title": "Component and Stereotype Annotations",
            "unitSlNo": "3.4",
            "youtube": "oTcSW4-_1Ew"
        },
        "Permalink": "Component-and-Stereotype-Annotations",
        "createdAt": "2015-08-22T02:38:58.727Z",
        "objectId": "ofn1gKkrjg",
        "updatedAt": "2015-08-22T02:38:58.727Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, we'll use the stubs generated by wsimport and implement a client application. Our IPServiceLocator program takes IP address as an input argument and makes a call to the web service to display the country name to the console.",
            "nextLessonPermalinkName": "Setting-up-Java-EE-7-SDK",
            "permalinkName": "Writing-a-Web-service-Client---Calling-the-Service",
            "prevLessonPermalinkName": "Writing-a-Web-service-Client---Stub-generation",
            "title": "Writing a Web service Client - Calling the Service",
            "unitSlNo": "1.4",
            "youtube": "KFlDdb65w3U"
        },
        "Permalink": "Writing-a-Web-service-Client---Calling-the-Service",
        "createdAt": "2015-08-22T02:38:58.614Z",
        "objectId": "ojSyLb1HOw",
        "updatedAt": "2015-08-22T02:38:58.614Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll introduce the Model object to pass data between layers.",
            "nextLessonPermalinkName": "Using-RequestDispatcher-in-the-MVC-Application",
            "permalinkName": "Using-Model-object-in-the-MVC-Application",
            "prevLessonPermalinkName": "Writing-an-MVC-Application-Part-2",
            "title": "Using Model object in the MVC Application",
            "unitSlNo": "2.7",
            "youtube": "WxeY-LxMIbE"
        },
        "Permalink": "Using-Model-object-in-the-MVC-Application",
        "createdAt": "2015-08-22T02:38:59.148Z",
        "objectId": "pf3daRojrT",
        "updatedAt": "2015-08-22T02:38:59.148Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll understand what the JSP file is and how it gets converted to a servlet.",
            "nextLessonPermalinkName": "JSP-Page-Directives",
            "permalinkName": "Understanding-the-JSP",
            "prevLessonPermalinkName": "Hello-JSP",
            "title": "Understanding the JSP",
            "unitSlNo": "1.2",
            "youtube": "Ycf_GQbPqKI"
        },
        "Permalink": "Understanding-the-JSP",
        "createdAt": "2015-08-22T02:38:59.152Z",
        "objectId": "psfkZ07Hq4",
        "updatedAt": "2015-08-22T02:38:59.152Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Let's now look under the hood and understand how the REST API application works. We'll understand some of the components that handle the API requests and how they fit together.",
            "nextLessonPermalinkName": "Creating-A-Resource",
            "permalinkName": "Understanding-The-Application-Structure",
            "prevLessonPermalinkName": "Setting-Up",
            "title": "Understanding The Application Structure",
            "unitSlNo": "2.3",
            "youtube": "rKSnB3Bl12w"
        },
        "Permalink": "Understanding-The-Application-Structure",
        "createdAt": "2015-08-22T02:38:58.917Z",
        "objectId": "qG9hHIumLc",
        "updatedAt": "2015-08-22T02:38:58.917Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "We'll understand the concept of namespaces when mapping Struts 2 actions. We'll configure a namespace, and also understand the default '/' namespace.",
            "nextLessonPermalinkName": "A-Tag-And-A-Business-Service",
            "permalinkName": "Understanding-Namespaces",
            "prevLessonPermalinkName": "Writing-a-Struts-2-Application-Part-2",
            "title": "Understanding Namespaces",
            "unitSlNo": "3.1",
            "youtube": "BlFHGscURC4"
        },
        "Permalink": "Understanding-Namespaces",
        "createdAt": "2015-08-22T02:38:58.829Z",
        "objectId": "qSyPZ3SOQt",
        "updatedAt": "2015-08-22T02:38:58.829Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll learn about and write our own BeanFactoryPostProcessor. We'll also try out a handy BeanFactoryPostProcessor that comes with Spring: the PropertyPlaceholderConfigurer.",
            "nextLessonPermalinkName": "Coding-To-Interfaces",
            "permalinkName": "Writing-a-BeanFactoryPostProcessor",
            "prevLessonPermalinkName": "Writing-a-BeanPostProcessor",
            "title": "Writing a BeanFactoryPostProcessor",
            "unitSlNo": "2.6",
            "youtube": "szNWTBlewQI"
        },
        "Permalink": "Writing-a-BeanFactoryPostProcessor",
        "createdAt": "2015-08-22T02:38:58.676Z",
        "objectId": "qpM5KJUf0j",
        "updatedAt": "2015-08-22T02:38:58.676Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "We'll configure EHCache as our second level cache, and then put it to work. We'll fetch an object across two sessions, and we'll see how Hibernate's second level cache comes into play to save a database query.",
            "nextLessonPermalinkName": "Using-Query-Cache",
            "permalinkName": "Configuring-Second-Level-Cache",
            "prevLessonPermalinkName": "Cacheing-in-Hibernate",
            "title": "Configuring Second Level Cache",
            "unitSlNo": "3.2",
            "youtube": "TMZZg-HEjiE"
        },
        "Permalink": "Configuring-Second-Level-Cache",
        "createdAt": "2015-08-22T02:38:58.735Z",
        "objectId": "rCIdl4t9NS",
        "updatedAt": "2015-08-22T02:38:58.735Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we’ll start designing a sample RESTful API for our sample social media application. And through the process, we’ll understand how RESTful URIs are designed.",
            "nextLessonPermalinkName": "RESTful-URI-types",
            "permalinkName": "Designing-Resource-URIs",
            "prevLessonPermalinkName": "REST-and-HTTP",
            "sections": [
                {
                    "content": "\u003cp\u003eIn this tutorial, we’ll start designing a sample RESTful API for our sample social media application. And through the process, we’ll understand how RESTful URIs are designed.\u003c/p\u003e\n\u003cp\u003eNote that the next few tutorials are going to be all about design. We will understand what a good API looks like. We will start coding much later, so if you want to get started with the implementation, you can skip these API design tutorials. But remember, an important thing that makes good REST APIs is how well its designed. So, in my opinion, understanding REST API design is more important than learning how to actually implement them.\u003c/p\u003e\n\u003cp\u003eThe app we are building in this course is gonna be called Messenger. It\u0026#39;s a social media application that lets people post messages as status updates. They can also write comments on other messages or like other messages ala Facebook. Users also have user profile information that they can create and update.\u003c/p\u003e\n\u003cp\u003eA very simple application with a very simple ER diagram. You have a USER table with user information. And a MESSAGES table that contains all messages anyone ever posted, each row referring to a USER who posted it. And finally, COMMENTS and LIKES tables which refer to the message that\u0026#39;s being commented or liked. And the user who has entered the comment or hit \u0026#39;like\u0026#39;.\u003c/p\u003e\n\u003cp\u003eThis is going to be the core of the Messenger application. Let\u0026#39;s look at what URIs you\u0026#39;d design for this application. We want to design RESTful \u0026quot;resource based\u0026quot; URIs. How do we do that?\u003c/p\u003e\n\u003cp\u003eIf this were to be a web application, I’m sure you already know what to do. Say we need a page to view a message. It takes in a message ID and it displays that message. The URL could be anything of your choice. It could even depend on the framework you use. Let’s say you use Struts. The URI to get post ID 10 could be something like this:\n\u003ccode\u003e/MyApp/getMessages.do?id=10\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOr it could be:\n\u003ccode\u003e/MyApp/retrieveMessages.action?postId=10\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThese are perfectly valid URIs. And honestly, when developing web applications, what URI you use doesn\u0026#39;t matter. Because, as long as you provide the links to the user in your web app, the user is just going to click on the link and retrieve the message. They rarely have to worry about the URL itself.\u003c/p\u003e\n\u003cp\u003eHowever, when writing REST APIs, the consumers \u003cem\u003ehave\u003c/em\u003e to be aware of the URIs. This is because, the consumer of your RESTful API is a developer who has to write code to make HTTP calls to the URI. What would really help is have a common URI convention for entities like this. That’s where the RESTful concept of resource URIs come in.\u003c/p\u003e\n\u003cp\u003eBefore I start explaining the best practices for forming these URIs, I should tell you, that\u0026#39;s what this is: best practice. Like we\u0026#39;ve seen before, there is no right or wrong way to create URIs. But if you are writing a REST API, it\u0026#39;s better you follow these best practices to keep both you, and the API client from going completely insane.\u003c/p\u003e\n\u003ch2 id=\"uris-retro-style-\"\u003eURIs, retro style!\u003c/h2\u003e\n\u003cp\u003eLet’s pause for a minute and step back in time to the late 1980s and early 1990s. The time when bright colors were in fashion everywhere, not just in clothes, but also in web pages. A typical website at that time would most likely be a set of web pages. Static HTML web pages. Imagine one such site now. To access the pages of the site, you would enter the URL that consists of the path to the page ending with the page name. Every page has a specific URI that uniquely identifies that HTML page. There is no ambiguity there. This is exactly the concept behind resource based URIs. Every \u003cem\u003ething\u003c/em\u003e or \u003cem\u003eentity\u003c/em\u003e has a URL that’s unique and standard.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ve found the best way to design RESTful URIs is to think of them as static pages. Take the profile pages on a site like Facebook for example. If you had to design profile pages as static HTML, think of how you\u0026#39;d create them. You would create one HTML for every profile. So, if my profile name is koushik, the name of the page would be koushik.html. Let\u0026#39;s say there are 4 users for this website: koushik, raj, sid and jane. So, I have 4 static HTML pages, the names of the files being the names of the profile. Now that I have a bunch of these profile HTML files on my site, I\u0026#39;ll group all the profile pages in a profiles folder. So, the path to my profile page would be something like:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/profiles/koushik.html\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eDrop the .html extension, and you have the RESTful URI.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/profiles/koushik\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMaking it generic, the URI for any profile page is:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/profiles/{profileName}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThere you have your first RESTful resource based URIs. Think of resources and create a unique URI for them.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s look at some more examples. How about posts or messages? Let\u0026#39;s say every message has an ID. Then you could design URIs like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages/{messageId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSo, the URI \u003ccode\u003e/messages/1\u003c/code\u003e shows you message ID 1 and \u003ccode\u003e/messages/10\u003c/code\u003e shows message ID 10 and so on.\u003c/p\u003e\n\u003cp\u003eNotice two things with the URIs. First, the URI contains \u003cstrong\u003enouns\u003c/strong\u003e and not \u003cstrong\u003everbs\u003c/strong\u003e. Things in the system like documents, persons, products or accounts are resources. You don\u0026#39;t have URIs like \u003cem\u003egetMessages\u003c/em\u003e or \u003cem\u003efetchMessages\u003c/em\u003e. It\u0026#39;s just \u003cem\u003emessages\u003c/em\u003e. When you are designing RESTful URIs, keep an eye out for any verbs in your URI. There typically shouldn\u0026#39;t be any. Just nouns. And typically the nouns are the resource names themselves, like posts or profiles. Again, using the static web pages example, you\u0026#39;d never name a directory as getProfiles or fetchMessages. The directory names would be profiles or messages respectively.\u003c/p\u003e\n\u003cp\u003eSecondly, notice the resource name is plural in both cases. It\u0026#39;s not \u003ccode\u003e/message/{messageId}\u003c/code\u003e. Again, this is a good practice, because it makes it clear there are multiple message under \u003ccode\u003e/messages\u003c/code\u003e, not just one.\u003c/p\u003e\n\u003cp\u003eSo, here\u0026#39;s the very first step to designing a REST API for any system.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIdentify the \u003cem\u003ethings\u003c/em\u003e or \u003cem\u003enouns\u003c/em\u003e or \u003cem\u003eentities\u003c/em\u003e in your system. They are your \u003cem\u003eresources\u003c/em\u003e. Then assign resource URIs for each resource.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe advantage of using such resource based URIs is that they are really not dependent of the framework you use. So, no \u003ccode\u003e.do\u003c/code\u003e or \u003ccode\u003e.action\u003c/code\u003e in the URIs. And no \u003ccode\u003e?id=\u003c/code\u003e query params. These details are of no significance to your clients, so there is no reason to have them in the URI. Also, this makes URI resistant to changes in your application design or technology. As W3C says, \u003ca href=\"http://www.w3.org/Provider/Style/URI.html.en\"\u003ecool URIs don\u0026#39;t change!\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s look at some other \u003cem\u003enouns\u003c/em\u003e in our Messenger application. There\u0026#39;s comments, likes and shares. Each one can be a resource. Let\u0026#39;s start with comments. What would be a good restful URI for a comment with ID 20? Well, it could be \u003ccode\u003e/comments/20\u003c/code\u003e. That\u0026#39;s correct. But there is one more thing you can do here.\u003c/p\u003e\n\u003ch2 id=\"resource-relations\"\u003eResource relations\u003c/h2\u003e\n\u003cp\u003eWhen designing URIs for resources, you\u0026#39;ll often encounter some resources that are dependent on each other. Take the example of messages and comments. Someone posts a message and then other people comment on it. A message can have multiple comments, and each comment has its own IDs. A message has a one-to-many relationship with comments. We\u0026#39;ve designed the URI for posts to be \u003ccode\u003e/messages/{messageId}\u003c/code\u003e. Could the URI for comments be \u003ccode\u003e/comments/{commentId}\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eWell, it could, but that treats messages and comments as two independent resources, and not acknowledge the relationship between them.\u003c/p\u003e\n\u003cp\u003eSay we have two messages, message 1 and message 2. Message 1 has comments ID 1, 2 and 3. Message 2 has comments 4 and 5. If I were designing this as static HTML pages, I wouldn\u0026#39;t want to create one comments folder and put all comments pages in it! I would lose the relationship information that comments have to the messages. To convey that relationship, I could create a folder for each message and put all comments pages related to that message in that folder.\u003c/p\u003e\n\u003cp\u003eSo, the URI for comment 2 is:\n\u003ccode\u003e/messages/1/comments/2\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNotice how the message ID is a part of the URI, which is then followed by \u003ccode\u003ecomments\u003c/code\u003e  and the comment ID.\u003c/p\u003e\n\u003cp\u003eThe generic URI for a comment is:\n\u003ccode\u003e/messages/{messageId}/comments/{commentId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIs this URI better than \u003ccode\u003e/comments/{commentId}\u003c/code\u003e? Well, it depends. This makes it clear that the comment belongs to a particular message, so the relationship between resources is well established. But on the other hand, to get to a comment, you need to know the comment ID as well as the message ID. You know the URI for message ID 20. But what\u0026#39;s the URI for comment ID 300? You\u0026#39;d need to know what the message ID is to access any comment. So, it depends on what you expect your client to know when they need to access this.\u003c/p\u003e\n\u003cp\u003eThis structure can be applied to other related resources too. For example, message can be shared, and each share has a unique ID. So, the URI for likes could be:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages/{messageId}/likes/{likeId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA share could be:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/messages/{messageId}/shares/{shareId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSo, typically, when there is a one-to-many relationships, you could choose to have the \u0026quot;one\u0026quot; side of the relationship to be the root resource, and then the resource on the \u0026quot;many\u0026quot; side follow that.\u003c/p\u003e\n\u003cp\u003eHow about many-to-many? Or one-to-one? Let\u0026#39;s set that aside for now. We will revisit relationships later in this course, and for now, let\u0026#39;s limit ourselves to one-to-many.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eSo, what are the resources in our system? We have profiles, messages, comments, likes and shares. We have identified resource URIs for each. We\u0026#39;ll treat profiles and messages as first level entities, and comments, likes and shares as second level entities in relation to messages.\u003c/p\u003e\n\u003cp\u003eNow you might wonder why messages are not related to profiles. Why are they both first level entities? Messages are posted by someone who has a profile. There is a one to many relationship between profile and messages! So, couldn\u0026#39;t you have message URIs like this?\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/profiles/{profileId}/messages/{messageId}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eYou could! In this case, I decided to have messages independent of profiles because I felt they weren\u0026#39;t as tightly coupled together as messages and comments are. But this is something that you should decide when designing the API for your system.\u003c/p\u003e\n\u003cp\u003eI hope the concept of resource based URIs makes sense. One other important consideration is a concept of collection URIs, which we\u0026#39;ll learn about in the next tutorial.\u003c/p\u003e\n",
                    "id": "C0dmLC8tRI",
                    "name": "Text",
                    "permalinkName": "text"
                },
                {
                    "content": [
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/getCategories\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/fetchCategories?categoryId={categoryId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/{categoryId}\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 3,
                            "correctAnswerDescription": "The RESTful way to design a URL is to have the entity be a \"resource\" that's evident in the path.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "Let's say you need to build RESTful URIs for various resources in an online shopping site. Say you have \u003ccode\u003eCategory\u003c/code\u003e as an entity that represents all the product categories on the site. What would be a RESTful URI to lookup a category with ID \u003ccode\u003ecategoryId\u003c/code\u003e?",
                            "id": "DesigningResourceURIs-1",
                            "incorrectAnswerDescription": "Think of every entity as a \"resource\" in the path.",
                            "incorrectAnswerMainTitle": "Not quite."
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products?id=25\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products/25\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/products/id/25\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 2,
                            "correctAnswerDescription": "The resource ID is almost always a part of the URI.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "The site also has a \u003ccode\u003eProduct\u003c/code\u003e entity. This has been designed to be a first level entity like \u003ccode\u003eCategory\u003c/code\u003e. What would be a good RESTful URI for a product with ID 25?",
                            "id": "DesigningResourceURIs-2",
                            "incorrectAnswerDescription": "Think \"resources\". ",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        },
                        {
                            "answers": [
                                {
                                    "content": "\u003ccode\u003e/categories/products\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/products/{productId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/products/{categoryId}/{productId}\u003c/code\u003e"
                                },
                                {
                                    "content": "\u003ccode\u003e/categories/{categoryid}/products/{productid}\u003c/code\u003e"
                                }
                            ],
                            "correctAnswer": 3,
                            "correctAnswerDescription": "Nested resource URIs follow the ID of the parent resource.",
                            "correctAnswerMainTitle": "Great, you got it right!",
                            "description": "If the \u003ccode\u003eProduct\u003c/code\u003e entity were to have been designed as a sub-resource under the \u003ccode\u003eCategory\u003c/code\u003e entity, what would the URI for \u003ccode\u003eProduct\u003c/code\u003e be?",
                            "id": "DesigningResourceURIs-3",
                            "incorrectAnswerDescription": "Think of a sub resource URI as something that follows the unique parent resource.",
                            "incorrectAnswerMainTitle": "Hmm, no."
                        }
                    ],
                    "id": "EwhdjDWTfR",
                    "name": "Exercise",
                    "permalinkName": "exercise"
                }
            ],
            "title": "Designing Resource URIs",
            "unitSlNo": "1.3",
            "youtube": "NjpKwiRORI4"
        },
        "Permalink": "Designing-Resource-URIs",
        "createdAt": "2015-08-22T02:38:58.826Z",
        "objectId": "s56iyvFKut",
        "updatedAt": "2015-08-22T02:38:58.826Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "This tutorial discusses three important entity object states in Hibernate: Transient, Persistent and Detached.",
            "nextLessonPermalinkName": "Understanding-State-Changes",
            "permalinkName": "Transient,-Persistent-and-Detached-Objects",
            "prevLessonPermalinkName": "CRUD-Operations",
            "title": "Transient, Persistent and Detached Objects",
            "unitSlNo": "1.2",
            "youtube": "kZpRyEABnms"
        },
        "Permalink": "Transient,-Persistent-and-Detached-Objects",
        "createdAt": "2015-08-22T02:38:58.702Z",
        "objectId": "sEjRAkd2HG",
        "updatedAt": "2015-08-22T02:38:58.702Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "Introducing HQL and using HQL to run queries on the database.",
            "nextLessonPermalinkName": "Select-and-Pagination-in-HQL",
            "permalinkName": "Introducing-HQL-and-the-Query-Object",
            "prevLessonPermalinkName": "Persisting-Detached-Objects",
            "title": "Introducing HQL and the Query Object",
            "unitSlNo": "2.1",
            "youtube": "Em4M2tUn1bU"
        },
        "Permalink": "Introducing-HQL-and-the-Query-Object",
        "createdAt": "2015-08-22T02:38:58.704Z",
        "objectId": "sIO2kK760N",
        "updatedAt": "2015-08-22T02:38:58.704Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll learn about an important concept relating to REST APIs: HATEOAS\n",
            "nextLessonPermalinkName": "The-Richardson-Maturity-Model",
            "permalinkName": "HATEOAS",
            "prevLessonPermalinkName": "Rest-Response",
            "sections": [
                {
                    "content": "\u003cp\u003eThat’s not a typo. This is actually an acronym. HATEOAS. In the running for the worst acronym ever. It stands for Hypermedia as the Engine of Application State. I know. Worst acronym ever, huh? But bear with me, and you’ll soon understand what that means.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"hyperlinking\"\u003eHyperlinking\u003c/h2\u003e\n\n\u003cp\u003eMaybe you remember, I mentioned in the first video of this series that there’s no service definition specification for REST APIs. There’s no formal document that really documents the API. Most REST APIs have “help” pages that explain what the API URIs are and what operations are supported. I also mentioned in the first video that the best RESTful APIs don’t even need any documentation. I’ll now explain what I mean by that.\u003c/p\u003e\n\n\u003cp\u003eSo, we visit websites online all the time. When was the last time you looked up any documentation to use a website? Well, never, I hope. You don’t need documentation to use web sites. You go to the home page, and you’ll find links to other pages. You click on one such link, and you’ll get that page, with more links. You don’t need to read a document to know where to go. You just remember the website home address, and any other links you need to navigate will be provided to you in the response.\u003c/p\u003e\n\n\u003cp\u003eThis is basically the advantage of using HTTP. Remember that HTTP is HyperText Transfer Protocol. We’ve discussed that hypertext is text that has links to other text. These links, which are called hyperlinks, are what’s really handy to navigate your way through any site. Let’s think about the response we return in our REST API. What if we implement the same concept there too? Let’s say you receive a GET request from a client for a message ID. We return the message information in JSON or XML, yes. But what you could also do is send links to comment resource URIs. And likes and shares resource URIs. It’s the server saying “Hey client, I know you asked for message ID 20. Here’s the contents of message #20. I’m also throwing in collection resource URIs for comments, shares and likes. If you want to get a list of all the comments for message ID 20, this is the URI to use. Oh, and here’s the profile resource URI for the author of the message, if you want to get the profile information of the author of this message”. \u003c/p\u003e\n\n\u003cp\u003eSo, the web service is being super-helpful to the client by providing all these links in the response. Similar to hyperlinks in web sites. Whether the client wants to use it or not doesn’t matter. But if they want it, it’s there. And just like that, you’ve eliminated the need for documentation for all these APIs. The client developer just picks up the value of the right URIs from a previous response and makes subsequent calls to those URIs. \u003c/p\u003e\n\n\u003cp\u003eIf you do this, you don’t let the client programmer have to know and hard-code the URIs in order to interact with the resources and the application state. You basically let the hypertext you send in the response drive the client’s interaction with the application state. So, you could say that hypertext, or hypermedia as it is sometimes called, is being the driver or engine of application state. Hypermedia as the Engine of Application State. HATEOAS. Whew. Does that make sense now? It’s still a bad choice for a name. But it should at least make some sense now.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"a-scenario\"\u003eA Scenario\u003c/h2\u003e\n\n\u003cp\u003eLet’s walk through a scenario so that this concept becomes clearer. Let’s start with the \u003ccode\u003e/messages\u003c/code\u003e collection URI. Accessing \u003ccode\u003e/messages\u003c/code\u003e should give you a list of messages in the system. Let’s say a message representation has the following fields:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMessage ID\u003c/li\u003e\n\u003cli\u003eMessage Content\u003c/li\u003e\n\u003cli\u003eMessage Author\u003c/li\u003e\n\u003cli\u003ePosted Date\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFour simple properties. A JSON representation for a sample message would look something like this:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e{\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"01\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow when you access the \u003ccode\u003e/messages\u003c/code\u003e collection URI, you’d basically get a collection of such message resources. To keep it simple, let’s say there are just 3 messages in the system. Accessing \u003ccode\u003e/messages\u003c/code\u003e would give something similar to this:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e[\n  {\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\n  \u003c/span\u003e},\n  {\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"2\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Yo!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"sid\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"04-01-2014\"\u003c/span\u003e\n  \u003c/span\u003e},\n  {\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"3\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"What's up?\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"jane\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"04-02-2014\"\u003c/span\u003e\n  \u003c/span\u003e}\n]\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow that the client has the list of messages, let’s say they want the details of the first message - message ID 1. We’ve already designed the resource URI for message to be \u003ccode\u003e/messages/{messageId}\u003c/code\u003e. So, to get the URI, they’ll have to take the value of the ID field of the message they are interested in, and append it to the string \u003ccode\u003e/messages/\u003c/code\u003e and there they have the resource URI. But this means that the client will have to know this beforehand. They need to know that they need to pick up the ID property from the response, and they need to know what to append it to. Now, here’s a question. As a API service implementer, why not send that to the client yourself? Since we are sending the message resource details anyway, why not just construct the URI fully and send it to the client? \u003c/p\u003e\n\n\u003cp\u003eConsider a sample response for a single message like this:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e{\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1\"\u003c/span\u003e\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf this were to be the kind of response for every message in \u003ccode\u003e/messages\u003c/code\u003e, then the client wouldn’t really have to do any URI construction. The resource URI is one of the properties of the resource. If you were to design your API so that every resource has the instance resource URI to itself, it makes it really convenient for the client to use it.\u003c/p\u003e\n\n\u003cp\u003eNotice that the name of the link property is \u003ccode\u003ehref\u003c/code\u003e. That must be familiar. That’s exactly how you specify links in HTML. \u003ccode\u003ehref\u003c/code\u003e is a property of the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag. It serves a similar purpose here.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"link-relations\"\u003eLink relations\u003c/h2\u003e\n\n\u003cp\u003eWe are on our way to implementing some HATEOAS concepts. We are not fully there yet. There are still some more things you’ll need to learn. Let’s look at the concept of links, and how you can apply them to the resources in the Messenger API. We’ve looked at adding the resource URI to every resource. So, a profile resource, or a comment resource, well, pretty much every resource could have a \u003ccode\u003ehref\u003c/code\u003e attribute that has the value of the instance resource URI. Bu that’s not the only link you can provide. For instance, a message resource could also have links to get all the comments for that message. And all the likes and shares for that message. You could even have links for the client to post a new comment to that message. Keep extending this, and it gets a bit messy.\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e{\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003ecomments-href\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/comments\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003elikes-href\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/likes\"\u003c/span\u003e\u003c/span\u003e,\n   \"\u003cspan class=\"hljs-attribute\"\u003eshares-href\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/shares\"\u003c/span\u003e\u003c/span\u003e,\n   \"\u003cspan class=\"hljs-attribute\"\u003eprofile-href\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/profiles/koushik\"\u003c/span\u003e\u003c/span\u003e,\n   \"\u003cspan class=\"hljs-attribute\"\u003ecomment-post-href\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/comments\"\u003c/span\u003e\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you do this, the client doesn’t need to remember the URIs, yes, but they now have to remember the property names for these URIs and you basically have then same problem. There needs to be a better way to manage these links. And there is! You can use the \u003ccode\u003erel\u003c/code\u003e attribute. \u003c/p\u003e\n\n\u003cp\u003eIf you’ve used the anchor tags when writing HTML, you might have encountered this \u003ccode\u003erel\u003c/code\u003e attribute before. It’s basically an attribute that you can add to any link to specify the relationship between the current document and  the linked document. \u003c/p\u003e\n\n\u003cp\u003eThe most common example of \u003ccode\u003erel\u003c/code\u003e is in stylesheet links. You’d have seen stylesheet links in HTML head tags like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"path/to/some.css\"/\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eHere \u003ccode\u003ehref\u003c/code\u003e provides the actual URL being linked, and the \u003ccode\u003erel\u003c/code\u003e attribute describes the relation of that link to the main document. Here the relation is that the link is a stylesheet of the main document.\u003c/p\u003e\n\n\u003cp\u003eWe can use the \u003ccode\u003erel\u003c/code\u003e attribute to add extra information in the links in our REST response. Here’s the original href response modified with the \u003ccode\u003erel\u003c/code\u003e attribute addition:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e{\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\u003c/span\u003e,\n   \"\u003cspan class=\"hljs-attribute\"\u003elinks\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e[\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"self\"\u003c/span\u003e\n                \u003c/span\u003e}\n            ]\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhat’s different here is that we’ve introduced this new property called \u003ccode\u003elinks\u003c/code\u003e which is an array. This is going to contain all the links that you’d want to embed in the response. However, you add the \u003ccode\u003erel\u003c/code\u003e attribute to make it clear what the link points to. Notice the \u003ccode\u003erel\u003c/code\u003e value \u003ccode\u003eself\u003c/code\u003e which indicates that the link in the resource points to itself.\u003c/p\u003e\n\n\u003cp\u003eThis could be extended by adding new links and assigning the appropriate rel values for each:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs json\"\u003e{\n  \"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"koushik\"\u003c/span\u003e\u003c/span\u003e,\n  \"\u003cspan class=\"hljs-attribute\"\u003epostedDate\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"03-01-2014\"\u003c/span\u003e\u003c/span\u003e,\n   \"\u003cspan class=\"hljs-attribute\"\u003elinks\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e[\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"self\"\u003c/span\u003e\n                \u003c/span\u003e},\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/comments\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"comments\"\u003c/span\u003e\n                \u003c/span\u003e},\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/likes\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"likes\"\u003c/span\u003e\n                \u003c/span\u003e},\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/messages/1/shares\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"shares\"\u003c/span\u003e\n                \u003c/span\u003e},\n                {  \n                    \"\u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"/profiles/koushik\"\u003c/span\u003e\u003c/span\u003e,\n                    \"\u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"author\"\u003c/span\u003e\n                \u003c/span\u003e}\n            ]\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow the client doesn’t need to remember the link property values. They just have to find the link with the right \u003ccode\u003erel\u003c/code\u003e value for the resource they want and then look up the \u003ccode\u003ehref\u003c/code\u003e value from that link.\u003c/p\u003e\n\n\u003cp\u003eA couple of things to note here. While the concept of having the URIs in the response to achieve HATEOAS is something that’s well understood and mostly agreed upon by all, the \u003cem\u003eway\u003c/em\u003e to do this could vary differently among implementations. The format of JSON that I’ve outlined here is just one of the multitude of ways you could structure links. Again, there’s no right or wrong. You can choose to tweak how you want to present the links in the JSON response of your API depending on your preference. Secondly, the \u003ccode\u003erel\u003c/code\u003e attribute is a part of the HTTP specification, so there are only certain standard values that are allowed for it. \u003ca href=\"http://www.iana.org/assignments/link-relations/link-relations.xml\"\u003eThis link\u003c/a\u003e lists the available values. And obviously, the \u003ccode\u003erel\u003c/code\u003e values here like “comments” and “likes” are not valid. But we’ll still use it. Like I mentioned before, the idea is to have an API that’s easy for the clients to use, and easy for you to maintain. You don’t want to focus too much on getting things right and going by the book. At least, not at the cost of complicating the API too much.\u003c/p\u003e\n\n\u003cp\u003eIn summary, HATEOAS is a way to provide links to resources in the API response, so that the client doesn’t have to deal with URI construction and business flow. They make a request, and the next steps, along with the URIs are handed to them in the response. When you write APIs, you can choose to add URIs in the response using the \u003ccode\u003ehref\u003c/code\u003e attribute. You can also provide more information about the relationship of the linked resource using the \u003ccode\u003erel\u003c/code\u003e attribute.\u003c/p\u003e",
                    "id": "ANaM986iNA",
                    "name": "Text",
                    "permalinkName": "text"
                }
            ],
            "title": "HATEOAS",
            "unitSlNo": "1.8",
            "youtube": "NK3HNEwDXUk"
        },
        "Permalink": "HATEOAS",
        "createdAt": "2015-08-22T02:38:58.823Z",
        "objectId": "srlnB2lIxh",
        "updatedAt": "2015-08-22T02:38:58.823Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll create our first JAX-RS resource that handles a GET request to an API URL.",
            "nextLessonPermalinkName": "Returning-Xml-Response",
            "permalinkName": "Creating-A-Resource",
            "prevLessonPermalinkName": "Understanding-The-Application-Structure",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/43f5a224b7de3099fbd96deee7c0ddb3706059f2.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "am3URFdXPN",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Creating A Resource",
            "unitSlNo": "2.4",
            "youtube": "2QD1sOG8pyU"
        },
        "Permalink": "Creating-A-Resource",
        "createdAt": "2015-08-22T02:38:58.944Z",
        "objectId": "svxZnjJ7qs",
        "updatedAt": "2015-08-22T02:38:58.944Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "spring_core",
        "Lesson": {
            "courseCode": "spring_core",
            "courseName": "Learning Spring Core",
            "description": "In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.",
            "nextLessonPermalinkName": "Setting-Up",
            "permalinkName": "Understanding-Dependency-Injection",
            "sections": [
                {
                    "content": "\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\u003cp\u003eHere is the Wikipedia definition for dependency injection:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDependency injection is a software design pattern that allows the removal of hard-coded dependencies and makes it possible to change them, whether at run-time or compile-time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eGiven two objects that are dependent on each other, the idea is to decouple the dependencies between two objects. \u003c/p\u003e\n\u003cp\u003eIf every class were to instantiate every object it needs by using the \u003ccode\u003enew\u003c/code\u003e operator, would it work? Yes, it would! but that also means that the dependencies are tightly coupled. Every time the object is instantiated, it has the exact same set of dependencies. If you need the object to work with a different instance of any dependency, you\u0026#39;ll need to modify the code of the class.\u003c/p\u003e\n\u003cp\u003eInstead, if the object were to only deal with interfaces, and have the actual object instances supplied to it by setter methods, it opens the class up to a lot of possibilities. The same class could do different things depending on what instance is supplied to it. And the whole time, the class itself doesn\u0026#39;t need to be modified since the class works at the interface level. So, as long as the supplied objects implement the interface, no changes to the class itself are necessary.\u003c/p\u003e\n\u003cp\u003eThis is the concept of dependency injection, and Spring provides a framework that simplifies writing code that uses this concept.\u003c/p\u003e\n",
                    "id": "ekfqAFdjtN",
                    "name": "Summary",
                    "permalinkName": "summary"
                }
            ],
            "title": "Understanding Dependency Injection",
            "unitSlNo": "1.1",
            "youtube": "GB8k2-Egfv0"
        },
        "Permalink": "Understanding-Dependency-Injection",
        "createdAt": "2015-08-22T02:38:58.599Z",
        "objectId": "t9eAL2aBQV",
        "updatedAt": "2015-08-22T02:38:58.599Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "This tutorial explores a special case of object state change: from detached to persistent.",
            "nextLessonPermalinkName": "Introducing-HQL-and-the-Query-Object",
            "permalinkName": "Persisting-Detached-Objects",
            "prevLessonPermalinkName": "Understanding-State-Changes",
            "title": "Persisting Detached Objects",
            "unitSlNo": "1.4",
            "youtube": "T02FicxK_aY"
        },
        "Permalink": "Persisting-Detached-Objects",
        "createdAt": "2015-08-22T02:38:58.715Z",
        "objectId": "tCq53rynLr",
        "updatedAt": "2015-08-22T02:38:58.715Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "Joined inheritance strategy.",
            "permalinkName": "Implementing-Inheritance-With-Joined-Strategy",
            "prevLessonPermalinkName": "Implementing-Inheritance-With-Table-Per-Class-Strategy",
            "title": "Implementing Inheritance With Joined Strategy",
            "unitSlNo": "3.11",
            "youtube": "o1b3HFIlDS0"
        },
        "Permalink": "Implementing-Inheritance-With-Joined-Strategy",
        "createdAt": "2015-08-22T02:38:58.843Z",
        "objectId": "uafwF6dQyl",
        "updatedAt": "2015-08-22T02:38:58.843Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxws",
        "Lesson": {
            "courseCode": "javaee_jaxws",
            "courseName": "Developing SOAP Web Services with JAX-WS",
            "description": "In this tutorial, we'll walk through the steps to install the Java EE 7 SDK which includes the Glassfish 4 application server installation. We'll learn some basics of how to start, stop and manage Glassfish.",
            "nextLessonPermalinkName": "Writing-a-Web-Service---Eclipse-setup",
            "permalinkName": "Setting-up-Java-EE-7-SDK",
            "prevLessonPermalinkName": "Writing-a-Web-service-Client---Calling-the-Service",
            "title": "Setting up Java EE 7 SDK",
            "unitSlNo": "2.1",
            "youtube": "Zx6NuO6niFI"
        },
        "Permalink": "Setting-up-Java-EE-7-SDK",
        "createdAt": "2015-08-22T02:38:58.608Z",
        "objectId": "uxztPgKrrc",
        "updatedAt": "2015-08-22T02:38:58.608Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we'll cover a few more ways to have request information injected into resource methods. We'll look at Context and BeanParam annotations.",
            "nextLessonPermalinkName": "Implementing-Subresources",
            "permalinkName": "Using-Context-And-BeanParam-Annotations",
            "prevLessonPermalinkName": "The-Param-Annotations",
            "sections": [
                {
                    "content": "\u003ch2\u003eCode\u003c/h2\u003e\u003ca href=\"https://github.com/koushikkothagal/messenger/archive/8169659fe20bb70d06ff9304a1a4409507c12a60.zip\"\u003eDownload the source code\u003c/a\u003e",
                    "id": "nvlhVmoGzk",
                    "name": "Code",
                    "permalinkName": "code"
                }
            ],
            "title": "Using Context And BeanParam Annotations",
            "unitSlNo": "2.15",
            "youtube": "4nZUT1oBI1g"
        },
        "Permalink": "Using-Context-And-BeanParam-Annotations",
        "createdAt": "2015-08-22T02:38:59.020Z",
        "objectId": "vDjAY44CPD",
        "updatedAt": "2015-08-22T02:38:59.020Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "jsps_intro",
        "Lesson": {
            "courseCode": "jsps_intro",
            "courseName": "Java Server Pages",
            "description": "We'll learn JSTL's support for the request parameters and the setProperty tag.",
            "permalinkName": "Request-Parameters-with-the-setProperty-tag",
            "prevLessonPermalinkName": "Introduction-to-JSTL-and-the-useBean-tag",
            "title": "Request Parameters with the setProperty tag",
            "unitSlNo": "2.10",
            "youtube": "4GAJ5pxQ-3c"
        },
        "Permalink": "Request-Parameters-with-the-setProperty-tag",
        "createdAt": "2015-08-22T02:38:59.213Z",
        "objectId": "vROrLsfOg6",
        "updatedAt": "2015-08-22T02:38:59.213Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "We'll understand how appending parameters to SQL queries causes SQL injection, and will learn how to use the Parameter Binding feature in Hibernate.",
            "nextLessonPermalinkName": "Named-Queries",
            "permalinkName": "Understanding-Parameter-Binding-and-SQL-Injection",
            "prevLessonPermalinkName": "Select-and-Pagination-in-HQL",
            "title": "Understanding Parameter Binding and SQL Injection",
            "unitSlNo": "2.3",
            "youtube": "PiahhQ0Qkak"
        },
        "Permalink": "Understanding-Parameter-Binding-and-SQL-Injection",
        "createdAt": "2015-08-22T02:38:58.702Z",
        "objectId": "vdHZPPfR4C",
        "updatedAt": "2015-08-22T02:38:58.702Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll try out a few more annotations to configure our entity class.",
            "nextLessonPermalinkName": "Retrieving-Objects-using-session.get",
            "permalinkName": "More-Annotations",
            "prevLessonPermalinkName": "hbm2ddl-Configuration-and-Name-Annotations",
            "title": "More Annotations",
            "unitSlNo": "2.2",
            "youtube": "I8YmYFI5D_E"
        },
        "Permalink": "More-Annotations",
        "createdAt": "2015-08-22T02:38:58.749Z",
        "objectId": "wZ1OaZWux0",
        "updatedAt": "2015-08-22T02:38:58.749Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "struts2_intro",
        "Lesson": {
            "courseCode": "struts2_intro",
            "courseName": "Beginning Struts 2",
            "description": "This video introduces the ActionSupport class and one of the features of the class, validation. We'll look at the validate() method and how we can implement simple form validations in Struts 2.",
            "nextLessonPermalinkName": "Configuring-methods-in-Action-mappings",
            "permalinkName": "The-ActionSupport-Class",
            "prevLessonPermalinkName": "Action-Wildcards",
            "title": "The ActionSupport Class",
            "unitSlNo": "3.9",
            "youtube": "R6n511ZC50Q"
        },
        "Permalink": "The-ActionSupport-Class",
        "createdAt": "2015-08-22T02:38:58.924Z",
        "objectId": "wyMw4fknbi",
        "updatedAt": "2015-08-22T02:38:58.924Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "We'll now understand what happens when we run the archetype:generate command and how that affects the pom.xml.",
            "nextLessonPermalinkName": "Maven-Build-Phases",
            "permalinkName": "Understanding-Archetypes-and-pom.xml",
            "prevLessonPermalinkName": "Introduction-and-Setting-up-Part-2",
            "title": "Understanding Archetypes and pom.xml",
            "unitSlNo": "2.1",
            "youtube": "AI8Kjag1vGk"
        },
        "Permalink": "Understanding-Archetypes-and-pom.xml",
        "createdAt": "2015-08-22T02:38:58.519Z",
        "objectId": "x43EKXcCbi",
        "updatedAt": "2015-08-22T02:38:58.519Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, we understand what JAX-RS is and how it relates to Jersey, the implementation library.",
            "nextLessonPermalinkName": "Setting-Up",
            "permalinkName": "What-Is-JAXRS",
            "prevLessonPermalinkName": "The-Richardson-Maturity-Model",
            "title": "What Is JAX-RS?",
            "unitSlNo": "2.1",
            "youtube": "BuYivu9ZjDw"
        },
        "Permalink": "What-Is-JAXRS",
        "createdAt": "2015-08-22T02:38:58.922Z",
        "objectId": "xr0OYxdKLT",
        "updatedAt": "2015-08-22T02:38:58.922Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_run",
        "Lesson": {
            "courseCode": "hibernate_run",
            "courseName": "Hibernate - APIs and Runtime",
            "description": "Understanding how to apply restrictions to our queries when using Criteria.",
            "nextLessonPermalinkName": "Projections-and-Query-By-Example",
            "permalinkName": "Understanding-Restrictions",
            "prevLessonPermalinkName": "Introduction-to-Criteria-API",
            "title": "Understanding Restrictions",
            "unitSlNo": "2.6",
            "youtube": "MzrzsKSJBt0"
        },
        "Permalink": "Understanding-Restrictions",
        "createdAt": "2015-08-22T02:38:58.734Z",
        "objectId": "xxToAOjiSd",
        "updatedAt": "2015-08-22T02:38:58.734Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "maven_intro",
        "Lesson": {
            "courseCode": "maven_intro",
            "courseName": "Introduction to Maven",
            "description": "We'll now learn what the build process in Maven consists of, the build phases and we'll run commands to execute some phases.",
            "nextLessonPermalinkName": "Adding-a-Dependency",
            "permalinkName": "Maven-Build-Phases",
            "prevLessonPermalinkName": "Understanding-Archetypes-and-pom.xml",
            "title": "Maven Build Phases",
            "unitSlNo": "2.2",
            "youtube": "IYRYbPR5Gek"
        },
        "Permalink": "Maven-Build-Phases",
        "createdAt": "2015-08-22T02:38:58.529Z",
        "objectId": "y8n9SCief0",
        "updatedAt": "2015-08-22T02:38:58.529Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "hibernate_intro",
        "Lesson": {
            "courseCode": "hibernate_intro",
            "courseName": "Introduction To Hibernate",
            "description": "We'll understand how to configure entity classes that have an inheritance hierarchy.",
            "nextLessonPermalinkName": "Single-Table-Strategy",
            "permalinkName": "Implementing-Inheritance",
            "prevLessonPermalinkName": "CascadeTypes-and-Other-Things",
            "title": "Implementing Inheritance",
            "unitSlNo": "3.8",
            "youtube": "Zj1mRWfhx_Y"
        },
        "Permalink": "Implementing-Inheritance",
        "createdAt": "2015-08-22T02:38:58.834Z",
        "objectId": "yB8nBiXOFg",
        "updatedAt": "2015-08-22T02:38:58.834Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "servlets_intro",
        "Lesson": {
            "courseCode": "servlets_intro",
            "courseName": "Introduction to Servlets",
            "description": "Now we'll understand how to intercept GET and POST requests using the `doGet` and the `doPost` methods. We also look at how parameters are passed in HTTP requests.",
            "nextLessonPermalinkName": "Passing-More-Parameters",
            "permalinkName": "The-POST-Method-and-Passing-Parameters",
            "prevLessonPermalinkName": "Servlet-XML-Configuration",
            "title": "The POST Method and Passing Parameters",
            "unitSlNo": "2.3",
            "youtube": "MnUJl3NYRRc"
        },
        "Permalink": "The-POST-Method-and-Passing-Parameters",
        "createdAt": "2015-08-22T02:38:59.058Z",
        "objectId": "yaslK35TxE",
        "updatedAt": "2015-08-22T02:38:59.058Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "In this tutorial, you'll learn how to access and map to URL with path parameters, using the @PathParam annotation.",
            "nextLessonPermalinkName": "Returning-JSON-Response",
            "permalinkName": "Accessing-Path-Params",
            "prevLessonPermalinkName": "Building-Service-Stubs",
            "title": "Accessing Path Params",
            "unitSlNo": "2.8",
            "youtube": "U4tOw0LxQW4"
        },
        "Permalink": "Accessing-Path-Params",
        "createdAt": "2015-08-22T02:38:58.919Z",
        "objectId": "zWn8uki8bJ",
        "updatedAt": "2015-08-22T02:38:58.919Z"
    },
	{
        "ACL": {
            "*": {
                "read": true
            }
        },
        "CourseName": "javaee_jaxrs",
        "Lesson": {
            "courseCode": "javaee_jaxrs",
            "courseName": "Developing REST APIs with JAX-RS",
            "description": "Here's another way to handle exception scenarios in JAX-RS, using WebApplicationException.",
            "nextLessonPermalinkName": "HATEOAS-Part-1",
            "permalinkName": "Using-WebApplicationException",
            "prevLessonPermalinkName": "Handling-Exceptions",
            "title": "Using WebApplicationException",
            "unitSlNo": "2.19",
            "youtube": "Vdk_tUhcJZM"
        },
        "Permalink": "Using-WebApplicationException",
        "createdAt": "2015-08-22T02:38:59.023Z",
        "objectId": "zxlMr86OBZ",
        "updatedAt": "2015-08-22T02:38:59.023Z"
    }
] }