{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.","permalinkName":"ApplicationContext-and-Property-Initialization","title":"ApplicationContext and Property Initialization","unitSlNo":"1.5","youtube":"ZxLaEovze3M","duration":457,"slNo":5,"prev":"/courses/spring_core/lessons/Writing-Code-Using-the-Bean-Factory","next":"/courses/spring_core/lessons/Using-Constructor-Injection","type":"video","durationText":"7 minutes","topic":"spring","unit":{"lessons":[{"title":"Understanding Dependency Injection","description":"In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.","permalinkName":"Understanding-Dependency-Injection","type":"video","slNo":1,"durationText":"14 minutes"},{"title":"Setting Up","description":"In this tutorial, we'll learn how to set up our Eclipse development environment to write Spring code.","permalinkName":"Setting-Up","type":"video","slNo":2,"durationText":"3 minutes"},{"title":"Understanding Spring Bean Factory","description":"In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.","permalinkName":"Understanding-Spring-Bean-Factory","type":"video","slNo":3,"durationText":"6 minutes"},{"title":"Writing Code Using the Bean Factory","description":"In this tutorial, we'll write code to implement the BeanFactory concept that we learnt in our previous tutorial. We'll write a Spring XML to configure a Spring bean. Then we'll use the BeanFactory to instantiate our bean in the Spring container.","permalinkName":"Writing-Code-Using-the-Bean-Factory","type":"video","slNo":4,"durationText":"11 minutes"},{"title":"ApplicationContext and Property Initialization","description":"We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.","permalinkName":"ApplicationContext-and-Property-Initialization","type":"video","slNo":5,"durationText":"7 minutes"},{"title":"Using Constructor Injection","description":"We'll now use constructors to set the member variable values for our Spring beans. We'll also look at some techniques to resolve conflicts in the case of overloaded constructors.","permalinkName":"Using-Constructor-Injection","type":"video","slNo":6,"durationText":"14 minutes"},{"title":"Injecting Objects","description":"In this tutorial, we'll use dependency injection to inject an object dependency to a Spring bean.","permalinkName":"Injecting-Objects","type":"video","slNo":7,"durationText":"15 minutes"},{"title":"Inner Beans, Aliases and idref","description":"In this tutorial, we'll look at some concepts related to bean naming and usage like alias and idref. We'll also understand how to write inner beans.","permalinkName":"Inner-Beans,-Aliases-and-idref","type":"video","slNo":8,"durationText":"9 minutes"},{"title":"Initializing Collections","description":"In this tutorial, we'll initialize a member variable that's a collection and each of the elements are references to other beans.","permalinkName":"Initializing-Collections","type":"video","slNo":9,"durationText":"6 minutes"},{"title":"Bean Autowiring","description":"We'll now look at a configuration feature provided by Spring to wire dependencies automatically: Bean Autowiring. We'll learn about different types of autowiring, and we'll write some code to implement bean autowiring by name.","permalinkName":"Bean-Autowiring","type":"video","slNo":10,"durationText":"7 minutes"}]}}