{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.","permalinkName":"Understanding-Spring-Bean-Factory","title":"Understanding Spring Bean Factory","unitSlNo":"1.3","youtube":"xlWwMSu5I70","duration":413,"slNo":3,"prev":"/courses/spring_core/lessons/Setting-Up","next":"/courses/spring_core/lessons/Writing-Code-Using-the-Bean-Factory","content":"<p>###Summary</p>\n<p>The concept of dependency injection that Spring is so popular for is possible because Spring behaves as a container of beans.</p>\n<p>You can have instances of your objects in the Spring container, which means that Spring handles the instantiation and the life cycle of the beans.</p>\n<p>Spring creates all instances of the objects you need. It also has references to all the objects. This is different from creating an instance yourself by using <code>new()</code>. This is what&#39;s called a <em>Factory pattern</em>.</p>\n<p>In the factory pattern, there exists an object that behaves as the <em>object factory</em>. Basically, whenever you need an instance of any object, you don&#39;t create the instance yourself. Instead, you call a method of this <em>factory</em> instance, and that method returns the instance you need. This <em>factory</em> might read from a configuration file, which acts as a blueprint, containing guidelines on how to create the object.</p>\n<p>Spring has objects of type <code>BeanFactory</code> which behave like an object factory. You specify object blueprints in a configuration file, an XML file, and supply it to the <code>BeanFactory</code>. Then when you need an instance of any object, you ask the <code>BeanFactory</code> for it. It then refers the XML file and constructs the bean as specified. This bean, which is now a <em>Spring bean</em> since it has been created by the Spring container, is then returned to whoever asked for it.</p>\n<p>In the next tutorial, we&#39;ll write code that implements this flow.</p>\n","type":"video","durationText":"6 minutes","topic":"spring","unit":{"lessons":[{"title":"Understanding Dependency Injection","description":"In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.","permalinkName":"Understanding-Dependency-Injection","type":"video","slNo":1,"durationText":"14 minutes"},{"title":"Setting Up","description":"In this tutorial, we'll learn how to set up our Eclipse development environment to write Spring code.","permalinkName":"Setting-Up","type":"video","slNo":2,"durationText":"3 minutes"},{"title":"Understanding Spring Bean Factory","description":"In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.","permalinkName":"Understanding-Spring-Bean-Factory","type":"video","slNo":3,"durationText":"6 minutes"},{"title":"Writing Code Using the Bean Factory","description":"In this tutorial, we'll write code to implement the BeanFactory concept that we learnt in our previous tutorial. We'll write a Spring XML to configure a Spring bean. Then we'll use the BeanFactory to instantiate our bean in the Spring container.","permalinkName":"Writing-Code-Using-the-Bean-Factory","type":"video","slNo":4,"durationText":"11 minutes"},{"title":"ApplicationContext and Property Initialization","description":"We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.","permalinkName":"ApplicationContext-and-Property-Initialization","type":"video","slNo":5,"durationText":"7 minutes"},{"title":"Using Constructor Injection","description":"We'll now use constructors to set the member variable values for our Spring beans. We'll also look at some techniques to resolve conflicts in the case of overloaded constructors.","permalinkName":"Using-Constructor-Injection","type":"video","slNo":6,"durationText":"14 minutes"},{"title":"Injecting Objects","description":"In this tutorial, we'll use dependency injection to inject an object dependency to a Spring bean.","permalinkName":"Injecting-Objects","type":"video","slNo":7,"durationText":"15 minutes"},{"title":"Inner Beans, Aliases and idref","description":"In this tutorial, we'll look at some concepts related to bean naming and usage like alias and idref. We'll also understand how to write inner beans.","permalinkName":"Inner-Beans,-Aliases-and-idref","type":"video","slNo":8,"durationText":"9 minutes"},{"title":"Initializing Collections","description":"In this tutorial, we'll initialize a member variable that's a collection and each of the elements are references to other beans.","permalinkName":"Initializing-Collections","type":"video","slNo":9,"durationText":"6 minutes"},{"title":"Bean Autowiring","description":"We'll now look at a configuration feature provided by Spring to wire dependencies automatically: Bean Autowiring. We'll learn about different types of autowiring, and we'll write some code to implement bean autowiring by name.","permalinkName":"Bean-Autowiring","type":"video","slNo":10,"durationText":"7 minutes"}]}}