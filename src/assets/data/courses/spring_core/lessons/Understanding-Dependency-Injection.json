{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.","permalinkName":"Understanding-Dependency-Injection","title":"Understanding Dependency Injection","unitSlNo":"1.1","youtube":"GB8k2-Egfv0","duration":892,"slNo":1,"next":"/courses/spring_core/Bean-Autowiring","content":"<p>###Summary</p>\n<p>Here is the Wikipedia definition for dependency injection:</p>\n<blockquote>\n<p>Dependency injection is a software design pattern that allows the removal of hard-coded dependencies and makes it possible to change them, whether at run-time or compile-time.</p>\n</blockquote>\n<p>Given two objects that are dependent on each other, the idea is to decouple the dependencies between two objects. </p>\n<p>If every class were to instantiate every object it needs by using the <code>new</code> operator, would it work? Yes, it would! but that also means that the dependencies are tightly coupled. Every time the object is instantiated, it has the exact same set of dependencies. If you need the object to work with a different instance of any dependency, you&#39;ll need to modify the code of the class.</p>\n<p>Instead, if the object were to only deal with interfaces, and have the actual object instances supplied to it by setter methods, it opens the class up to a lot of possibilities. The same class could do different things depending on what instance is supplied to it. And the whole time, the class itself doesn&#39;t need to be modified since the class works at the interface level. So, as long as the supplied objects implement the interface, no changes to the class itself are necessary.</p>\n<p>This is the concept of dependency injection, and Spring provides a framework that simplifies writing code that uses this concept.</p>\n","type":"video","durationText":"14 minutes","topic":"spring","unit":{"lessons":[{"title":"Understanding Dependency Injection","description":"In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.","permalinkName":"Understanding-Dependency-Injection","type":"video","slNo":1,"durationText":"14 minutes"},{"title":"Setting Up","description":"In this tutorial, we'll learn how to set up our Eclipse development environment to write Spring code.","permalinkName":"Setting-Up","type":"video","slNo":2,"durationText":"3 minutes"},{"title":"Understanding Spring Bean Factory","description":"In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.","permalinkName":"Understanding-Spring-Bean-Factory","type":"video","slNo":3,"durationText":"6 minutes"},{"title":"Writing Code Using the Bean Factory","description":"In this tutorial, we'll write code to implement the BeanFactory concept that we learnt in our previous tutorial. We'll write a Spring XML to configure a Spring bean. Then we'll use the BeanFactory to instantiate our bean in the Spring container.","permalinkName":"Writing-Code-Using-the-Bean-Factory","type":"video","slNo":4,"durationText":"11 minutes"},{"title":"ApplicationContext and Property Initialization","description":"We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.","permalinkName":"ApplicationContext-and-Property-Initialization","type":"video","slNo":5,"durationText":"7 minutes"},{"title":"Using Constructor Injection","description":"We'll now use constructors to set the member variable values for our Spring beans. We'll also look at some techniques to resolve conflicts in the case of overloaded constructors.","permalinkName":"Using-Constructor-Injection","type":"video","slNo":6,"durationText":"14 minutes"},{"title":"Injecting Objects","description":"In this tutorial, we'll use dependency injection to inject an object dependency to a Spring bean.","permalinkName":"Injecting-Objects","type":"video","slNo":7,"durationText":"15 minutes"},{"title":"Inner Beans, Aliases and idref","description":"In this tutorial, we'll look at some concepts related to bean naming and usage like alias and idref. We'll also understand how to write inner beans.","permalinkName":"Inner-Beans,-Aliases-and-idref","type":"video","slNo":8,"durationText":"9 minutes"},{"title":"Initializing Collections","description":"In this tutorial, we'll initialize a member variable that's a collection and each of the elements are references to other beans.","permalinkName":"Initializing-Collections","type":"video","slNo":9,"durationText":"6 minutes"},{"title":"Bean Autowiring","description":"We'll now look at a configuration feature provided by Spring to wire dependencies automatically: Bean Autowiring. We'll learn about different types of autowiring, and we'll write some code to implement bean autowiring by name.","permalinkName":"Bean-Autowiring","type":"video","slNo":10,"durationText":"7 minutes"}]}}