{"courseCode":"javaee_jaxrs","courseName":"Developing REST APIs with JAX-RS","description":"In this tutorial, we'll learn about the Richardson Maturity Model, a way for REST APIs to be classified, and the \"RESTfulness\" of an API determined.","permalinkName":"The-Richardson-Maturity-Model","title":"The Richardson Maturity Model","unitSlNo":"1.13","youtube":"qHbTE3qvUsQ","duration":506,"slNo":13,"prev":"/courses/javaee_jaxrs/lessons/HATEOAS","next":"/courses/javaee_jaxrs/lessons/What-Is-JAXRS","content":"<p>This is the final tutorial in section 1 API design. We&#39;ve looked at different factors when building the RESTful API for the Messenger application. In this tutorial, we&#39;ll wrap up and take an overall look at how far we&#39;ve come and what that means.</p>\n<p>Below is the API documentation summary of what we have so far. I hope the choices and the design approach for this API is clear to you now. If you are unsure of why any part of the API is a particular way, I encourage you to revisit the relevant tutorial. </p>\n<h2 id=\"messages\">Messages</h2>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th style=\"text-align:center\">URI</th>\n<th>Method</th>\n<th>Success / Failure</th>\n<th>Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get message</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}</code></td>\n<td>GET</td>\n<td>Success</td>\n<td>200</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Delete message</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}</code></td>\n<td>DELETE</td>\n<td>Success</td>\n<td>200 or 204 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Edit message</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}</code></td>\n<td>PUT</td>\n<td>Success</td>\n<td>200 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Create message</td>\n<td style=\"text-align:center\"><code>/messages</code></td>\n<td>POST</td>\n<td>Success</td>\n<td>201 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"profiles\">Profiles</h2>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th style=\"text-align:center\">URI</th>\n<th>Method</th>\n<th>Success / Failure</th>\n<th>Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get profile</td>\n<td style=\"text-align:center\"><code>/profiles/{profileName}</code></td>\n<td>GET</td>\n<td>Success</td>\n<td>200</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Delete profile</td>\n<td style=\"text-align:center\"><code>/profiles/{profileName}</code></td>\n<td>DELETE</td>\n<td>Success</td>\n<td>200 or 204 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Edit profile</td>\n<td style=\"text-align:center\"><code>/profiles/{profileName}</code></td>\n<td>PUT</td>\n<td>Success</td>\n<td>200 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Create profile</td>\n<td style=\"text-align:center\"><code>/profiles</code></td>\n<td>POST</td>\n<td>Success</td>\n<td>201 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"comments-and-similarly-likes-and-shares-\">Comments (and similarly Likes and Shares)</h2>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th style=\"text-align:center\">URI</th>\n<th>Method</th>\n<th>Success / Failure</th>\n<th>Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get comment</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}/comments/{commentId}</code></td>\n<td>GET</td>\n<td>Success</td>\n<td>200</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Delete comment</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}/comments/{commentId}</code></td>\n<td>DELETE</td>\n<td>Success</td>\n<td>200 or 204 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Edit comment</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}/comments/{commentId}</code></td>\n<td>PUT</td>\n<td>Success</td>\n<td>200 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Not found</td>\n<td>404</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n<tr>\n<td>Create comment</td>\n<td style=\"text-align:center\"><code>/messages/{messageId}/comments</code></td>\n<td>POST</td>\n<td>Success</td>\n<td>201 </td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Wrong format / data</td>\n<td>400 or 415</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Failure</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<p>Now that we have designed the API this way, let&#39;s look at what this means. Are we in a position to say this API is &quot;<em>fully RESTful</em>&quot;? Remember, in the first tutorial, I mentioned that this isn&#39;t a yes or no question, and that there is a spectrum of anywhere from &quot;<em>not fully RESTful</em>&quot; to &quot;<em>almost RESTful</em>&quot; to &quot;<em>not RESTful at all</em>&quot;. These terms are hard to work with. How do you <em>know</em> how RESTful an API is? Well, there is one way to know, and that&#39;s using a model developed by Leonard Richardson. It&#39;s called the Richardson Maturity Model, and it breaks down all the concepts we&#39;ve discussed into 3 levels. Every REST API belongs to one of these 3 levels. The model also defines a Level 0 which is <em>not a RESTful API</em>. It is not necessary that every API score highly as per this model. But it helps to understand this model when designing any RESTful API so that you at least know where you stand. And try to make it better if possible.</p>\n<p>Let&#39;s start with Level 0. I hope you are familiar with some of the basics of a SOAP web service. The way a SOAP web service generally works is that there is a URL called the endpoint where the service is exposed. One URL. That URL receives all requests from the client. If you were to write the Messenger API as a SOAP web service, you&#39;d probably have one URI at <servername>/messenger. This URL receives <em>all</em> requests. How does it know what to do? How does the client tell it to do different stuff, like look up messages or delete a comment? Well, that happens in the message that&#39;s sent to this common URL. The message contains both the operation that needs to be performed, and the data that&#39;s needed for that operation. For example, the XML below could create a new message:</p>\n<pre><code>&lt;create-message&gt;\n    &lt;message-content&gt;Hello World!&lt;/message-content&gt;\n    &lt;message-author&gt;koushik&lt;/message-author&gt;\n&lt;/create-message&gt;\n</code></pre><p>And a delete comment request (sent to the same URL) could look like this. </p>\n<pre><code>&lt;delete-comment&gt;\n    &lt;message-id&gt;30&lt;/message-id&gt;\n    &lt;comment-id&gt;2&lt;/comment-id&gt;\n&lt;/delete-comment&gt;\n</code></pre><p>Notice that the operation that needs to be performed is a part of the request that&#39;s sent. This is how the same URL can be used for different operations. In fact, the same HTTP method can be used for each operation, because, all the details are in the request body. In fact, that&#39;s what SOAP does. The requests are always POST, with the POST body containing all the information.</p>\n<p>This is Level 0 in the Richardson Maturity Model. This is often called the <strong>The swamp of POX</strong>. This refers to the common use of <em>Plain Old XML</em> (or POX) to define everything that an operation needs. No HTTP concepts are leveraged for communicating information between the server and client.</p>\n<p>This design approach is obviously not something we want to do in this course. If you were to refine this model to introduce the concept of resource URIs, you will reach level 1 in the RMM. This is the starting level for RESTful APIs. The earlier level isn&#39;t even considered REST. We designed resource URIs for messages (<code>/messages</code>), profiles (<code>/profiles</code>) and so on. If you did just this, and nothing else, you stand at level 1. Now you have message requests going to one URI and all comments requests going to another URI. There would still be information about the operation in the requests, because the message URI needs to handle adding deleting or updating messages. </p>\n<p>If you take the next step and use different HTTP methods for these different operations, then you&#39;ve reached Level 2 in RMM. An API on Level 2 uses standard HTTP methods like GET, POST, PUT and DELETE to do different operations, on the resource URI. The URI specifies what resource is operated upon, and the HTTP method specifies what the operation is. There also needs to be better use of HTTP status codes, and the right use of idempotent and non-idempotent methods for an API to be at Level 2. </p>\n<p>Finally, Level 3 is when you implement HATEOAS. That is, the responses have links that control the application state for the client. The client doesn&#39;t need to be aware of the different API URIs. All the URIs that the client would need is a part of the response that the server sends. If an API implements this, it is said to be at Level 3 of RMM, and is considered fully RESTful.</p>\n<p>And there you go. Now you can look at any REST API design and easily identify which level in RMM it belongs to. Again, this is not supposed to be a strict rule. I encourage you to use this model as a guideline when designing your REST APIs, as a tool for learning and understanding, rather than a scorecard to measure with. You may not choose to make every API achieve Level 3 of RMM, but it helps to understand what the theoretical <em>ideal</em> is.</p>\n<p>In the next section, we&#39;ll start looking at JAX-RS and start implementing this API. There&#39;s a lot to REST API design, and these tutorials have only scratched the surface. So, I do encourage you to explore more about REST APIs, and treat these tutorials as a starting point, rather than as complete learning.</p>\n","type":"video","durationText":"8 minutes","topic":"javaee","unit":{"lessons":[{"title":"Introduction","description":"Welcome to this course. This tutorial introduces you to REST APIs and explains some basic concepts.","permalinkName":"Introduction","type":"video","slNo":1,"durationText":"16 minutes"},{"title":"REST and HTTP","description":"In this tutorial, we will learn some HTTP concepts that have influenced REST.","permalinkName":"REST-and-HTTP","type":"video","slNo":2,"durationText":"14 minutes"},{"title":"HTTP Concepts","description":"In this tutorial, we will learn some HTTP concepts that have influenced REST.","permalinkName":"HTTP-Concepts","type":"quiz","slNo":3,"durationText":"5 questions"},{"title":"Designing Resource URIs","description":"In this tutorial, we’ll start designing a sample RESTful API for our sample social media application. And through the process, we’ll understand how RESTful URIs are designed.","permalinkName":"Designing-Resource-URIs","type":"video","slNo":4,"durationText":"18 minutes"},{"title":"Resource URIs","description":"In this tutorial, we’ll start designing a sample RESTful API for our sample social media application. And through the process, we’ll understand how RESTful URIs are designed.","permalinkName":"Resource-URIs","type":"quiz","slNo":5,"durationText":"3 questions"},{"title":"RESTful URI types","description":"You can think of RESTful URIs as belonging to two types: instance resource URIs and collection resource URIs. Let's understand what they mean.","permalinkName":"RESTful-URI-types","type":"video","slNo":6,"durationText":"7 minutes"},{"title":"URI types","description":"You can think of RESTful URIs as belonging to two types: instance resource URIs and collection resource URIs. Let's understand what they mean.","permalinkName":"URI-types","type":"quiz","slNo":7,"durationText":"4 questions"},{"title":"HTTP Methods","description":"Now that we've identified some important resource URIs, let's work on the operations that can be performed and the data that's exchanged.","permalinkName":"HTTP-Methods","type":"video","slNo":8,"durationText":"11 minutes"},{"title":"HTTP Methods","description":"Now that we've identified some important resource URIs, let's work on the operations that can be performed and the data that's exchanged.","permalinkName":"HTTP-Methods","type":"quiz","slNo":9,"durationText":"3 questions"},{"title":"Idempotence In HTTP Methods","description":"Idempotence. Yes, that's a word. And it's an important property of HTTP methods according to the specifications.","permalinkName":"Idempotence-In-HTTP-Methods","type":"video","slNo":10,"durationText":"12 minutes"},{"title":"Rest Response","description":"We've looked at requests so far, and understood resource URIs and HTTP methods. Let's switch to responses now.","permalinkName":"Rest-Response","type":"video","slNo":11,"durationText":"16 minutes"},{"title":"HATEOAS","description":"In this tutorial, we'll learn about an important concept relating to REST APIs: HATEOAS\n","permalinkName":"HATEOAS","type":"video","slNo":12,"durationText":"14 minutes"},{"title":"The Richardson Maturity Model","description":"In this tutorial, we'll learn about the Richardson Maturity Model, a way for REST APIs to be classified, and the \"RESTfulness\" of an API determined.","permalinkName":"The-Richardson-Maturity-Model","type":"video","slNo":13,"durationText":"8 minutes"}]}}