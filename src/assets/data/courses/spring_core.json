{"code":"spring_core","desc":"This course provides an introduction to the Spring framework. You will understand the concepts of dependency injection, understand how the core Spring framework works and how to write an application using it.","img":"https://i.ytimg.com/vi/WUqyoH_G4Ko/mqdefault.jpg","level":"Beginner","name":"Learning Spring Core","objectives":["Understanding dependency injection","Understanding the Spring application context","Implementing a Spring application by configuring and using Spring beans","Writing lifecycle hooks and BeanPostProcessors","Writing event handling logic"],"slNo":3,"tags":["Java","Spring"],"topic":"spring","units":{"1":{"courseCode":"spring_core","unitDescription":"Learn what the Spring Framework is all about. Understand the concept of Dependency Injection and get started with using the Spring framework. You'll learn how to setup your development environment to start writing Spring applications. You'll also create and inject Spring beans using XML configuration.","unitName":"Introduction to Spring and Dependency Injection","unitNumber":1,"lessons":[{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll understand the concept of Dependency Injection and how it simplifies managing dependencies between objects.","permalinkName":"Understanding-Dependency-Injection","title":"Understanding Dependency Injection","unitSlNo":"1.1","youtube":"GB8k2-Egfv0","duration":892,"slNo":1,"next":"/courses/spring_core/lessons/Setting-Up","content":"<p>###Summary</p>\n<p>Here is the Wikipedia definition for dependency injection:</p>\n<blockquote>\n<p>Dependency injection is a software design pattern that allows the removal of hard-coded dependencies and makes it possible to change them, whether at run-time or compile-time.</p>\n</blockquote>\n<p>Given two objects that are dependent on each other, the idea is to decouple the dependencies between two objects. </p>\n<p>If every class were to instantiate every object it needs by using the <code>new</code> operator, would it work? Yes, it would! but that also means that the dependencies are tightly coupled. Every time the object is instantiated, it has the exact same set of dependencies. If you need the object to work with a different instance of any dependency, you&#39;ll need to modify the code of the class.</p>\n<p>Instead, if the object were to only deal with interfaces, and have the actual object instances supplied to it by setter methods, it opens the class up to a lot of possibilities. The same class could do different things depending on what instance is supplied to it. And the whole time, the class itself doesn&#39;t need to be modified since the class works at the interface level. So, as long as the supplied objects implement the interface, no changes to the class itself are necessary.</p>\n<p>This is the concept of dependency injection, and Spring provides a framework that simplifies writing code that uses this concept.</p>\n","type":"video","durationText":"14 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll learn how to set up our Eclipse development environment to write Spring code.","permalinkName":"Setting-Up","title":"Setting Up","unitSlNo":"1.2","youtube":"Z5gubdHLJIc","duration":228,"slNo":2,"prev":"/courses/spring_core/lessons/Understanding-Dependency-Injection","next":"/courses/spring_core/lessons/Understanding-Spring-Bean-Factory","content":"<p>###Summary</p>\n<p>In this tutorial, you will download the required software and binaries to set up your development environment.</p>\n<p>####Step 1: Downloading the software</p>\n<p>Here are the links to download the required software and binaries.  </p>\n<p><strong>Eclipse</strong>: <a href=\"http://www.eclipse.org/downloads\">http://www.eclipse.org/downloads</a></p>\n<p><strong>Spring Binaries</strong>: <a href=\"http://repo.springsource.org/release/org/springframework/spring/\">http://repo.springsource.org/release/org/springframework/spring/</a></p>\n<p><strong>Apache Commons Logging</strong>: <a href=\"http://commons.apache.org/logging\">http://commons.apache.org/logging</a></p>\n<p>####Step 2: Installing Eclipse</p>\n<p>Go through the standard installation procedure for the Eclipse download based on your operating system.</p>\n<p>####Step 3: Configuring Spring libraries</p>\n<p>Create a User library in Eclipse that contains all the required Spring jars. This library will come in  handy when you need to start a Spring project. Just add this library to every project that you need to use Spring.</p>\n","type":"video","durationText":"3 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll discuss the role of Spring as a bean container. We'll also have a quick discussion on the Factory pattern, and I'll introduce you to the Spring Bean Factory object.","permalinkName":"Understanding-Spring-Bean-Factory","title":"Understanding Spring Bean Factory","unitSlNo":"1.3","youtube":"xlWwMSu5I70","duration":413,"slNo":3,"prev":"/courses/spring_core/lessons/Setting-Up","next":"/courses/spring_core/lessons/Writing-Code-Using-the-Bean-Factory","content":"<p>###Summary</p>\n<p>The concept of dependency injection that Spring is so popular for is possible because Spring behaves as a container of beans.</p>\n<p>You can have instances of your objects in the Spring container, which means that Spring handles the instantiation and the life cycle of the beans.</p>\n<p>Spring creates all instances of the objects you need. It also has references to all the objects. This is different from creating an instance yourself by using <code>new()</code>. This is what&#39;s called a <em>Factory pattern</em>.</p>\n<p>In the factory pattern, there exists an object that behaves as the <em>object factory</em>. Basically, whenever you need an instance of any object, you don&#39;t create the instance yourself. Instead, you call a method of this <em>factory</em> instance, and that method returns the instance you need. This <em>factory</em> might read from a configuration file, which acts as a blueprint, containing guidelines on how to create the object.</p>\n<p>Spring has objects of type <code>BeanFactory</code> which behave like an object factory. You specify object blueprints in a configuration file, an XML file, and supply it to the <code>BeanFactory</code>. Then when you need an instance of any object, you ask the <code>BeanFactory</code> for it. It then refers the XML file and constructs the bean as specified. This bean, which is now a <em>Spring bean</em> since it has been created by the Spring container, is then returned to whoever asked for it.</p>\n<p>In the next tutorial, we&#39;ll write code that implements this flow.</p>\n","type":"video","durationText":"6 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll write code to implement the BeanFactory concept that we learnt in our previous tutorial. We'll write a Spring XML to configure a Spring bean. Then we'll use the BeanFactory to instantiate our bean in the Spring container.","permalinkName":"Writing-Code-Using-the-Bean-Factory","title":"Writing Code Using the Bean Factory","unitSlNo":"1.4","youtube":"7c6ZTF6cF88","duration":682,"slNo":4,"prev":"/courses/spring_core/lessons/Understanding-Spring-Bean-Factory","next":"/courses/spring_core/lessons/ApplicationContext-and-Property-Initialization","type":"video","durationText":"11 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll first replace the BeanFactory with the more powerful ApplicationContext. We'll then make Spring initialize a property of an object by specifying the value in the configuration XML.","permalinkName":"ApplicationContext-and-Property-Initialization","title":"ApplicationContext and Property Initialization","unitSlNo":"1.5","youtube":"ZxLaEovze3M","duration":457,"slNo":5,"prev":"/courses/spring_core/lessons/Writing-Code-Using-the-Bean-Factory","next":"/courses/spring_core/lessons/Using-Constructor-Injection","type":"video","durationText":"7 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll now use constructors to set the member variable values for our Spring beans. We'll also look at some techniques to resolve conflicts in the case of overloaded constructors.","permalinkName":"Using-Constructor-Injection","title":"Using Constructor Injection","unitSlNo":"1.6","youtube":"IOZzxmJVus0","duration":840,"slNo":6,"prev":"/courses/spring_core/lessons/ApplicationContext-and-Property-Initialization","next":"/courses/spring_core/lessons/Injecting-Objects","type":"video","durationText":"14 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll use dependency injection to inject an object dependency to a Spring bean.","permalinkName":"Injecting-Objects","title":"Injecting Objects","unitSlNo":"1.7","youtube":"g15RcFyEcrk","duration":919,"slNo":7,"prev":"/courses/spring_core/lessons/Using-Constructor-Injection","next":"/courses/spring_core/lessons/Inner-Beans,-Aliases-and-idref","type":"video","durationText":"15 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll look at some concepts related to bean naming and usage like alias and idref. We'll also understand how to write inner beans.","permalinkName":"Inner-Beans,-Aliases-and-idref","title":"Inner Beans, Aliases and idref","unitSlNo":"1.8","youtube":"TW51XsixMqA","duration":591,"slNo":8,"prev":"/courses/spring_core/lessons/Injecting-Objects","next":"/courses/spring_core/lessons/Initializing-Collections","type":"video","durationText":"9 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll initialize a member variable that's a collection and each of the elements are references to other beans.","permalinkName":"Initializing-Collections","title":"Initializing Collections","unitSlNo":"1.9","youtube":"MgYURkcYeDQ","duration":362,"slNo":9,"prev":"/courses/spring_core/lessons/Inner-Beans,-Aliases-and-idref","next":"/courses/spring_core/lessons/Bean-Autowiring","type":"video","durationText":"6 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll now look at a configuration feature provided by Spring to wire dependencies automatically: Bean Autowiring. We'll learn about different types of autowiring, and we'll write some code to implement bean autowiring by name.","permalinkName":"Bean-Autowiring","title":"Bean Autowiring","unitSlNo":"1.10","youtube":"suiEGbKf21g","duration":447,"slNo":10,"prev":"/courses/spring_core/lessons/Initializing-Collections","next":"/courses/spring_core/lessons/Understanding-Bean-Scopes","type":"video","durationText":"7 minutes"}],"firstLesson":"/courses/spring_core/lessons/Understanding-Dependency-Injection"},"2":{"courseCode":"spring_core","unitDescription":"Understand the concept of scopes in a Spring application. Learn how to access the application context directly from your code. Use the bean inheritance feature to manage your configuration. Implement various post-processor hooks to tap into the lifecycle of your Spring application.","unitName":"Scopes and Lifecycles","unitNumber":2,"lessons":[{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"This tutorial covers the concepts of Bean Scopes in Spring. We'll understand when beans are created and how to configure different scopes for the beans.","permalinkName":"Understanding-Bean-Scopes","title":"Understanding Bean Scopes","unitSlNo":"2.1","youtube":"NnNvDknQJt0","duration":713,"slNo":1,"prev":"/courses/spring_core/lessons/Bean-Autowiring","next":"/courses/spring_core/lessons/Using-ApplicationContextAware","type":"video","durationText":"11 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll provide our beans with access to the ApplicationContext object by implementing the ApplicationContextAware interface. We'll also use BeanNameAware interface to get the name of the bean configured in the Spring XML.","permalinkName":"Using-ApplicationContextAware","title":"Using ApplicationContextAware","unitSlNo":"2.2","youtube":"WUqyoH_G4Ko","duration":538,"slNo":2,"prev":"/courses/spring_core/lessons/Understanding-Bean-Scopes","next":"/courses/spring_core/lessons/Bean-Definition-Inheritance","type":"video","durationText":"8 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll learn what bean definition inheritance is, and how to configure a parent bean definition and have children beans inherit the bean definitions.","permalinkName":"Bean-Definition-Inheritance","title":"Bean Definition Inheritance","unitSlNo":"2.3","youtube":"LxRiFFEXs5I","duration":597,"slNo":3,"prev":"/courses/spring_core/lessons/Using-ApplicationContextAware","next":"/courses/spring_core/lessons/Lifecycle-Callbacks","type":"video","durationText":"9 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll use two different ways to run methods on initialization and destruction of beans.","permalinkName":"Lifecycle-Callbacks","title":"Lifecycle Callbacks","unitSlNo":"2.4","youtube":"8LCpo4sfdQU","duration":924,"slNo":4,"prev":"/courses/spring_core/lessons/Bean-Definition-Inheritance","next":"/courses/spring_core/lessons/Writing-a-BeanPostProcessor","type":"video","durationText":"15 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll learn about and write our own BeanFactoryPostProcessor. We'll also try out a handy BeanFactoryPostProcessor that comes with Spring: the PropertyPlaceholderConfigurer.","permalinkName":"Writing-a-BeanFactoryPostProcessor","title":"Writing a BeanFactoryPostProcessor","unitSlNo":"2.6","youtube":"szNWTBlewQI","duration":917,"slNo":6,"prev":"/courses/spring_core/lessons/Writing-a-BeanPostProcessor","next":"/courses/spring_core/lessons/Coding-To-Interfaces","type":"video","durationText":"15 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"When using Spring for dependency injection, it's a good practice to use interfaces for referencing dependencies. In this tutorial, we'll learn how to 'code to interfaces'.","permalinkName":"Coding-To-Interfaces","title":"Coding To Interfaces","unitSlNo":"2.7","youtube":"5IDIEMxdkC8","duration":639,"slNo":7,"prev":"/courses/spring_core/lessons/Writing-a-BeanFactoryPostProcessor","next":"/courses/spring_core/lessons/Introduction-to-Annotations-and-the-Required-Annotation","type":"video","durationText":"10 minutes"}],"firstLesson":"/courses/spring_core/lessons/Understanding-Bean-Scopes"},"3":{"courseCode":"spring_core","unitDescription":"There is an easier (and better) way to manage your Spring configuration - using Annotations. Learn how to declare and configure Spring beans using annotations. Learn how to autowire beans and implement component stereotypes. Also learn how to write and publish custom events in your Spring application.","unitName":"Annotations and Event Handling","unitNumber":3,"lessons":[{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"Here we'll have our first look at Spring annotations. We'll understand and implement the Required annotation, and we'll also learn how it's actually a BeanPostProcessor that's working behind the scenes.","permalinkName":"Introduction-to-Annotations-and-the-Required-Annotation","title":"Introduction to Annotations and the Required Annotation","unitSlNo":"3.1","youtube":"Fs_IoEGSP-A","duration":594,"slNo":1,"prev":"/courses/spring_core/lessons/Coding-To-Interfaces","next":"/courses/spring_core/lessons/The-Autowired-Annotation","type":"video","durationText":"9 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll use the Autowired annotation to wire up dependencies. We'll learn how to add dependencies by type and name. We'll also use Qualifiers to narrow down dependency contenders.","permalinkName":"The-Autowired-Annotation","title":"The Autowired Annotation","unitSlNo":"3.2","youtube":"IVIhVJJGo68","duration":860,"slNo":2,"prev":"/courses/spring_core/lessons/Introduction-to-Annotations-and-the-Required-Annotation","next":"/courses/spring_core/lessons/Some-JSR-250-Annotations","type":"video","durationText":"14 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll learn and implement three JSR-250 annotations that Spring supports:Resource, PostConstruct and PreDestroy.","permalinkName":"Some-JSR-250-Annotations","title":"Some JSR 250 Annotations","unitSlNo":"3.3","youtube":"apTEbKPW3ow","duration":506,"slNo":3,"prev":"/courses/spring_core/lessons/The-Autowired-Annotation","next":"/courses/spring_core/lessons/Component-and-Stereotype-Annotations","type":"video","durationText":"8 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll now use the Component annotation to define Spring beans. We'll also look at some Stereotype annotations.","permalinkName":"Component-and-Stereotype-Annotations","title":"Component and Stereotype Annotations","unitSlNo":"3.4","youtube":"oTcSW4-_1Ew","duration":743,"slNo":4,"prev":"/courses/spring_core/lessons/Some-JSR-250-Annotations","next":"/courses/spring_core/lessons/Using-MessageSource-To-Get-Text-From-Property-Files","type":"video","durationText":"12 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"In this tutorial, we'll use the MessageSource interface to retrieve messages out of property files.","permalinkName":"Using-MessageSource-To-Get-Text-From-Property-Files","title":"Using MessageSource To Get Text From Property Files","unitSlNo":"3.5","youtube":"cUqquQDZR-c","duration":1315,"slNo":5,"prev":"/courses/spring_core/lessons/Component-and-Stereotype-Annotations","next":"/courses/spring_core/lessons/Event-Handling-in-Spring","type":"video","durationText":"21 minutes"},{"courseCode":"spring_core","courseName":"Learning Spring Core","description":"We'll now look at Spring's support for Event Handling. We'll write an event listener in this tutorial. I'll also show you how to write custom events and publish them anywhere in the code.","permalinkName":"Event-Handling-in-Spring","title":"Event Handling in Spring","unitSlNo":"3.6","youtube":"ZUe1Xz7DAcY","duration":976,"slNo":6,"prev":"/courses/spring_core/lessons/Using-MessageSource-To-Get-Text-From-Property-Files","type":"video","durationText":"16 minutes"}],"firstLesson":"/courses/spring_core/lessons/Introduction-to-Annotations-and-the-Required-Annotation"}},"durationText":"12 minutes"}